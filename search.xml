<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode周赛笔记</title>
      <link href="/2023/01/09/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/09/%E5%91%A8%E8%B5%9B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="单周赛">311单周赛</h2><blockquote><p>时间：2022.09.18</p><p>【过程】</p><p>前两道题很快就写出来了</p><p>第三道题，很难受，一种感觉能写出来但是就是写不出来的感觉，还是对于二叉树的递归不够深入</p><p>第四道题用常规方法写出来，但是超时...</p></blockquote><p>###6181. 最长的字母序连续子字符串的长度</p><blockquote><p><ahref="https://leetcode.cn/problems/length-of-the-longest-alphabetical-continuous-substring/">题目</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比赛写的时候是用栈写的，但是其实只是用到栈的思想，不用栈也是完全可以的</span></span><br><span class="line"><span class="comment">// 抓住 1、连续 2、字母序 3、最大</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestContinuousSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">need</span> <span class="operator">=</span> s.charAt(<span class="number">0</span>); <span class="comment">// 下一个需要的字符</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(c == need)&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            need ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果不满足的话，从这个位置重新开始向后寻找</span></span><br><span class="line">            need = c + <span class="number">1</span>;</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        maxLen = Math.max(maxLen, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转二叉树的奇数层">6182. 反转二叉树的奇数层</h3><blockquote><p><ahref="https://leetcode.cn/problems/reverse-odd-levels-of-binary-tree/">题目</a></p></blockquote><p>【答题】</p><p>解题过程中，想过递归和队列两种方式。</p><p>但是，递归想的一直都是如何交换节点，所以很快就放弃了</p><p>使用队列，想的是在奇数层用遍历将值倒过来，写的过程中不是很顺利</p><p>【思路】</p><p><strong>核心思想就是交换值，不交换结点</strong></p><h4 id="dfs-递归">DFS 递归</h4><p>其实使用DFS递归的过程中只要交换结点的值就可以了，这样就不会影响下面的子节点，只要考虑如何递归能够将一层的结点值倒过来。</p><p>运用到二叉树递归的一个技巧，【当递归函数参数只有一个结点难以实现递归时，可以考虑使用两个结点参数的递归函数】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">reverseOddLevels</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">reverseOddLevelsByDFS</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    dfs(root.left, root.right, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node1, TreeNode node2, <span class="type">int</span> level)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node1 == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 如果是奇数层，就交换对应结点的值</span></span><br><span class="line">    <span class="keyword">if</span>(level % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> node1.val;</span><br><span class="line">        node1.val = node2.val;</span><br><span class="line">        node2.val = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 通过两个结点一起递归，且该两个结点是处于对称位置</span></span><br><span class="line">    dfs(node1.left, node2.right, level+<span class="number">1</span>);</span><br><span class="line">    dfs(node1.right, node2.left, level+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bfs-迭代">BFS 迭代</h4><p>BFS迭代就是借助队列实现层次遍历，如果是奇数层做出对结点值的改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] values;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">reverseOddLevelsByBFS</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果队列中放的是奇数层，将这一层的值取出来放在values数组中</span></span><br><span class="line">        <span class="keyword">if</span>(level % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            values = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                values[i] = node.val;</span><br><span class="line">                queue.offer(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 改造一下常规框架，如果是奇数层，再将结点poll出来之后，根据values数组改变其值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(level % <span class="number">2</span> == <span class="number">1</span>)&#123; <span class="comment">// 如果是奇数层就改变值</span></span><br><span class="line">                node.val = values[size - i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) queue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) queue.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的前缀分数和">6183. 字符串的前缀分数和</h3><blockquote><p><ahref="https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/">题目</a></p></blockquote><p>在前缀树的基础上，这道题就十分简单了，只需要稍微改造一下前缀树，在插入word的过程中每经过一个结点就+1，然后再提供一个计算word得分的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">改造 Trie 树 在每一个结点里增加一个 cnt 统计在插入过程中 经过该结点的单词个数</span></span><br><span class="line"><span class="comment">也就是以 到这个结点为至形成的prefix 开始的单词数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sumPrefixScores(String[] words) &#123;</span><br><span class="line">    <span class="type">Trie</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        root.insert(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] answer = <span class="keyword">new</span> <span class="title class_">int</span>[words.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">        answer[i] = root.getScores(words[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Trie[] children;</span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur.children[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">                cur.children[idx] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur.children[idx].cnt ++; <span class="comment">// 经过这个结点的单词数++</span></span><br><span class="line">            cur = cur.children[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得该word的得分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScores</span><span class="params">(String word)</span>&#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur.children[idx] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 不存在这个word, 对于已存在的word肯定不会出现这个情况</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                score += cur.children[idx].cnt;</span><br><span class="line">                cur = cur.children[idx];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur.children[idx] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.children[idx];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur.children[idx] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.children[idx];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模板-208.-实现-trie-前缀树">模板: 208. 实现 Trie (前缀树)</h4><blockquote><p><ahref="https://leetcode.cn/problems/implement-trie-prefix-tree/">题目</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Trie的原理: 每一个结点都包含一个指向 size = 26 的数组的引用</span></span><br><span class="line"><span class="comment">插入一个单词就是 从根节点依次向下新增结点 在数组对应位置(对应下标的字符 - &#x27;a&#x27;) 创建结点Trie</span></span><br><span class="line"><span class="comment">26cha&#x27;shu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Trie[] children;</span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur.children[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">                cur.children[idx] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.children[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur.children[idx] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.children[idx];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur.children[idx] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur.children[idx];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单周赛-1">327单周赛</h2><blockquote><p>时间：2023-01-08</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20230108222540372.png" /></p><p>在第三道题浪费了太多时间，第四道题比较复杂，思路不清晰。</p></blockquote><h3 id="使字符串总不同字符的数目相等第三题"><ahref="https://leetcode.cn/problems/make-number-of-distinct-characters-equal/">6284.使字符串总不同字符的数目相等(第三题)</a></h3><blockquote><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20230108222913402.png" /></p></blockquote><p>这道题在做题时把问题想简单了，导致没有考虑全面，通过判题罚时找到漏洞。</p><p>其实可以将两个字符串的字符出现情况用两个数组记录下来，然后双重循环即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isItPossible</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a1</span><span class="params">(<span class="number">26</span>)</span></span>; <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a2</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : word1) a1[c-<span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : word2) a2[c-<span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> s1 = <span class="number">0</span>, s2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : a1) s1 += i &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : a2) s2 += i &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(s1 - s2) &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a1[i] &gt; <span class="number">0</span> &amp;&amp; a2[j] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                a1[j]++; a1[i]--; a2[j]--; a2[i]++;</span><br><span class="line">                s1 = <span class="number">0</span>; s2 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k : a1) s1 += k &gt; <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k : a2) s2 += k &gt; <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (s1 == s2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                a1[j]--; a1[i]++; a2[j]++; a2[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过桥的时间第四题"><ahref="https://leetcode.cn/problems/time-to-cross-a-bridge/">6306.过桥的时间(第四题)</a></h3><blockquote><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20230108223927959.png" /></p></blockquote><p>看了题解，核心就是<strong>四个堆</strong>，因为上面的流程无非就是四个步骤：从桥的左边到右边、从旧仓库取箱子、从桥的右边到左边、从新仓库放箱子，就可以对应这四个步骤建立四个堆。整个过程还是比较复杂的，需要仔细理解。</p><ul><li>==wait_l==：在桥左边等待的工人</li><li>==wait_r==：在桥右边等待的工人</li><li>==box_l==：在新仓库放箱子的工人</li><li>==box_r==：在旧仓库取箱子的工人</li></ul><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20230109143846728.png" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; p;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findCrossingTime</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; time)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> size = time.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i ++) time[i].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="comment">// 按照效率从高到低排序 使得下标最大的工人效率最低</span></span><br><span class="line">    <span class="built_in">sort</span>(time.<span class="built_in">begin</span>(), time.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;</span><br><span class="line">        <span class="type">int</span> prof_a = a[<span class="number">0</span>] + a[<span class="number">2</span>]; <span class="type">int</span> prof_b = b[<span class="number">0</span>] + b[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (prof_a != prof_b) <span class="keyword">return</span> prof_a &lt; prof_b;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">4</span>] &lt; b[<span class="number">4</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; wait_l, wait_r; <span class="comment">// 大顶堆 top()是效率最低的工人</span></span><br><span class="line">    priority_queue&lt;p, vector&lt;p&gt;, greater&lt;p&gt;&gt; box_l, box_r; <span class="comment">// 小顶堆 top()是最快完成box任务的工人</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cur = <span class="number">0</span>; <span class="comment">// 记录时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一开始全部在左边等待</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++) wait_l.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">bool</span> LtoR = n &gt; <span class="number">0</span> &amp;&amp; !wait_l.<span class="built_in">empty</span>();</span><br><span class="line">        <span class="type">bool</span> RtoL = !wait_r.<span class="built_in">empty</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!LtoR &amp;&amp; !RtoL) &#123; <span class="comment">// 左右两边都没有工人等待</span></span><br><span class="line">            <span class="comment">// 找到box_l和box_r中最快完成任务的工人 更新时间</span></span><br><span class="line">            <span class="type">int</span> x = INT_MAX;</span><br><span class="line">            <span class="keyword">if</span>(!box_l.<span class="built_in">empty</span>()) x = <span class="built_in">min</span>(x, box_l.<span class="built_in">top</span>().first);</span><br><span class="line">            <span class="keyword">if</span>(!box_r.<span class="built_in">empty</span>()) x = <span class="built_in">min</span>(x, box_r.<span class="built_in">top</span>().first);</span><br><span class="line">            cur = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (RtoL)&#123; <span class="comment">// 右边到左边</span></span><br><span class="line">            <span class="type">int</span> x = wait_r.<span class="built_in">top</span>(); <span class="comment">// 取出右边效率最低的工人x</span></span><br><span class="line">            wait_r.<span class="built_in">pop</span>();</span><br><span class="line">            cur += time[x][<span class="number">2</span>]; <span class="comment">// 让x工人过桥</span></span><br><span class="line">            <span class="comment">// 检查是否是最后一个工人到达桥左岸</span></span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; wait_r.<span class="built_in">empty</span>() &amp;&amp; box_r.<span class="built_in">empty</span>()) <span class="keyword">return</span> cur;</span><br><span class="line">            box_l.<span class="built_in">push</span>(<span class="built_in">p</span>(cur+time[x][<span class="number">3</span>], x)); <span class="comment">// 过桥后到新仓库放箱子 放入box_l堆中</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (LtoR) &#123; <span class="comment">// 左边到右边</span></span><br><span class="line">            <span class="type">int</span> x = wait_l.<span class="built_in">top</span>(); <span class="comment">// 取出左边效率最低的工人x</span></span><br><span class="line">            wait_l.<span class="built_in">pop</span>();</span><br><span class="line">            cur += time[x][<span class="number">0</span>]; <span class="comment">// 让x工人过桥</span></span><br><span class="line">            box_r.<span class="built_in">push</span>(<span class="built_in">p</span>(cur+time[x][<span class="number">1</span>], x)); <span class="comment">// 过桥后到旧仓库取箱子 放入box_r堆中</span></span><br><span class="line">            n--; <span class="comment">// 箱子数-1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!box_l.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            p worker = box_l.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">// 如果在桥上的工人过桥的时间里，有工人能够完成box任务，就将他们放到对应的桥边等待队列中</span></span><br><span class="line">            <span class="keyword">if</span> (worker.first &gt; cur) <span class="keyword">break</span>;</span><br><span class="line">            box_l.<span class="built_in">pop</span>();</span><br><span class="line">            wait_l.<span class="built_in">push</span>(worker.second);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!box_r.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            p worker = box_r.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">// 如果在桥上的工人过桥的时间里，有工人能够完成box任务，就将他们放到对应的桥边等待队列中</span></span><br><span class="line">            <span class="keyword">if</span> (worker.first &gt; cur) <span class="keyword">break</span>;</span><br><span class="line">            box_r.<span class="built_in">pop</span>();</span><br><span class="line">            wait_r.<span class="built_in">push</span>(worker.second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类似的题目：</p><p><a href="https://leetcode.cn/problems/single-threaded-cpu/">1834.单线程 CPU</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间求和</title>
      <link href="/2023/01/05/%E5%8C%BA%E9%97%B4%E6%B1%82%E5%92%8C/"/>
      <url>/2023/01/05/%E5%8C%BA%E9%97%B4%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.cn/problems/range-sum-query-mutable/">307.区域和检索 - 数组可修改</a></p></blockquote><p>区间求和是算法中非常常见的一个类型题目，一般有两个操作：</p><ol type="1"><li>单点更新</li><li>区间求和</li></ol><p>然后不同的题目会对上面两种操作的调用次数不同</p><h2 id="普通方法">1、普通方法</h2><h3 id="普通数组">1.1、普通数组</h3><ul><li>单点更新：<span class="math inline">\(O(1)\)</span></li><li>区间求和：<span class="math inline">\(O(N)\)</span></li></ul><h3 id="前缀和数组">1.2、前缀和数组</h3><ul><li>单点更新：<span class="math inline">\(O(N)\)</span></li><li>区间求和：<span class="math inline">\(O(1)\)</span></li></ul><blockquote><p>无论是哪一种方式，如果单点更新和区间求和的次数相当，并且都十分多时，效率是不高的。</p><p>但是如果某一种操作的调用次数非常高，可以使用对应的方式。</p><p>例如有些题目，数组初始化后就不再改变，只是不断地求区间和，就可以使用前缀和。</p></blockquote><h2 id="分块">2、分块</h2><blockquote><p>分块的思想是，由于单点更新和区间求和的调用次数相当，所以希望尽可能平摊在两个操作上的时间复杂度</p></blockquote><p>【操作】</p><ol type="1"><li>将数组分成 <span class="math inline">\(\sqrt{N}\)</span> 块，每块有<span class="math inline">\(\sqrt{N}\)</span> 个元素</li><li>单点更新：在某个块内遍历：<spanclass="math inline">\(O(\sqrt{N})\)</span></li><li>区间求和：最多将 <span class="math inline">\(\sqrt{N}\)</span>个块加在一起：<span class="math inline">\(O(\sqrt{N})\)</span></li></ol><h2 id="树形数组">3、树形数组</h2><figure><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029210540933.png"alt="image-20221029210540933" /><figcaption aria-hidden="true">image-20221029210540933</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Binary Index Tree</span></span><br><span class="line"><span class="comment"> * 树状数组</span></span><br><span class="line"><span class="comment"> * 思想是: 前缀区间的差集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] tree;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> len;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BIT</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        len = n + <span class="number">1</span>;</span><br><span class="line">        tree = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做单点更新</span></span><br><span class="line"><span class="comment">     * 要把包含了nums[i]的元素全部更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 增加的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> delta)</span>&#123;</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; len)&#123;</span><br><span class="line">            tree[i] += delta;</span><br><span class="line">            i += lowbit(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 下标 i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 前 i 个元素之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sum += tree[i];</span><br><span class="line">            i -= lowbit(i); <span class="comment">// 不断去掉(二进制表示下)最后一个1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树">4、线段树</h2><figure><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029210553764.png"alt="image-20221029210553764" /><figcaption aria-hidden="true">image-20221029210553764</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线段树</span></span><br><span class="line"><span class="comment"> * 用二分的方式来对树进行划分</span></span><br><span class="line"><span class="comment"> * 思想是: 若干区间的并集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] st;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        buildTree(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    二叉树的性质:</span></span><br><span class="line"><span class="comment">            1、已知父节点下标 i，求出左右子节点的下标 i &gt;&gt; 1 和 (i &gt;&gt; 1) | 1</span></span><br><span class="line"><span class="comment">            2、已知左右子节点下标 i，求出父节点下标 i &lt;&lt; 1</span></span><br><span class="line"><span class="comment">            3、对于完美二叉树来说，整棵树的节点总数 = 2 * 叶子节点总数</span></span><br><span class="line"><span class="comment">    从最底层开始建树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        n = nums.length;</span><br><span class="line">        st = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * n];</span><br><span class="line">        <span class="comment">// 先构建叶子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &lt; <span class="number">2</span> * n; i++)&#123;</span><br><span class="line">            st[i] = nums[i - n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构建非叶子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="comment">// st[i &lt;&lt; 1] 和 st[(i &lt;&lt; 1) | 1] 分别代表 左子节点 和 右子节点</span></span><br><span class="line">            st[i] = st[i &lt;&lt; <span class="number">1</span>] + st[(i &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> delta)</span>&#123;</span><br><span class="line">        index += n;</span><br><span class="line">        <span class="keyword">while</span> ( index &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            st[index] += delta;</span><br><span class="line">            index = index &gt;&gt; <span class="number">1</span>; <span class="comment">// 向上找到父节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        l += n; r += n;</span><br><span class="line">        <span class="keyword">for</span> (; l &lt;= r; l &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>( (l &amp; <span class="number">1</span>) == <span class="number">1</span> )&#123; <span class="comment">// l是右子节点</span></span><br><span class="line">                sum += st[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( (r &amp; <span class="number">1</span>) == <span class="number">0</span> )&#123; <span class="comment">// r是左子节点</span></span><br><span class="line">                sum += st[r];</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理Lab5</title>
      <link href="/2022/12/30/compilation-principle-lab5/"/>
      <url>/2022/12/30/compilation-principle-lab5/</url>
      
        <content type="html"><![CDATA[<h2 id="实验过程">实验过程</h2><blockquote><p><ahref="http://47.122.3.40:8081/#/lab5-function-and-var/lab5-function-and-var">本次实验</a>通过重新设计符号表，使用Visitor函数遍历语法树并在合适的函数内调用LLVM的API完成了对函数定义和函数调用，以及局部变量的声明、定义和使用的翻译。</p></blockquote><p>==重新设计符号表==：整体上符号表的结构没有改变，只是需要记录的信息变成了<code>LLVMValueRef</code>和<code>LLVMTypeRef</code>。<u>注意存在符号表里的<code>LLVMValueRef</code>是指针，而不是变量本身。</u></p><p>==翻译==：翻译过程并不复杂，但是需要注意很多细节！</p><h2 id="遇到的问题">遇到的问题</h2><p>==BUGs==：<strong>1</strong>、<code>void</code>函数可以没有返回语句，但是翻译时要将其加上；<strong>2</strong>、<code>(exp)</code>的<code>visitor</code>函数需要重写使其返回<code>exp</code>的<code>LLVMValueRef</code>；<strong>3</strong>、形如<code>x[x[0]]</code>的翻译中，当其作为左值时要注意，里面的<code>x[0]</code>返回的应是本身的值，而外面的<code>x[]</code>返回的应该是指针，由于两者都属于<code>LVal</code>，所以在遍历翻译是需要加以区分。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab3 Page Tables</title>
      <link href="/2022/12/27/6.S081-lab3-pgtbl/"/>
      <url>/2022/12/27/6.S081-lab3-pgtbl/</url>
      
        <content type="html"><![CDATA[<h2 id="lecture-4-chapter-3">0 lecture 4 &amp; chapter 3</h2><h3 id="lecture-4">Lecture 4</h3><h3 id="chapter-3-page-tables">Chapter 3 Page tables</h3><h4 id="xv6的页表映射机制">xv6的页表映射机制</h4><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221225144537100.png" /></p><h4 id="xv6-内核地址空间">xv6 内核地址空间</h4><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221225144757600.png" /></p><h4 id="xv6的页表代码">xv6的页表代码</h4><blockquote><p><code>vm.c</code></p></blockquote><p>核心数据结构：==pagetable_t==</p><p>核心函数：==walk== 和 ==mappages==</p><h4 id="物理地址分配代码">物理地址分配代码</h4><blockquote><p><code>kalloc.c</code></p></blockquote><p>核心数据结构：==kmem==</p><p>核心函数：==kfree== 和 ==kalloc==</p><h4 id="进程地址空间">进程地址空间</h4><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221225152730759.png" /></p><h4 id="系统调用sbrk-和-exec">系统调用：sbrk 和 exec</h4><p><strong>sbrk</strong>：为一个进程去减少或者增加它的内存（<code>kernel/sysproc.c</code>）</p><p><strong>exec</strong>：创建一个地址空间的用户部分</p><blockquote><p><font color='red'>what is trampoline?</font></p><p>trampolinepage存储了用户空间和内核空间相互切换的代码，无论是在内核空间还是在用户空间它都映射在相同的虚拟地址，这样在切换之后还可以继续工作。</p><p>相关文章：<ahref="https://xiayingp.gitbook.io/build_a_os/traps-and-interrupts/untitled-3">Whatis trampoline?</a></p><p><font color='red'>what is trapframe?</font></p><p><code>trapframe</code>是存在于用户地址空间，位于<code>trampoline</code>下面的大小为<code>PGSIZE</code>（4096字节）的一块内存，用于在用户地址空间向内核地址空间切换时保存用户空间的寄存器。</p></blockquote><h2 id="speed-up-system-calls">1 Speed up system calls</h2><p><u>任务描述</u>：加速<code>getpid()</code>系统调用。方法是在<code>trapframe</code>前面映射一个只读的页，在这个页的开始，存储一个结构体<code>syscall</code>，结构体里存储当前进程的<code>pid</code>，然后通过已经提供的<code>ugetpid()</code>函数获得<code>pid</code>。</p><p><u>思路</u>：可以参考<code>trapframe</code>的构造。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤</span></span><br><span class="line"><span class="comment">// 1. 在proc结构体中增加一个usyscall字段</span></span><br><span class="line"><span class="comment">// 2. 在allocproc()函数为usyscall分配空间，并且将pid存储在usyscall中</span></span><br><span class="line"><span class="comment">// 3. 在proc_pagetable()函数中将p-&gt;usyscall（物理地址）映射到USYSCALL（虚拟地址）</span></span><br><span class="line"><span class="comment">// 4. 在freeproc()函数中将usyscall的空间释放</span></span><br><span class="line"><span class="comment">// 5. 在proc_freepagetable()函数中取消之前建立的映射</span></span><br></pre></td></tr></table></figure><h2 id="print-a-page-table">2 Print a page table</h2><p><u>任务描述</u>：如题要求打印页表。</p><p><u>思路</u>：参考<code>freewalk</code>函数进行递归。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> level = <span class="number">1</span>;</span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">vmprint</span><span class="params">(<span class="type">pagetable_t</span> pagetable)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(level &gt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(level == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;page table %p\n&quot;</span>, pagetable);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">512</span>; i++)&#123;</span><br><span class="line">        <span class="type">pte_t</span> pte = pagetable[i];</span><br><span class="line">        <span class="keyword">if</span>(pte &amp; PTE_V)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; level; j++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(j != level - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            uint64 child = PTE2PA(pte);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: pte %p pa %p\n&quot;</span>, i, pte, child);</span><br><span class="line">            level++;</span><br><span class="line">            vmprint((<span class="type">pagetable_t</span>)child);</span><br><span class="line">            level--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="detecting-which-pages-have-been-accessed">3 Detecting whichpages have been accessed</h2><p><u>任务描述</u>：检测页表是否被访问，实现<code>pgaccess</code>系统调用。</p><p><u>思路</u>：通过<code>walk</code>函数找到虚拟地址对应的<code>pte</code>，检查<code>PTE_A</code>位即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sysproc.c</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">sys_pgaccess</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    uint64 base;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    uint64 mask;</span><br><span class="line">    <span class="keyword">if</span>(argaddr(<span class="number">0</span>, &amp;base) &lt; <span class="number">0</span> || argint(<span class="number">1</span>, &amp;len) &lt; <span class="number">0</span> || argaddr(<span class="number">2</span>, &amp;mask) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    uint64 start = PGROUNDDOWN(base);</span><br><span class="line">    uint64 bitmask = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++, start += PGSIZE)&#123;</span><br><span class="line">        <span class="type">pte_t</span> *pte = walk(myproc()-&gt;pagetable, start, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(pte == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// page not map</span></span><br><span class="line">        uint64 flag = (*pte &amp; PTE_A) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            *pte ^= PTE_A; <span class="comment">// clear the PTE_A</span></span><br><span class="line">        &#125;</span><br><span class="line">        bitmask |= (flag &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(copyout(myproc()-&gt;pagetable, mask, (<span class="type">char</span> *)&amp;bitmask, <span class="keyword">sizeof</span>(uint64)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>:zap:访问页表时将<code>PTE_A</code>置1的工作由RISC-V硬件做了，在代码中不需要自己设置。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 6.S081 OS Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.S081 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理-Lab4</title>
      <link href="/2022/12/22/compilation-principle-lab4/"/>
      <url>/2022/12/22/compilation-principle-lab4/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理lab4">编译原理Lab4</h1><h2 id="实验过程">实验过程</h2><p>总的来说，本次实验比较简单，只要弄清楚<code>LLVM</code>的<code>API</code>如何使用即可，核心在于编写<code>MyVisitor</code>类。</p><p>由于本次实验只涉及<code>main</code>函数以及<code>return</code>语句，并且<code>return</code>语句中的表达式都是由<code>INTEGR_CONST</code>组成，所以只需要重写函数定义、返回语句、运算表达式以及数字这几个<code>visitor</code>函数即可。整体的逻辑比较简单，这里不做详细描述。</p><h2 id="遭遇的问题">遭遇的问题</h2><p>==关于如何找到正确API==：可以写一个包含想要寻找的操作的<code>.c</code>文件，用<code>clang</code>编译成<code>.ll</code>，从中找到<code>API</code>的大致名称。比如我在写<code>%</code>运算的时候，就是通过这种方法找到<code>srem</code>操作对应的<code>API</code>。</p><p>==关于导入依赖的报错==：导了一晚上的包，最后发现有关<code>linux</code>的包还是没有导入。经过搜索后，加入阿里云镜像，并且对<code>maven</code>的<code>import</code>进行配置，得以解决。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-Lab4</title>
      <link href="/2022/12/15/OS-Lab4/"/>
      <url>/2022/12/15/OS-Lab4/</url>
      
        <content type="html"><![CDATA[<h2 id="实验要求">实验要求</h2><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221201103215027.png" /></p><h2 id="源码理解">源码理解</h2><h3 id="运行源码">运行源码</h3><p><code>make run</code> 之后报错</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221201105312262.png" /></p><p>和Lab3一样</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221201105450390.png" /></p><h3 id="进程调度">进程调度</h3><p>在<code>kernel_main</code>函数中，为三个任务分配时间片和优先级如下</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221206092451046.png" /></p><p>书中说是时钟中断每隔10ms发生一次，时钟中断处理程序如下</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221206111157768.png" /></p><p>进程调度函数<code>schedule</code></p><p>调度的逻辑就是：<strong>找到剩余时间片最多（也就是优先级最高）的那个进程</strong></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221206111347873.png" /></p><h2 id="实现过程">实现过程</h2><h3id="添加一个系统调用print_strchar-s">添加一个系统调用：print_str(char*s)</h3><p>实现完毕后出现bug：</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221201155257376.png" /></p><p>原因是：该系统调用需要传递参数，但是由于源代码中的<code>sys_call</code>不支持传递参数，所以报错</p><p>解决方法：修改<code>sys_call</code>的汇编代码，将<code>ebx</code>中内容压入栈中，然后再进行系统调用，这样只要将参数存放在<code>ebx</code>中即可。（后续如果需要更多参数，就对应压入更多的寄存器中的值）</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221201181325369.png" /></p><h3id="添加一个系统调用sleepint-milli_seconds">添加一个系统调用：sleep(intmilli_seconds)</h3><p>该系统调用实现的是在指定的<code>milli_seconds</code>中不被分配时间片。</p><p>实现方式，手册中给了提示</p><p>1、修改<code>PROCESS</code>结构体，增加一个<code>wake_tick</code>字段，指示该进程醒来的时间片。</p><p>2、修改<code>schedule</code>函数，在进程调度时需要增加对<code>wake_tick</code>的判断，可以参与进程调度的应该是<code>wake_tick&lt;=current_tick</code>的进程。</p><h3 id="模拟读者写者">模拟读者写者</h3><blockquote><p><strong>注意点</strong></p><p>一个读进程被选中开始读一个时间片之后，另一个读进程被调入开始读的这一个时间中，前一个读进程应该仍然保持读状态，直至读结束。</p></blockquote><blockquote><p>需要实现三种策略：读者优先、写者优先、读写公平（防止饿死）</p><p>允许同时读的进程数需要能够改变（<code>n=1,2,3</code>）</p><p>每个进程读写结束之后休息的时间片可以随意修改(<spanclass="math inline">\(t \ge 0\)</span>)</p><p>（具体的PV操作以及三种策略对应的读写函数见代码）</p></blockquote><p>1、<strong>三种策略</strong></p><p>使用表驱动的实现方式，建立函数数组，依据不同的策略去调用数组中对应的读写函数即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(* reader_func)</span><span class="params">()</span>; <span class="comment">// 读者函数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(* writer_func)</span><span class="params">()</span>; <span class="comment">// 写者函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRATEGY    3</span></span><br><span class="line"><span class="comment">// 读写策略</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READER_FIRST 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITER_FIRST 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RW_EQUALITY  2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// global.c</span></span><br><span class="line">PUBLIC reader_func readers[STRATEGY] = &#123;</span><br><span class="line">    reader_first_r,</span><br><span class="line">    writer_first_r,</span><br><span class="line">    rw_equality_r</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">PUBLIC writer_func writers[STRATEGY] = &#123;</span><br><span class="line">    reader_first_w,</span><br><span class="line">    writer_first_w,</span><br><span class="line">    rw_equality_w</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.c</span></span><br><span class="line">strategy = READER_FIRST;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ReadB</span><span class="params">()</span>&#123;</span><br><span class="line">readers[strategy]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WriteE</span><span class="params">()</span>&#123;</span><br><span class="line">writers[strategy]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、同时读的进程数</p><p>使用一个信号量控制读者进程数量<code>r_mutex</code>，其<code>value</code>初值为<code>READER_MAX</code></p><p>3、读写之后的休息时间</p><p>在<code>PROCESS</code>结构体中增加一个<code>sleep_time</code>字段，在完成读写后调用<code>sleep</code>函数即可</p><p>4、<code>PROCESS</code>结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_proc</span> &#123;</span></span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line"><span class="type">int</span> wake_tick;  <span class="comment">// 进程醒来的时间片</span></span><br><span class="line"><span class="type">int</span> state;<span class="comment">// 进程的状态</span></span><br><span class="line"><span class="type">int</span> type; <span class="comment">// 进程的类型</span></span><br><span class="line"><span class="type">int</span> run_after_sleep; <span class="comment">// 判断进程此时是否是醒来立刻运行的</span></span><br><span class="line"><span class="type">int</span> sleep_time; <span class="comment">// 进程休息的时间片数量</span></span><br><span class="line">&#125;PROCESS;</span><br></pre></td></tr></table></figure><p>5、<strong><code>schedule</code>函数</strong></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221217144338875.png" /></p><blockquote><p>注意：要调度<strong>所有的</strong>睡醒的进程、调度<strong>所有的</strong>结束进程释放资源、调度<strong>所有的</strong>waiting进程。因为逻辑上他们就是要同步进行的。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">PUBLIC <span class="type">void</span> <span class="title function_">schedule</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">PROCESS* p = proc_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isRunnable(p))&#123; <span class="comment">// 优先选择A</span></span><br><span class="line">p_proc_ready = p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 先去找刚睡醒的进程，尝试调度他们</span></span><br><span class="line"><span class="keyword">for</span> (PROCESS* i = proc_table + <span class="number">1</span>; i &lt; proc_table + NR_TASKS; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i-&gt;state == SLEEPING &amp;&amp; i-&gt;wake_tick &lt;= get_ticks())&#123;</span><br><span class="line">i-&gt;state = RUNNING;</span><br><span class="line">i-&gt;run_after_sleep = <span class="number">1</span>;</span><br><span class="line">p_proc_ready = i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再找到tick=0的进程 去释放资源</span></span><br><span class="line"><span class="keyword">for</span> (PROCESS* i = proc_table + <span class="number">1</span>; i &lt; proc_table + NR_TASKS; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i-&gt;ticks == <span class="number">0</span>)&#123;</span><br><span class="line">p_proc_ready = i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调度waiting的进程 不用等信号量的进程</span></span><br><span class="line"><span class="keyword">for</span> (PROCESS* i = proc_table + <span class="number">1</span>; i &lt; proc_table + NR_TASKS; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i-&gt;state == WAITING)&#123;</span><br><span class="line">i-&gt;state = RUNNING;</span><br><span class="line">p_proc_ready = i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 都不存在按之前的顺序继续调度</span></span><br><span class="line">p = prev_proc + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!isRunnable(p))&#123;</span><br><span class="line">p++;</span><br><span class="line"><span class="keyword">if</span>(p &gt;= proc_table + NR_TASKS)&#123;</span><br><span class="line">p = proc_table;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p_proc_ready = p;</span><br><span class="line">prev_proc = p;</span><br><span class="line">&#125;</span><br><span class="line">p_proc_ready-&gt;state = RUNNING;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：调度了刚睡醒的进程后，如果其可以成功执行，要在开始执行后停止再次执行调度函数，因为需要将结束的进程的资源返回，同时尝试开启其他进程。（<code>run_after_sleep</code>字段就是为了执行这个功能）</p></blockquote><p>6、一个问题<code>reader_max=2 &amp;&amp; sleep_time=2</code>会有一个问题：B进程结束开始睡觉，C进程睡醒，D进程在睡觉，此时<code>rw_mutex</code>被写者进程抢走。</p><p>解决：<u>先调度刚睡醒的进程，然后调度要结束的进程</u>，保证刚睡醒的进程可以和其他进程一样在结束的进程返回资源之后一起竞争。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221215210022614.png" /></p><h2 id="实验">实验</h2><h3 id="中断返回">中断返回</h3><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221208101839093.png" /></p><p>schedule调度策略采用顺序调度，如下结果可以发现，当再次调度到A的时候是先打印的是<code>a.</code>，可见再次调度之后确实是从中断处继续执行的。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221208101741056.png" /></p><h3 id="进程调度-1">进程调度</h3><p>同样的sleep函数，一个是普通函数实现，一个是系统调用实现，结果是只有系统调用才能正确实现进程调度。</p><p>因为系统调用返回后回到<code>p_proc_ready</code>所指的进程中执行，而普通函数返回后仍然在原来函数中执行，即使<code>p_proc_ready</code>已经改变。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221208113136173.png" /></p><p><strong>奇怪的问题：</strong></p><p>右侧只是做了一些输出，结果就和左边不一样！</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221216001730954.png" /></p><p><strong>原因：</strong>在进程中直接调用了<code>schedule</code>函数改变了<code>p_proc_ready</code>，但是由于<code>schedule</code>函数在用户态执行完毕后返回原进程，就没有起到预想中的调度的作用。但是增加了一些输出就做到了，是因为输出方法是系统调用，会进入内核态，然后从内核态返回之后，就进入了<code>p_proc_ready</code>所指定的进程中执行，起到了调度的作用！</p><p>在图中红框部分，<code>0</code>和<code>t</code>本应该是<code>schedule</code>函数中相邻的两次输出，但是中间却夹着一部分字符，这一部分字符就是从第一个打印系统调用中返回后进入新的<code>p_proc_ready</code>指定的进程中执行的输出，出现乱码也应该是因为之前不正当使用<code>schedule</code>函数引起的。</p><p><strong>解决：</strong>用一个系统调用封装<code>schedule</code>函数供进程调用，修改后发现程序行为正常且一致。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221216002321372.png" /></p><h3 id="sleep和milli_delay的对比">sleep和milli_delay的对比</h3><p>对A任务进程执行 <code>milli_delay(100)</code></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221206112309949.png" /></p><p>对A任务进程执行<code>sleep(100)</code></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221206112729973.png" /></p><p>两者的区别就在于：对A执行<code>sleep(100)</code>后就不参与进程调度了，所以只有B和C进程参与调度；但是对A执行<code>miili_delay(100)</code>，A只是在这<code>100ms</code>中不执行任何操作而已，仍然参与进程的调度。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理-Lab3</title>
      <link href="/2022/12/13/compilation-principle-lab3/"/>
      <url>/2022/12/13/compilation-principle-lab3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><ahref="http://47.122.3.40:8081/#/lab3-type-and-rename/lab3-type-and-rename">本次实验</a>主要分为两个部分：</p><p>1、对程序进行类型检查，找到所有的语义错误（11种）</p><p>2、若程序没有语义错误，则完成变量重命名后打印语法树</p></blockquote><h2 id="类型检查">类型检查</h2><h3 id="设计类型">设计类型</h3><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221217001208028.png" /></p><h3 id="设计符号表">设计符号表</h3><p>==Symbol类==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Symbol</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Type type;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Scope scope;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="type">int</span>[]&gt; usePos;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> isNeedReplace;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> row;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> col;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Symbol</span><span class="params">(...)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加一个该符号被使用的位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUsePos</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调试使用</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==Scope类==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Scope</span>&#123;</span><br><span class="line">    Scope enclosingScope;</span><br><span class="line">    Map&lt;String, Symbol&gt; symbols;</span><br><span class="line">    List&lt;Scope&gt; childScope;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Scope</span><span class="params">(...)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义一个符号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">define</span><span class="params">(Symbol symbol)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// (全局)解析一个符号</span></span><br><span class="line">    <span class="keyword">public</span> Symbol <span class="title function_">resolve</span><span class="params">(String name)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// (在当前作用域下)解析一个符号</span></span><br><span class="line">    <span class="keyword">public</span> Symbol <span class="title function_">resolveCurrentScope</span><span class="params">(String name)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加一个该作用域的子作用域</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addChildScope</span><span class="params">(Scope s)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后只需要在遍历语法树的过程中，在合适的位置创建作用域，并在合适的位置退出作用域，以及在函数定义、变量声明的对应处理函数中将变量包装成符号加入到作用域的符号列表中。</p><h3 id="处理语义错误">处理语义错误</h3><p>需要针对11种错误依次进行分析处理</p><table><colgroup><col style="width: 8%" /><col style="width: 30%" /><col style="width: 61%" /></colgroup><thead><tr class="header"><th>错误编号</th><th>错误说明</th><th>分析</th></tr></thead><tbody><tr class="odd"><td>1</td><td>变量未声明</td><td>在使用变量的位置，全局解析该符号，看是否定义该变量，可在<code>visitTerminal</code>函数中处理</td></tr><tr class="even"><td>2</td><td>函数未定义</td><td>在函数调用中处理，解析被调用的函数名，查看是否被定义</td></tr><tr class="odd"><td>3</td><td>变量重复声明</td><td>在声明变量的位置：函数形参，常量声明、变量声明三个地方，<u>注意解析时只要在当前作用域下解析</u>（和全局同名变量不冲突）</td></tr><tr class="even"><td>4</td><td>函数重复定义</td><td>在函数定义的位置，解析要定义的函数名，是否已经定义过</td></tr><tr class="odd"><td>5</td><td>赋值号两侧类型不匹配</td><td>出现在有赋值符号的位置：常量声明、变量声明并初始化、赋值语句，处理方式就是取得两边的类型，进行比较判断</td></tr><tr class="even"><td>6</td><td>运算符需求类型与提供类型不匹配</td><td>出现在有运算符的地方，<u>注意下标运算符<code>[]</code></u>，处理方式也是获取操作数的类型，检查是否匹配</td></tr><tr class="odd"><td>7</td><td>返回值类型不匹配</td><td>出现在返回语句中，由于函数类型只有<code>int</code>和<code>void</code>，如果没有返回值判断是否是<code>void</code>，如果有返回值就需要判断<code>return</code>后面的表达式返回的类型是否为<code>int</code></td></tr><tr class="even"><td>8</td><td>函数参数不适用</td><td>出现在函数调用中，可以先判断形参数量和实参数量，如果相同再进行一个一个的检查判断</td></tr><tr class="odd"><td>9</td><td>对非数组使用下标运算符</td><td>在出现下标运算符时检查变量是否是数组类型，<u>注意对数组类型变量使用超过其维数的下标运算符个数</u>（例如对一维数组使用两个下标运算符）</td></tr><tr class="even"><td>10</td><td>对变量使用函数调用</td><td>出现在函数调用中，判断变量类型是否是函数类型</td></tr><tr class="odd"><td>11</td><td>赋值号左侧非变量或数组元素</td><td>出现在左值表达式中，如果是赋值语句，判断左侧的符号类型是否为函数类型</td></tr></tbody></table><blockquote><p>这一部分最麻烦的是，一个错误会引起连锁错误，但是要求只打印"最本质错误"。</p><p>我在处理的过程中采用：一旦出现错误之后，返回的类型都是<code>null</code>，而上层的函数只有在下层函数不返回<code>null</code>是才会在这一层进行错误检查，否则直接返回。但是需要注意的是，不是每一个函数返回null都代表出现错误，还需要结合具体情况分析，不过大部分都适用。</p></blockquote><h2 id="重命名">重命名</h2><blockquote><p>为所有与选中变量<strong>生命周期一致</strong>的<strong>同名变量</strong>重命名</p></blockquote><p>思路：</p><p>在第一次遍历语法树的过程中，解析变量之后将该变量的位置加入到符号的<code>usePos</code>列表中，并且找到需要重命名的那个变量(<code>isNeedReplace</code>)。在第二次遍历过程中，将需要重命名的那个符号的<code>usePos</code>取出，遍历到对应位置后进行重命名即可。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221217105317387.png" /></p><h2 id="碰到的问题">碰到的问题</h2><p>感觉比较困难的地方主要还是在第一部分语义错误检查，因为出错了之后需要自己想用例去排查，而且“最本质错误”的要求导致bug比较难以找到。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理-Lab2</title>
      <link href="/2022/11/24/compilation-principle-lab2/"/>
      <url>/2022/11/24/compilation-principle-lab2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><ahref="http://47.122.3.40:8081/#/lab2-parser/lab2-parser">实验内容</a>：编写SysY语言的语法分析器，并实现高亮。</p></blockquote><h2 id="实验思路">实验思路</h2><p>首先需要根据<ahref="https://github.com/courses-at-nju-by-hfwei/compilers-lab-docs/raw/main/docs/docs/SysY%E8%AF%AD%E8%A8%80%E5%AE%9A%E4%B9%89.pdf">SysY语言定义</a>编写Parser，这部分基本上就是将手册上的语法规则改写成<code>Antrl</code>语句即可。</p><p>然后就可以到<code>Main</code>类中编写相应的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span>(args.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;input path is required&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// get input file and generate the Lexer</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">CharStream</span> <span class="variable">input</span> <span class="operator">=</span> CharStreams.fromFileName(source);</span><br><span class="line">        <span class="type">SysYLexer</span> <span class="variable">sysYLexer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysYLexer</span>(input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// generate the Parser</span></span><br><span class="line">        <span class="type">CommonTokenStream</span> <span class="variable">tokens</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonTokenStream</span>(sysYLexer);</span><br><span class="line">        <span class="type">SysYParser</span> <span class="variable">sysYParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysYParser</span>(tokens);</span><br><span class="line"></span><br><span class="line">        <span class="type">Visitor</span> <span class="variable">visitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Visitor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add error listener</span></span><br><span class="line">        sysYParser.removeErrorListeners();</span><br><span class="line">        <span class="type">MyParserErrorListener</span> <span class="variable">myParserErrorListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyParserErrorListener</span>(visitor);</span><br><span class="line">        sysYParser.addErrorListener(myParserErrorListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DFS the tree</span></span><br><span class="line">        <span class="type">ParseTree</span> <span class="variable">tree</span> <span class="operator">=</span> sysYParser.program();</span><br><span class="line">        visitor.visit(tree);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>类似于Lab1，需要实现一个自定义的<code>ErrorListener</code>，传递给<code>Parser</code>，使得在发现语法错误时执行报错输出。</p><blockquote><p>为什么要传递<code>Visitor</code>?</p><p>由于一旦出现语法错误，就不需要打印语法树了，所以需要在<code>ErrorListener</code>监听到语法错误时让<code>Visitor</code>不要做输出。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyParserErrorListener</span> <span class="keyword">extends</span> <span class="title class_">BaseErrorListener</span>&#123;</span><br><span class="line">    Visitor visitor;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyParserErrorListener</span><span class="params">(Visitor v)</span>&#123; <span class="built_in">this</span>.visitor = v; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syntaxError</span><span class="params">(Recognizer&lt;?, ?&gt; recognizer,</span></span><br><span class="line"><span class="params">                            Object offendingSymbol,</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> line,</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> charPositionInLine,</span></span><br><span class="line"><span class="params">                            String msg,</span></span><br><span class="line"><span class="params">                            RecognitionException e)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.visitor.hasError = <span class="literal">true</span>;</span><br><span class="line">        System.err.println(<span class="string">&quot;Error type B at Line &quot;</span> + line + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后也是最关键的，编写继承自<code>SysYParserBaseVisitor&lt;Void&gt;</code>的<code>Visitor</code>，实现打印语法树以及高亮的功能。</p><ol type="1"><li>如何打印节点信息：在<code>visitChildren</code>和<code>visitTerminal</code>两个函数中，调用参数<code>node</code>的相关方法就可以获得<code>type</code>、<code>text</code>等信息。</li><li>如何实现缩进：存在<code>depth</code>字段，调用<code>node.getRuleContext().depth()</code>获得；注意在<code>visitTerminal</code>函数中需要强转一下类型。</li><li>如何实现高亮：在<code>SysYParser</code>中找到对应的存放节点类型的数组，将数组中的值修改为对应的颜色值，每次根据<code>type</code>获取对应颜色。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Visitor</span> <span class="keyword">extends</span> <span class="title class_">SysYParserBaseVisitor</span>&lt;Void&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">hasError</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getColor</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type &lt; <span class="number">0</span> || type &gt;= _COLOR_NAMES.length) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> _COLOR_NAMES[type];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] _COLOR_NAMES = &#123;</span><br><span class="line">            <span class="literal">null</span>, <span class="string">&quot;[orange]&quot;</span>, <span class="string">&quot;[orange]&quot;</span>, <span class="string">&quot;[orange]&quot;</span>, <span class="string">&quot;[orange]&quot;</span>, <span class="string">&quot;[orange]&quot;</span>, <span class="string">&quot;[orange]&quot;</span>, <span class="string">&quot;[orange]&quot;</span>, <span class="string">&quot;[orange]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[orange]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;[blue]&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;[green]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[red]&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printIndents</span><span class="params">(<span class="type">int</span> depth)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; depth * <span class="number">2</span>; i++)&#123;</span><br><span class="line">            System.err.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Void <span class="title function_">visitChildren</span><span class="params">(RuleNode node)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ruleIdx</span> <span class="operator">=</span> node.getRuleContext().getRuleIndex();</span><br><span class="line">        <span class="type">String</span> <span class="variable">rule</span> <span class="operator">=</span> SysYParser.ruleNames[ruleIdx];</span><br><span class="line">        <span class="keyword">if</span> (!hasError)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> node.getRuleContext().depth();</span><br><span class="line">            printIndents(depth-<span class="number">1</span>); <span class="comment">// need -1: depth begin from 1</span></span><br><span class="line">            System.err.println(rule.toUpperCase().charAt(<span class="number">0</span>) + rule.substring(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitChildren(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Void <span class="title function_">visitTerminal</span><span class="params">(TerminalNode node)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> node.getSymbol().getType(); <span class="comment">// node type</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> getColor(type);</span><br><span class="line">        <span class="keyword">if</span> (!hasError &amp;&amp; !color.equals(<span class="string">&quot;&quot;</span>))&#123; <span class="comment">// &quot;&quot; means the terminal node we need, such as &#x27;&#123;&#x27; &#x27;&#125;&#x27;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">literal_name</span> <span class="operator">=</span> node.toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">symbol_name</span> <span class="operator">=</span> SysYParser.VOCABULARY.getSymbolicName(type);</span><br><span class="line">            <span class="comment">// deal with numbers</span></span><br><span class="line">            <span class="keyword">if</span> (type == SysYParser.INTEGR_CONST)&#123;</span><br><span class="line">                literal_name = convert_to_dec(literal_name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> ((RuleNode)node.getParent()).getRuleContext().depth(); <span class="comment">// the depth in parser tree</span></span><br><span class="line">            printIndents(depth);</span><br><span class="line">            System.err.println(literal_name + <span class="string">&quot; &quot;</span> + symbol_name + color);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">convert_to_dec</span><span class="params">(String number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number.equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">            number = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number.startsWith(<span class="string">&quot;0x&quot;</span>) || number.startsWith(<span class="string">&quot;0X&quot;</span>))&#123;</span><br><span class="line">            number = Integer.parseInt(number.substring(<span class="number">2</span>), <span class="number">16</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number.startsWith(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">            number = Integer.parseInt(number.substring(<span class="number">1</span>), <span class="number">8</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="碰到的问题">碰到的问题</h2><h3 id="缩进">缩进</h3><p>如何按层次缩进是做实验的时候碰到的最大的一个问题。一开始没想到会有<code>depth</code>字段，一直在想如何通过一个变量来标记层次，结果一直没有成功，因为两个<code>visit</code>函数都是进入节点之前调用，而没有对应的离开后调用的函数，所以不能通过在两个函数内的增减变化实现层次的变化（也许<code>Listener</code>应该是可以的）</p><h3 id="拼写">拼写</h3><p><code>INTEGR_CONST</code>。测试的时候看它输出在文件里报拼写错误，还以为是自己写错了，全部改成<code>INTEGER_CONST</code>，结果<code>OJ</code>过不了，后来发现在<code>Lab1</code>的<code>Lexer</code>中写的就是<code>INTEGR_CONST</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-Lab3</title>
      <link href="/2022/11/21/OS-Lab3/"/>
      <url>/2022/11/21/OS-Lab3/</url>
      
        <content type="html"><![CDATA[<h2 id="准备">准备</h2><p>实验以《orange's：一个操作系统的实现》的<ahref="https://github.com/wlmnzf/oranges/tree/master/chapter7/o">代码</a>为基础</p><h3 id="运行">运行</h3><h4 id="问题1">问题1</h4><p>make image失败</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221108200704537.png" /></p><p>解决方法</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221108200905099.png" /></p><p>结果</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221108201025947.png" /></p><h4 id="问题2">问题2</h4><p><code>make image</code>结束之后，执行下面的命令失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bochs -f bochsrc</span><br></pre></td></tr></table></figure><p>报错信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlopen failed for module &#x27;x&#x27;: file not found</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bochs-x</span><br></pre></td></tr></table></figure><p>结果显示</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221108201337846.png" /></p><h3 id="已实现和待实现">已实现和待实现</h3><h4 id="已实现">已实现</h4><ol type="1"><li>从屏幕左上角开始，以白色显示键盘输入的字符，可以输入并显示a-z,A-Z和0-9字符。</li><li>支持大小写切换包括 Shift 组合键以及大写锁定两种方式，大写锁定后再用Shift 组合键将会输入小写字母</li><li>支持回车键换行</li><li>支持用退格键删除输入内容</li><li>支持空格键</li><li>有光标显示</li><li>输入字符无上限</li></ol><h4 id="待实现">待实现</h4><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />make run直接运行</li><li><input type="checkbox" disabled="" checked="" />支持Tab键</li><li><input type="checkbox" disabled=""checked="" />清空屏幕以及每隔20秒清空屏幕</li><li><input type="checkbox" disabled=""checked="" />退格换行和TAB需要一次完成</li><li><input type="checkbox" disabled="" checked="" />查找功能</li><li><input type="checkbox" disabled="" checked="" />control + z组合键撤回</li></ul><h2 id="理解代码">理解代码</h2><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112082935878.png" /></p><p>首先，需要理解代码，可以照着《orange's：一个操作系统的实现》第七章的讲解一起看。</p><p>输出一个字符的函数调用逻辑</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221110203047699.png" /></p><p>当初始化结束后，就会进入到<code>task_tty()</code>函数中，进行不断的循环。</p><h3id="探究console结构体中四个变量的含义">探究CONSOLE结构体中四个变量的含义</h3><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111162034665.png" /></p><p><strong>分析过程</strong></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111090406115.png" /></p><p><u>屏幕一行80个字符，屏幕总共25行。</u></p><p>在敲字符过程中，<u><code>cursor</code>在不断加1</u>，<u><code>original_addr</code>始终为<code>0x0</code></u>，<code>current_start_addr</code>是<u>当前屏幕可见范围的开始位置</u>距离<u>最开始显示位置</u>的偏移。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111091301955.png" /></p><p>按到最后</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111162617930.png" /></p><p>可以发现<code>cursor</code>的值最大只能到<code>0x1554</code>，因为被<code>v_mem_limit</code>所限制。</p><p>经过分析就可以基本确定CONSOLE结构体四个变量的含义，用一张图来表示一下</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111164821213.png" /></p><h2 id="实现功能">实现功能</h2><h3 id="tab">TAB</h3><p>在<code>keyboard.h</code>中可以发现TAB是一个不可显示的字符，所以在<code>tty.c</code>的<code>in_process</code>中要增加对于<code>TAB</code>的识别，将其放进缓冲区内。然后在<code>console.c</code>的<code>out_char</code>函数中增加对<code>\t</code>的输出处理。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112160733005.png" /></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112160949600.png" /></p><h3 id="清屏">清屏</h3><p>清屏的功能实现在逻辑上比较简单，只要不断地调用<code>out_char()</code>函数，传入<code>\b</code>，直到<code>cursor</code>回到<code>original_addr</code>位置。</p><p>但是如何在实现每20秒清屏一次呢？要理解<code>kernel_main()</code>函数中的任务，可以新增一个任务，<code>task_clear_screen</code>，然后在其中执行清屏任务，并且每次执行完毕后延迟20s。</p><p>1、将<code>task_clear_screen</code>声明成一个任务，不断执行</p><p>在<code>global.c</code>中做相应修改，并修改对应的宏</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112161118740.png" /></p><p>2、在<code>task_clear_screen</code>任务中完成清屏逻辑，并且延迟20s</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111215247007.png" /></p><blockquote><p>每个任务中while循环不能break，否则执行会报错。</p></blockquote><h3 id="退格一次完成">退格一次完成</h3><p>源代码的删除功能只实现了一个一个删除，即使是对于<code>\n</code>和<code>\t</code>也是如此，不符合实际情况，需要做修改，实现一次删除<code>\t</code>和<code>\n</code>。</p><p><strong>思路</strong></p><p>要想实现一次退格，就需要知道前一个字符是什么，如果是普通字符那么让光标位置减一即可，如果是特殊的<code>\n</code>和<code>\t</code>就需要特殊处理，使光标回到按下<code>\n</code>和<code>\t</code>前的位置。</p><p>对于<code>\t</code>还好说，只要把光标减4即可；但是对于<code>\n</code>来说，就有点麻烦了。</p><p>一开始，想让光标一直往回移动直到遇到不是空格的字符。但是如果在输入<code>\n</code>之前刚输入了空格呢？这样显然就不对，而且实现起来还很复杂。</p><p>所以需要借助新的数据结构来存储已经显示的字符，并且对显示的字符做一个包装，做成一个结构体。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111192544494.png" /></p><p>再构建一个存储当前屏幕中所有显示的字符的结构体</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111192521635.png" /></p><p>然后需要在适当的地方将这个数据结构插入</p><p><strong>过程</strong></p><p>1、初始化C_BUF结构体</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111193022381.png" /></p><p>2、在将字符放入TTY中的同时，也将封装起来的字符放进C_BUF中</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111193053341.png" /></p><p>3、<strong>在<code>out_char</code>函数中实现对应逻辑</strong></p><p>在其他输出字符的位置需要加上对CHAR结构体中before_cursor和after_cursor的赋值，例如：</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111193614434.png" /></p><p>然后在处理退格键时就可以用如下一段代码解决</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111193431518.png" /></p><p>4、显示字符结束后，需要修改C_BUF中的<code>buf_cur_idx</code></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221111193124708.png" /></p><p><strong>这么设计就可以把所有的字符统一起来处理，在退格时只要回到按下该键前的光标位置即可。</strong></p><blockquote><p>注意需要把p_cbuf作为全局变量声明，这样可以在所有文件中使用，而不用作为函数参数传来传去。</p><p><u>在global.c和global.h中做声明即可</u></p></blockquote><h3 id="查找功能">查找功能</h3><p><strong>思路</strong></p><p>明确几个状态(代码也是依据状态编写的)</p><p>1、正常状态。以黑底白字显示字符，一切正常</p><p>2、搜索状态。在正常状态按下esc后，<u>以黑底红字显示字符</u>，并<u>记录这段时间敲下的字符</u>。</p><p>3、匹配状态。搜索状态按下enter后，进行match，思路是<u>从头遍历C_BUF结构体数组，找到匹配的字符串后把相应的字符颜色改成黑底红字，再从头显示</u>。</p><p>4、从匹配态退出。<u>删去搜索字符串</u>，<u>把黑底红字的改成黑底白字</u>，<u>重新显示</u>。</p><p><strong>过程</strong></p><p>1、定义一些全局变量和常量，对CHAR结构体进行调整(增加color字段)</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112145803256.png" /></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112144313280.png" /></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112144339441.png" /></p><p>状态的变化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INIT(按ESC) -&gt; SEARCH(按Enter) -&gt; MATCH(按ESC) -&gt; INIT</span><br></pre></td></tr></table></figure><p>2、在每个状态编写相应逻辑</p><p><strong>INIT</strong></p><p>在<code>in_process</code>函数中增加对ESC的识别</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112144935869.png" /></p><p>这个初始化要小心，每次进入搜索状态都要进行初始化</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112145609113.png" /></p><p><strong>SEARCH</strong></p><p>改变in_process中对Enter键的处理</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112145035952.png" /></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112145542894.png" /></p><p><strong>MATCH</strong></p><p>在in_process函数开头加上判断，只接收ESC</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112145201780.png" /></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112145515851.png" /></p><p>在out_char函数中也要做相应处理</p><p>1、MATCH状态下是不需要向C_BUF数组中增添CHAR的，只做输出。</p><p>2、SEARCH状态下要记录搜索字符串，并且注意SEARCH状态下是黑底红色。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112145247460.png" /></p><blockquote><p>注意：在退格搜索字符串时(<code>SEARCH</code>状态)，不能将原来的字符串删除。</p></blockquote><h3 id="controlz撤销">control+z撤销</h3><p>这个也很简单，首先要判断出是否是按下<code>ctrl+z</code>组合键，然后执行退格操作即可。</p><p>似乎没有那么简单，因为既要撤销显示出来的字符，还要撤销删除，以及需要能够一直撤销直到初始状态。</p><p>想法1：再建立一个ACTION的列表，记录所有的操作。但是实现起来可能比较复杂，因为需要同步好几个数据结构数组之间的关系。</p><p>想法2：改造C_BUF数据结构。其实撤销的主要难点在于撤销退格，所以在C_BUF中使用两个指针。也不行，可操作性不高，指针移动比较复杂。</p><p>最终采用想法1，需要理清ACTION数组在什么位置更新！</p><p>1、创建数据结构</p><p>其中<code>MAX_ACTION</code>为1000，即支持大约1000次撤销。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112155756326.png" /></p><p>2、初始化ACTION列表</p><p>在task_tty函数中调用初始化函数即可</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112155904351.png" /></p><p>3、向列表中增加ACTION</p><p>经过思考，选在tty_do_write函数的out_char后面</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112160009078.png" /></p><p>4、撤销操作</p><p>在in_process函数中增加以下逻辑，就是在判断出是<code>Ctrl+z</code>组合键后，回退ACTION数组，做逆操作。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221112160101647.png" /></p><blockquote><p>注意虚拟机中的热键 VirtualBox默认是 Right Ctrl</p><p>导致Right Ctrl按不出来</p></blockquote><h3 id="总结">总结</h3><p>由于上面的描述是写完一个功能后立刻写下的，所以导致代码前后会出现不一致。</p><p>感觉十分重要的调整是 【将字符加进C_BUF结构体中buf 】的位置 和 【更新C_BUF结构体中 buf_cur_idx】 的位置，最后是都放在了out_char函数中。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记11--面试必知必会</title>
      <link href="/2022/11/19/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B011%EF%BC%88%E9%9D%A2%E8%AF%95%EF%BC%89/"/>
      <url>/2022/11/19/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B011%EF%BC%88%E9%9D%A2%E8%AF%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="nsum问题">1 nSum问题</h2><blockquote><p>nSum问题就是给定一个整数数组 <code>nums</code> 和一个<code>target</code>，要求找到 <code>n</code>个<code>nums</code>中的元素，使得这<code>n</code>个元素的和等于<code>target</code>，要求返回所有可能的不重复的情况。</p></blockquote><p>【2Sum】问题是这类的基本情况，将数组排序后使用双指针即可解决问题。对于<spanclass="math inline">\(n &gt;2\)</span>的情况，尤其是<code>n</code>比较大时，直接解决是比较困难的，可以采用==递归==解决。下面给出解决【nSum】问题的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">nums: sorted之后的数组</span></span><br><span class="line"><span class="comment">start: 开始寻找的位置</span></span><br><span class="line"><span class="comment">k: 需要寻找多少个元素之和</span></span><br><span class="line"><span class="comment">target: 目标值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">nSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, <span class="type">int</span> k, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">2</span>)&#123; <span class="comment">// base case k ==</span></span><br><span class="line">        <span class="type">int</span> i = start; <span class="type">int</span> j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="type">int</span> left = nums[i]; <span class="type">int</span> right = nums[j];</span><br><span class="line">            <span class="type">int</span> sum = left + right;</span><br><span class="line">            <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                res.<span class="built_in">push</span>(&#123;left, right&#125;);</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] == left) i++;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] == right) j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target)&#123;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] == right) j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] == left) i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// other case k &gt; 2</span></span><br><span class="line">        <span class="type">int</span> i = start;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">            <span class="type">int</span> val = nums[i];</span><br><span class="line">            <span class="type">int</span> sub_target = target - val;</span><br><span class="line">            vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; sub_res = <span class="built_in">nSum</span>(nums, i+<span class="number">1</span>, k<span class="number">-1</span>, sub_target);</span><br><span class="line">            <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt; sub_res_i : sub_res)&#123;</span><br><span class="line">                sub_res_i.<span class="built_in">push_back</span>(val);</span><br><span class="line">                res.<span class="built_in">push_back</span>(sub_res_i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; nums[i] == val) i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间问题">2 区间问题</h2><blockquote><p>区间问题就是给定一些区间，然后需要求解这些区间的交集、或者合并区间等问题</p></blockquote><p>解决这类问题最核心的思想就是==排序==+==讨论==。</p><p>针对不同的问题，需要进行不同的排序，可能是对起点排序，也可能是对终点排序，有可能是升序，也有可能是降序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] != b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对nums进行排序，左端点升序排列，左端点相同右端点降序排列</span></span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), cmp);</span><br></pre></td></tr></table></figure><blockquote><p>题目列表：</p><p><ahref="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">452.用最少数量的箭引爆气球</a></p><p><ahref="https://leetcode.cn/problems/non-overlapping-intervals/">435.无重叠区间</a></p><p><ahref="https://leetcode.cn/problems/remove-covered-intervals/">1288.删除被覆盖区间</a></p><p><a href="https://leetcode.cn/problems/merge-intervals/">56.合并区间</a></p><p><ahref="https://leetcode.cn/problems/interval-list-intersections/">986.区间列表的交集</a></p></blockquote><blockquote><p><a href="https://leetcode.cn/problems/video-stitching/">1024.视频拼接</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20230105224256015.png" /></p></blockquote><p>一道别致的区间问题！这道题在对区间进行排序之后的操作更为复杂一些</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">videoStitching</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; clips, <span class="type">int</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(clips.<span class="built_in">begin</span>(), clips.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 由于是需要找出最少，所以就需要挑选出最合适的片段</span></span><br><span class="line">    <span class="type">int</span> n = clips.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">        <span class="type">int</span> max = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 在后面有重叠的区间中找到终点最大的那个区间</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; n &amp;&amp; clips[i][<span class="number">0</span>] &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clips[i][<span class="number">1</span>] &gt; max) max = clips[i][<span class="number">1</span>];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 中间有断开或者片段用完了但是没到time</span></span><br><span class="line">        end = max;</span><br><span class="line">        cnt ++;</span><br><span class="line">        <span class="keyword">if</span> (end &gt;= time) <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速选择算法">3 快速选择算法</h2><blockquote><p><ahref="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215.数组中的第K个最大元素</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221127115141557.png" /></p></blockquote><h3 id="快速排序算法">3.1 快速排序算法</h3><p>快排（quick-sort）是一种经典的排序算法，和归并排序（merge-sort）一样都是divide-and-conquer 类型的算法，平均时间复杂度为 <spanclass="math inline">\(O(NlogN)\)</span></p><p>【思路】</p><p>快排的思路是，要对<code>nums[lo...hi]</code>排序，先找到一个分界点<code>pivot</code>，然后使得<code>nums[lo...pivot-1]</code>都小于<code>nums[pivot]</code>，<code>nums[pivot+1...hi]</code>都大于<code>nums[pivot]</code>，然后递归地在<code>nums[lo...pivot-1]</code>和<code>nums[pivot+1...hi]</code>上执行相同的操作。</p><p>【实现过程】</p><p>首先可以轻易写出下面两个函数，最主要的难点是实现<code>partition</code>函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="built_in">quick_sort_helper</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort_helper</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= j) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> pivot = <span class="built_in">partition</span>(nums, i, j);</span><br><span class="line">    <span class="built_in">quick_sort_helper</span>(nums, i, pivot<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">quick_sort_helper</span>(nums, pivot+<span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>partition</code>函数所做的工作就是，对一个数组<code>nums[lo...hi]</code>，返回一个下标<code>pivot</code>，使得数组<code>nums[lo...pivot-1]</code>部分的元素全部都小于<code>nums[pivot]</code>，数组<code>nums[pivot+1...hi]</code>部分的元素全部都大于<code>nums[pivot]</code>。</p><blockquote><ol type="1"><li>首先任意选取一个值作为pivot，比如选择最后一个元素`</li><li><code>smaller_idx</code>变量是用来记录所有<code>&lt;=nums[pivot]</code>的元素的下标</li><li>遍历数组，当遇到<code>&lt;=nums[pivot]</code>的元素时，就要把它放在<code>smaller_idx</code>指定的位置上（for循环中if块中的内容）</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> lo, <span class="type">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = nums[hi];</span><br><span class="line">    <span class="type">int</span> smaller_idx = lo<span class="number">-1</span>; <span class="comment">// 标记&lt;=nums[pivot]元素的下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = lo; i &lt;= hi; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &lt;= pivot)&#123;</span><br><span class="line">            smaller_idx ++;</span><br><span class="line">            <span class="built_in">swap</span>(nums, smaller_idx, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> smaller_idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><ahref="https://www.geeksforgeeks.org/quick-sort/">quick-sort</a></p></blockquote><p>上面的<code>partition</code>函数返回的<code>pivot</code>其实就是数组的第<code>pivot</code>大元素，而问题需要的是第<code>k</code>大元素，所以可以借用【二分搜索】思想进行求解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> lo = <span class="number">0</span>; <span class="type">int</span> hi = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> idx = nums.<span class="built_in">size</span>() - k;</span><br><span class="line">    <span class="keyword">while</span>(lo &lt;= hi)&#123;</span><br><span class="line">        <span class="type">int</span> pi = <span class="built_in">partition</span>(nums, lo, hi);</span><br><span class="line">        <span class="keyword">if</span>(idx &gt; pi)&#123;</span><br><span class="line">            lo = pi+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idx &lt; pi)&#123;</span><br><span class="line">            hi = pi<span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[pi];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉堆">3.2 二叉堆</h3><p>这道题最简单的还是采用二叉堆（优先队列）的解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, std::greater&lt;<span class="type">int</span>&gt;&gt; pq; <span class="comment">// 采用小顶堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i : nums)&#123;</span><br><span class="line">        pq.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &gt; k)&#123;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><font color='red'><code>priority_queue</code>数据结构自定义比较如何书写？</font></p><p>1、首先优先队列默认情况下是使用less比较，即大顶堆（最大元素作为堆顶出现）。如果想要改成小顶堆，需要使用greater比较。</p><p>2、如果要自定义优先队列的比较，可以在一个<strong>结构体</strong>里==重载()运算符==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span>&#123;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)</span></span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、或者可以重载复合数据类型的比较运算符（改变原本less和greater中比较运算符的含义）</p><p><font color='red'>sort函数中的自定义比较应该如何书写？</font></p><p>1、默认情况下按照升序对容器内元素进行排序。</p><p>2、一般情况下只要重写一个比较函数传入sort函数即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(container.<span class="built_in">begin</span>(), container.<span class="built_in">end</span>(), cmp); <span class="comment">// container 是 vector&lt;vector&lt;int&gt;&gt;</span></span><br></pre></td></tr></table></figure><p><strong>但是如果要在类中使用，自定义的比较函数一定得是静态成员函数或者全局函数</strong></p><p>因为<code>std::sort</code>函数是全局的，不能依赖于只有创建实例后才能使用的普通成员函数</p></blockquote><h2 id="运算优先级分治算法">4 运算优先级：分治算法</h2><blockquote><p><ahref="https://leetcode.cn/problems/different-ways-to-add-parentheses/">241.为运算表达式设计优先级</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20230104002637818.png" /></p></blockquote><p>使用递归思想解决问题，一定要从整体出发考虑问题的结构，而不能局限于某个细节。将大问题不断分解成规模更小的子问题，当规模小到一定程度时就可以轻易求解，然后再将小规模问题的答案合并，得到最终问题的结果，这就是分治的思想。</p><p>这道题也是一样，给定一个表达式字符串，要求出该表达式所有可能的结果。无论如何改变运算符优先级，或者说增加括号，本质上表达式的计算都可以回到【操作数1操作符操作数2】这种形式上，只是这个操作数可以又是一个表达式，以此来增加复杂度。</p><p>如何分解复杂度呢？可以选定一个操作符，然后递归处理两边的表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diffWaysToCompute</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="type">int</span> n = expression.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">char</span> c = expression[i];</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; left = <span class="built_in">diffWaysToCompute</span>(expression.<span class="built_in">substr</span>(<span class="number">0</span>, i));</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; right = <span class="built_in">diffWaysToCompute</span>(expression.<span class="built_in">substr</span>(i+<span class="number">1</span>, n - i));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> op1 : left)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> op2 : right)&#123;</span><br><span class="line">                    <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: res.<span class="built_in">push_back</span>(op1+op2); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: res.<span class="built_in">push_back</span>(op1-op2); <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: res.<span class="built_in">push_back</span>(op1*op2); <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">            val = <span class="number">10</span> * val + expression[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心算法">5 贪心算法</h2><blockquote><p><a href="https://leetcode.cn/problems/gas-station/">134.加油站</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20230105224152317.png" /></p></blockquote><p>看到问题的一个反应就是把两个数组变成一个数组<code>diff</code>，<code>diff[i]</code>表示在<code>i</code>加油站加完油开到<code>i+1</code>加油站的油量变化。那么要找到那个点，应该尽可能的让车在刚开始一段时间油量尽可能多，这样才能保证最后可以走完一圈。可以将<code>diff</code>的值标在图上，连起来之后最低点的下一个点就应该是出发的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = gas.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; diff; <span class="comment">// 从i加完油开到i+1剩下的油量</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> onediff = gas[i] - cost[i];</span><br><span class="line">        diff.<span class="built_in">push_back</span>(onediff);</span><br><span class="line">        sum += onediff;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>; <span class="type">int</span> min = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        total += diff[i];</span><br><span class="line">        <span class="keyword">if</span> (total &lt; min)&#123;</span><br><span class="line">            min = total;</span><br><span class="line">            res = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (res+<span class="number">1</span>)%n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换一个思路，这道题更为普遍的想法应该是用一个双重循环去枚举所有的情况。可以增加一个<code>trick</code>：<strong>当发现从<code>i</code>开到<code>j</code>不能到达时，那么<code>i</code>到<code>j</code>中间的任何一个点出发都行不通</strong>。这样就避免了很多重复的情况，复杂度可以达到线性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = gas.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; diff; <span class="comment">// 从i加完油开到i+1剩下的油量</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> onediff = gas[i] - cost[i];</span><br><span class="line">        diff.<span class="built_in">push_back</span>(onediff);</span><br><span class="line">        sum += onediff;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (diff[i] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> j = (i+<span class="number">1</span>)%n;</span><br><span class="line">        <span class="type">int</span> total = diff[i];</span><br><span class="line">        <span class="keyword">for</span> (; j != i; j = (j+<span class="number">1</span>)%n)&#123;</span><br><span class="line">            total += diff[j];</span><br><span class="line">            <span class="keyword">if</span>(total &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == i) <span class="keyword">return</span> i;</span><br><span class="line">        i = (j + n - <span class="number">1</span>) % n; <span class="comment">// trick</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算器">6 计算器</h2><blockquote><p><a href="https://leetcode.cn/problems/basic-calculator/">224.基本计算器</a></p><p><a href="https://leetcode.cn/problems/basic-calculator-ii/">227.基本计算器 II</a></p></blockquote><p>给定一个字符串，包含数字、四则运算符、括号以及空格，要求计算该表达式的值</p><p>可以将这个问题进行分解，比如：如何将字符串中的数提取出来、如何处理四则运算以及如何处理括号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> sign = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">        <span class="comment">// 处理字符串中的数字</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            val = <span class="number">10</span> * val + (s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理四则运算</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;+&#x27;</span> || s[i] == <span class="string">&#x27;-&#x27;</span> || s[i] == <span class="string">&#x27;*&#x27;</span> || s[i] == <span class="string">&#x27;/&#x27;</span> || i == n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">switch</span>(s[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: stk.<span class="built_in">push</span>(val); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: stk.<span class="built_in">push</span>(<span class="number">-1</span> * val); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: val = stk.<span class="built_in">top</span>() * val; stk.<span class="built_in">pop</span>(); stk.<span class="built_in">push</span>(val); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: val = stk.<span class="built_in">top</span>() / val; stk.<span class="built_in">pop</span>(); stk.<span class="built_in">push</span>(val); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            val = <span class="number">0</span>;</span><br><span class="line">            sign = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理括号</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            <span class="type">int</span> start = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(cnt != <span class="number">0</span>)&#123;</span><br><span class="line">                i ++;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) cnt ++;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) cnt --;</span><br><span class="line">            &#125;</span><br><span class="line">            val = <span class="built_in">calculate</span>(s.<span class="built_in">substr</span>(start, i - start)); <span class="comment">// 递归</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        i ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        res += stk.<span class="built_in">top</span>();</span><br><span class="line">        stk.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记7-暴力搜索</title>
      <link href="/2022/11/18/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B07%EF%BC%88%E6%9A%B4%E5%8A%9B%E6%90%9C%E7%B4%A2%EF%BC%89/"/>
      <url>/2022/11/18/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B07%EF%BC%88%E6%9A%B4%E5%8A%9B%E6%90%9C%E7%B4%A2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="dfs回溯算法">DFS/回溯算法</h2><p>回溯的核心思想在于：</p><ul><li>做出选择</li><li>（DFS递归）</li><li>撤销选择</li></ul><p>但是面对不同的题目：做什么选择，在哪做选择都是需要考虑的问题。</p><p>大致的框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">结果集 = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">路径, 选择列表</span>):</span><br><span class="line">    <span class="keyword">if</span> 满足结束的条件:</span><br><span class="line">        结果集.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        做出选择</span><br><span class="line">        backtrace(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure><h3 id="例子">例子</h3><h4 id="全排列">【全排列】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtrace(nums, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, List&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">    <span class="comment">// 结束条件</span></span><br><span class="line">    <span class="keyword">if</span>(path.size() == nums.length)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.contains(nums[i])) <span class="keyword">continue</span>; <span class="comment">// 筛除不在选择列表中的元素</span></span><br><span class="line">        path.add(nums[i]); <span class="comment">// 做出选择</span></span><br><span class="line">        backtrace(nums, path);</span><br><span class="line">        path.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(nums[i])); <span class="comment">// 撤销x</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="n皇后">【N皇后】</h4><p>在 n<span class="math inline">\(\times\)</span>n 的棋盘上放置 n个皇后，使得 n 个皇后不能相互攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    List&lt;Integer&gt; board = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子集划分">子集划分</h3><p>给定一个数组<code>nums</code>和一个正整数<code>k</code>，返回其是否能被分成<code>k</code>个子集，且每个子集的元素和相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 以数字的视角：每一个数都是去k个桶中的一个桶</span></span><br><span class="line">    <span class="comment">// O(k^n)</span></span><br><span class="line">    <span class="comment">// 会超时!</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartitionKSubsets2</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// 去掉一些特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(k &gt; nums.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums) sum += i;</span><br><span class="line">        <span class="keyword">if</span>(sum % k != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sub_sum</span> <span class="operator">=</span> sum / k;</span><br><span class="line">        <span class="type">int</span>[] buckets = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 给数组按降序排列，使得回溯的剪枝尽早发生</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; j; i++, j--)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backtrace(nums, <span class="number">0</span>, sub_sum, buckets);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> index, <span class="type">int</span> target, <span class="type">int</span>[] buckets)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == nums.length)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buckets.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(buckets[i] != target) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buckets.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buckets[i] + nums[index] &gt; target) <span class="keyword">continue</span>;</span><br><span class="line">            buckets[i] += nums[index];</span><br><span class="line">            <span class="comment">// 向后继续走</span></span><br><span class="line">            <span class="keyword">if</span>( backtrace(nums, index + <span class="number">1</span>, target, buckets) )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 后面的某个情况不满足条件，需要回溯</span></span><br><span class="line">            buckets[i] -= nums[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    回溯：不能没有尝试完就做决定，没做一次决定都要向后继续走，只有最后能走通，才算是正确的选择</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.以桶的视角：每个桶都要遍历所有元素</span></span><br><span class="line">    <span class="comment">// O(k*2^n)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartitionKSubsets1</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// 去掉一些特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(k &gt; nums.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums) sum += i;</span><br><span class="line">        <span class="keyword">if</span>(sum % k != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sub_sum</span> <span class="operator">=</span> sum / k;</span><br><span class="line">        <span class="type">int</span>[] buckets = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line"></span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backtrace(nums, <span class="number">0</span>, <span class="number">0</span>, buckets, sub_sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span>[] visited;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> index, <span class="type">int</span>[] buckets, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == buckets.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(buckets[index] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> backtrace(nums, <span class="number">0</span>, index + <span class="number">1</span>, buckets, target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i] || buckets[index] + nums[i] &gt; target) <span class="keyword">continue</span>;</span><br><span class="line">            buckets[index] += nums[i];</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 向后继续走</span></span><br><span class="line">            <span class="keyword">if</span>( backtrace(nums, i + <span class="number">1</span>, index, buckets, target) )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">            buckets[index] -= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.状态数组+递归</span></span><br><span class="line">    <span class="comment">// 重点理解三个点:</span></span><br><span class="line">    <span class="comment">// 1. 为什么在刚进入dfs时就把 dp[s]设为false !!!</span></span><br><span class="line">    <span class="comment">// 2. 为什么 nums[i] + p &gt; per 后就 break 返回 fasle</span></span><br><span class="line">    <span class="comment">// 3. 为什么 递归的dfs p = (nums[i] + p) % per</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> per, n;</span><br><span class="line">    <span class="type">boolean</span>[] dp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartitionKSubsets</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        <span class="type">int</span> <span class="variable">all</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="keyword">if</span> (all % k != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        per = all / k;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        n = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums[n - <span class="number">1</span>] &gt; per) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">1</span> &lt;&lt; n];</span><br><span class="line">        Arrays.fill(dp, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> dfs((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dp[s]) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[s];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 避免重复执行相同情况</span></span><br><span class="line">        dp[s] = <span class="literal">false</span>; <span class="comment">// dp[s] 到底代表了什么?</span></span><br><span class="line">                       <span class="comment">// s代表的是还有哪些位置的元素是可用的,dp[s]是代表在这种情况下的可行性? 为什么在一开始就把这种情况作为不可行.</span></span><br><span class="line">                       <span class="comment">// 如果这种某种情况可行的话,那么是不会再次被碰到的,会直接返回到主函数中</span></span><br><span class="line">                       <span class="comment">// 相反如果这种情况被再次碰到,那么上一次碰到这种情况的时候肯定是不可行,即false</span></span><br><span class="line">                       <span class="comment">// 下一次碰到的时候,尽管s是相同,p也相同吗? 是的</span></span><br><span class="line">                       <span class="comment">// 从p是如何迭代的可以看出,由于s是相同的,所以用掉的nums[i]是一样的,而p是用掉的nums[i]相加后模per得到的,所以当s是相同的时候,p也是相同的.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 因为nums是被排序过的，所有前面的要是加起来 &gt; per 后面肯定也会 提前剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] + p &gt; per) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (((s &gt;&gt; i) &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// (p + nums[i]) % per 是为了重置当前的子集的值</span></span><br><span class="line">                <span class="comment">// 即当 p + nums[i] == per 后，重置为0</span></span><br><span class="line">                <span class="keyword">if</span> (dfs(s ^ (<span class="number">1</span> &lt;&lt; i), (p + nums[i]) % per)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回溯很重要的一个点：不能没有考虑后面情况就定死了前面的选择。回溯的本质在于先不断地做决定，如果成功那么之前的选择就是正确的并返回，如果出错了，在不断地撤回决定并且重新做决定</strong></p><h3 id="总结">总结</h3><blockquote><p>总结回溯算法在子集、组合和排列三类问题上的处理</p></blockquote><p>对于子集、组合和排列这三类问题，可以按照元素是是否可重、是否可复选两方面来划分。</p><blockquote><p>子集问题和排列问题本质其实是同属一类问题，都是对顺序没有要求的选取部分序列...所以就将他们归类为一种问题</p></blockquote><h4 id="集合组合问题">1、集合/组合问题</h4><ol type="1"><li>集合/组合问题是不存在顺序的，所以每次<code>backtrace</code>的过程中，不能都从下标0开始选择元素，所以每次进入<code>backtrace</code>时都应该指明下次从哪开始选。</li><li>集合/组合问题的要求主要有两种：1、选出指定元素个数的组合（即包含指定数量元素的子集）2、选出元素和等于指定值的组合</li></ol><h5 id="元素无重不可复选">1.1、元素无重+不可复选</h5><blockquote><p>子集问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; ans;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; node = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtrace(nums, <span class="number">0</span>, node);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, List&lt;Integer&gt; node)</span>&#123;</span><br><span class="line"><span class="comment">// 如果要返回指定数量元素的子集，在这里微调即可</span></span><br><span class="line">    ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++)&#123;</span><br><span class="line">        node.add(nums[i]);</span><br><span class="line">        backtrace(nums, i + <span class="number">1</span>, node);</span><br><span class="line">        node.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(nums[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="元素可重不可复选">1.2、元素可重+不可复选</h5><blockquote><p>包含重复元素的集合，选出子集</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; ans;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; node = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    backtrace(nums, <span class="number">0</span>, node);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, List&lt;Integer&gt; node)</span>&#123;</span><br><span class="line"></span><br><span class="line">    ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="comment">// 剪枝 如果当前元素和前一个相同 就跳过</span></span><br><span class="line">        <span class="keyword">if</span>( i &gt; start &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">        node.add(nums[i]);</span><br><span class="line">        backtrace(nums, i + <span class="number">1</span>, node);</span><br><span class="line">        node.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(nums[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="元素无重可重复选">1.3、元素无重+可重复选</h5><blockquote><p>nums数组，指定 target，返回所有满足 元素和等于 target 的子序列</p><p>可以重复使用元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; one = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtrace(candidates, <span class="number">0</span>, one, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    nums: 元素集合</span></span><br><span class="line"><span class="comment">    start: 开始位置</span></span><br><span class="line"><span class="comment">    one: 子序列</span></span><br><span class="line"><span class="comment">    target: 目标值</span></span><br><span class="line"><span class="comment">    cur_sum: 当前元素和</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, List&lt;Integer&gt; one, <span class="type">int</span> target, <span class="type">int</span> cur_sum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur_sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(one));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur_sum + nums[i] &gt; target) <span class="keyword">break</span>;</span><br><span class="line">            one.add(nums[i]);</span><br><span class="line">            <span class="comment">// 从 i 开始向后走，保证可以重复使用元素...</span></span><br><span class="line">            backtrace(nums, i, one, target, cur_sum + nums[i]);</span><br><span class="line">            one.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(nums[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排列问题">2、排列问题</h4><p>排列问题一般不存在对子序列元素和的要求，所以框架上略有不同</p><ul><li>元素无重+不可复选</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">solve</span><span class="params">(...)</span>&#123;</span><br><span class="line">    res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; one = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtrace(nums, one);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, List&lt;Integer&gt; one)</span>&#123;</span><br><span class="line">    <span class="comment">// 结束条件: 包含了所有元素</span></span><br><span class="line">    <span class="keyword">if</span>(one.size() == nums.length)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(one));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( one.contains(nums[i]) ) <span class="keyword">continue</span>; <span class="comment">// 排除被选中的元素</span></span><br><span class="line">        one.add(nums[i]);</span><br><span class="line">        backtrace(nums, one);</span><br><span class="line">        one.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(nums[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>元素有重+不可复选</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要排除一些情况</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line"><span class="type">boolean</span>[] visited;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">solve</span><span class="params">(...)</span>&#123;</span><br><span class="line">    res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; one = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">    backtrace(nums, one);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrace</span><span class="params">(<span class="type">int</span>[] nums, List&lt;Integer&gt; one)</span>&#123;</span><br><span class="line">    <span class="comment">// 结束条件: 包含了所有元素</span></span><br><span class="line">    <span class="keyword">if</span>(one.size() == nums.length)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(one));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="comment">/* 剪枝: 当前元素和前一个元素相同 且 前一个还没有遍历到的话 就跳过</span></span><br><span class="line"><span class="comment">        因为这个情况在前一个元素遍历时已经经历了</span></span><br><span class="line"><span class="comment">        例如: [1,2,1] 遍历第一个 1 的时候就已经 遍历出了 [1,1,2] 和 [1,2,1] 了</span></span><br><span class="line"><span class="comment">        遍历到第二个 1 就可以跳过了</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>( i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; !visited[i-<span class="number">1</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>( visited[i] ) <span class="keyword">continue</span>; <span class="comment">// 排除被选中的元素</span></span><br><span class="line">        visited[i] = <span class="literal">true</span>;</span><br><span class="line">        one.add(nums[i]);</span><br><span class="line">        backtrace(nums, one);</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//one.remove(new Integer(nums[i])); // remove(Object o) 是移除第一个出现的这个元素</span></span><br><span class="line">        one.remove(one.size() - <span class="number">1</span>); <span class="comment">// 使用下标移除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="岛屿问题">岛屿问题</h3><h4 id="岛屿数量">1、岛屿数量</h4><blockquote><p><ahref="https://leetcode.cn/problems/number-of-islands/submissions/">200.岛屿数量 - 力扣（LeetCode）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dfs(grid, i, j);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">/* 这种越界判断跟简洁 */</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n) <span class="keyword">return</span>; <span class="comment">// 越界返回</span></span><br><span class="line">        <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        dfs(grid, i - <span class="number">1</span>, j);</span><br><span class="line">        dfs(grid, i + <span class="number">1</span>, j);</span><br><span class="line">        dfs(grid, i, j - <span class="number">1</span>);</span><br><span class="line">        dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封闭岛屿数量">2、封闭岛屿数量</h4><blockquote><p>封闭岛屿就是<strong>完全</strong>（上、下、左、右）被水包围的陆地</p></blockquote><p>其实 封闭岛屿数量 = 200.岛屿数量 - 靠边岛屿数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 把200.岛屿数量中求出来的岛屿数减去靠边的岛屿数就是本题结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">closedIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// Attention: 得先将上下左右边上的岛屿给淹掉</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[<span class="number">0</span>][j] == <span class="number">0</span>) dfs(grid, <span class="number">0</span>, j);</span><br><span class="line">            <span class="keyword">if</span>(grid[m-<span class="number">1</span>][j] == <span class="number">0</span>) dfs(grid, m-<span class="number">1</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][<span class="number">0</span>] == <span class="number">0</span>) dfs(grid, i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(grid[i][n-<span class="number">1</span>] == <span class="number">0</span>) dfs(grid, i, n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 如果在这个主循环里排除靠边的岛屿的话，会出现错误</span></span><br><span class="line">        <span class="comment">// 因为存在遍历次序 中间的0 肯定比 最下面那条边的0 更早被遍历</span></span><br><span class="line">        <span class="comment">// 如果中间的0和下面那条边的0是相连通的，这个岛屿就是靠边岛屿</span></span><br><span class="line">        <span class="comment">// 但是这个岛屿会被算进答案中</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        for(int i = 0; i &lt; m; i ++)&#123;</span></span><br><span class="line"><span class="comment">            for(int j = 0; j &lt; n; j ++)&#123;</span></span><br><span class="line"><span class="comment">                if(grid[i][j] == 1) continue;</span></span><br><span class="line"><span class="comment">                if(i == 0 || i == m - 1 || j == 0 || j == n - 1)&#123;</span></span><br><span class="line"><span class="comment">                    dfs(grid, i, j);</span></span><br><span class="line"><span class="comment">                &#125; else &#123;</span></span><br><span class="line"><span class="comment">                    dfs(grid, i, j);</span></span><br><span class="line"><span class="comment">                    cnt++;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dfs(grid, i, j);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        grid[i][j] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        dfs(grid, i - <span class="number">1</span>, j);</span><br><span class="line">        dfs(grid, i + <span class="number">1</span>, j);</span><br><span class="line">        dfs(grid, i, j - <span class="number">1</span>);</span><br><span class="line">        dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统计子岛屿">3、统计子岛屿</h4><blockquote><p><a href="https://leetcode.cn/problems/count-sub-islands/">1905.统计子岛屿 - 力扣（LeetCode）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubIslands</span><span class="params">(<span class="type">int</span>[][] grid1, <span class="type">int</span>[][] grid2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid1.length; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid1[<span class="number">0</span>].length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先淹掉grid2中不是子岛屿的部分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid1[i][j] == <span class="number">0</span> &amp;&amp; grid2[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                dfs(grid2, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计子岛屿</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid2[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                dfs(grid2, i, j);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(grid[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    grid[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    dfs(grid, i-<span class="number">1</span>, j);</span><br><span class="line">    dfs(grid, i+<span class="number">1</span>, j);</span><br><span class="line">    dfs(grid, i, j-<span class="number">1</span>);</span><br><span class="line">    dfs(grid, i, j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不同岛屿的数量">4、不同岛屿的数量</h4><p>统计不同形状的岛屿数量</p><p>这就要求在dfs遍历的过程中用某种方法记录岛屿的形状：在dfs过程中用字符进行拼接形成字符串</p><p>由于dfs的顺序是一样的、固定的，所以如果岛屿形状相同，开始dfs的位置肯定是一样的，最后形成的字符串也是一样的，再通过HashMap记录即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDistinctIslands</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Integer&gt; mapping = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="type">String</span> <span class="variable">shape</span> <span class="operator">=</span> dfs(grid, i, j);</span><br><span class="line">                System.out.println(<span class="string">&quot;(&quot;</span> + i + <span class="string">&quot;, &quot;</span> + j + <span class="string">&quot;)&quot;</span> + <span class="string">&quot;: &quot;</span> + shape);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!mapping.containsKey(shape))&#123;</span><br><span class="line">                    mapping.put(shape, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mapping.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="comment">// 非陆地的统一用&#x27;0&#x27;表示</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (grid[i][j] == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    grid[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>  +  dfs(grid, i - <span class="number">1</span>, j) +</span><br><span class="line">                   dfs(grid, i + <span class="number">1</span>, j) +</span><br><span class="line">                   dfs(grid, i, j - <span class="number">1</span>) +</span><br><span class="line">                   dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bfs算法">BFS算法</h2><p>BFS算法是广度优先，遍历过程中，从开始节点到（第一次到）任一节点的的距离都是最小的</p><p>优点：BFS算法的普适性强，可以适用于所有情况</p><p>缺点：效率低，BFS的遍历由一个点等距离的向四周扩散</p><figure><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029210656103.png"alt="image-20221029210656103" /><figcaption aria-hidden="true">image-20221029210656103</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(Node root, Node target)</span>&#123;</span><br><span class="line">    <span class="comment">// 队列: BFS遍历必备</span></span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="comment">// 记录已经走过的节点</span></span><br><span class="line">    Set&lt;Node&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    visited.add(root);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录已走的步数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cur is target) <span class="keyword">return</span> step;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(Node n : graph[n])&#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited.contains(n))&#123;</span><br><span class="line">                    queue.offer(n);</span><br><span class="line">                    visited.add(n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        step ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dijkstra算法">Dijkstra算法</h2><p>Dijkstra算法就是在BFS算法上的一个改进，针对有权重的图，主要的区别就在于存放节点的数据结构从普通的队列（Queue）变成了优先级队列（PriorityQueue），而使用优先级队列就可以按照代价（<strong>这个代价是从开始节点到当前节点的代价</strong>，所以Dijkstra算法是可以求出开始节点到所有节点的最小距离的）对节点进行排序，使得每次取出的节点都是代价最小的，从而实现第一次到某节点时的代价就是最小的。</p><h2 id="greedy-best-first-search">Greedy Best-First Search</h2><p>这个算法和Dijktra算法类似，但是这里所选取的代价是<strong>当前节点到target节点的理论代价</strong>。所以这个算法可以<strong>基本可以</strong>十分快速求出到达target节点的最小代价，特殊情况就是图中存在障碍物的情形，由于所用的代价是理论上的，并不是实际情况，所以会导致"走错路"的情况。</p><h2 id="a算法">A*算法</h2><blockquote><p><a href="">Introduction to A*</a></p></blockquote><p>A*算法有效地结合了Dijkstra算法和Greedy Best-FirstSearch算法，<strong>综合了两方面的代价</strong>，使得既拥有了上述两个算法的优势。</p><p>代码框架</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Solution&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AStar</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            f: 综合代价 f = g + h</span></span><br><span class="line"><span class="comment">            g: 开始节点到当前节点的代价</span></span><br><span class="line"><span class="comment">            h: 当前节点到target节点的理论代价</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> f, g, h; </span><br><span class="line">        Node cur; <span class="comment">// 标识当前节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AStar</span><span class="params">(Node cur, <span class="type">int</span> g, Node target)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.cur = cur;</span><br><span class="line">            <span class="built_in">this</span>.h = getH(cur, target);</span><br><span class="line">            <span class="built_in">this</span>.g = g;</span><br><span class="line">            <span class="built_in">this</span>.f = <span class="built_in">this</span>.g + <span class="built_in">this</span>.h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算 h 值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getH</span><span class="params">(Node cur, Node target)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">solve</span><span class="params">(Node start, Node target)</span>&#123;</span><br><span class="line">        Queue&lt;AStar&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a.f - b.f;</span><br><span class="line">        &#125;);</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">AStar</span>(start, <span class="number">0</span>, target));</span><br><span class="line">        </span><br><span class="line">        Set&lt;Node&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        visited.add(start);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">AStar</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(Node n : graph[node.cur])&#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited.contains(n))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(n == target)&#123;</span><br><span class="line">                        <span class="keyword">return</span> node.g + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">AStar</span>(n, node.g + <span class="number">1</span>, target));</span><br><span class="line">                    visited(n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="应用">应用</h2><p>【773.滑动谜题】</p><blockquote><p><a href="https://leetcode.cn/problems/sliding-puzzle/">773. 滑动谜题- 力扣（LeetCode）</a></p></blockquote><p>关键在于如何建模形成 graph 以及 node 是什么</p><p>在这道题中，就可以把<span class="math inline">\(2 \times3\)</span>的矩阵抽象成<code>String</code>作为节点，而每次移动之后形成的节点作为该节点的邻居，这样就形成了<code>graph</code></p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记8-动态规划</title>
      <link href="/2022/11/17/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B08%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
      <url>/2022/11/17/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B08%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一核心原理">一、核心原理</h2><blockquote><p>刷过一些题后，感觉动态规划最核心的就是 <strong>dp 数组</strong> +<strong>状态转移方程</strong></p><p>【dp数组】是为了避免重复计算而带来的高复杂度</p><p>【状态转移方程】是为了将问题进行分解成更加简单的子结构</p><p>所以动态规划的核心思想就是：</p><p>1、自底向上（迭代）：从最简子结构开始，不断向上计算，在计算过程中将对应子结构的值存在dp数组 中，使得更复杂结构的问题在分解后可以直接找到答案。</p><p>2、自顶向下（递归） ：从当前问题规模出发，通过递归不断分解问题直至base case，计算出basecase后，再从最深的递归函数开始不断返回，向上计算，最后求解出问题的答案。</p></blockquote><p>要写出动态规划的解法，最重要的就是写出<strong>状态转移方程</strong>。有了状态转移方程，就知道需要保存什么值，就可以推出dp数组的定义。</p><p>首先要明确<strong>状态</strong>。这个状态是会影响问题规模的量。在背包问题中，很明显问题的规模主要和<strong>物品的数量</strong> 以及 <strong>背包的容量</strong>相关。因为如果这两个量的值很小，那么问题就会很简单，反之就会很复杂。</p><p>明确状态之后，就要寻找如何<strong>转移</strong>。转移的目的是降低问题的规模（通过改变状态）。那么在背包问题中，我们要求解的是在当前给定数量(<span class="math inline">\(N\)</span>)的物品 和给定容量(<spanclass="math inline">\(W\)</span>)的背包的前提下的某个问题，我们用 <spanclass="math inline">\(f(N, W)\)</span>来表示。</p><p>而我们想要找出来的是 <span class="math inline">\(f(N,W)\)</span>能够用某些更小规模的问题来表示（可以理解为数列中的递推公式），例如 <spanclass="math inline">\(f(N,W) = f(N-1,W) + f(N, W-1)\)</span></p><p>最后要去找到<code>base case</code>的值，例如<spanclass="math inline">\(f(0,W)\)</span>或者<spanclass="math inline">\(f(N,0)\)</span>，因为所以的状态转移都是建立在<code>base case</code>的基础上的。</p><h2 id="二经典动态规划问题">二、经典动态规划问题</h2><p>这里主要讲两类问题，分类的主要是状态转移方程的类型。</p><h3 id="单参数">1、单参数</h3><blockquote><p>【300.最长递增子序列】</p><p>【53.最大子序和】</p></blockquote><p>它们的状态转移方程都只有一个参数（dp数组都是一维的）</p><p>【300.最长递增子序列】中可以将 <strong>元素个数作为状态</strong>即可写出状态转移方程：$f(i) = max(f(i), f(j)+1) $ <spanclass="math inline">\(j = [i+1, ...n-1]\)</span>（具体一点，<code>i</code>表示前<code>i</code>个元素或者后<code>i</code>个元素，这里的状态转移方程用的后<code>i</code>个元素）</p><p>那么核心部分的代码也就很好写了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">Arrays.fill(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; nums[j]) <span class="keyword">continue</span>;</span><br><span class="line">        dp[i] = Math.max(dp[i], dp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双参数">2、双参数</h3><blockquote><p>【1143.最长公共子序列】</p><p>【72.编辑距离】</p><p>【10.正则表达式匹配】</p></blockquote><p>这一类的问题涉及到两个状态，但本质上还是第一类问题，只是由于字符串/数组变成了两个，所以需要两个参数来记录状态。</p><p>以【10.正则表达式状态匹配】为例。存在 一个待匹配的字符串 str 和一个模板串 pattern，那么状态就有两个： str 的长度和 pattern的长度，那这个问题的解就可以表示为 <span class="math inline">\(f(N,M)\)</span></p><p>然后就要考虑如何转移状态化简问题的解。我们先任取两个值<code>i</code>，<code>j</code>，分别表示【只考虑str的前<code>i</code>个字符】以及【只考虑pattern的前<code>j</code>个字符】，这样我们要求解的就是<code>f(str.length(), pattern.length())</code>了。</p><p>由于<spanclass="math inline">\(f(i,j)\)</span>之前的子问题肯定都已经计算好了，所以我们就只要考虑如何减小<code>i</code>、<code>j</code>这两个参数。下面就涉及到问题的细节，在这个问题中，到状态转移到<code>i</code>和<code>j</code>时，考虑pattern的第<code>j</code>个字符是什么？我们分为两种情况：<code>'*'</code>和不是<code>'*'</code>，原因在于<code>'*'</code>是可以匹配多个的，是变化的。</p><ul><li>如果是<code>'*'</code>：就要看前一个字符是否和str的第i个字符【相同】<ul><li>不相同：<code>dp[i][j]</code>转移到<code>dp[i][j-2]</code></li><li>相同：就要选择是否要去匹配str的第i个字符<ul><li>不去匹配：<code>dp[i][j]</code>转移到<code>dp[i][j-2]</code></li><li>要匹配：<code>dp[i][j]</code>转移到<code>dp[i-1][j]</code></li></ul></li></ul></li><li>如果不是<code>'*'</code>：就看str的第i个字符和pattern的第j个字符是否相同<ul><li>相同：<code>dp[i][j]</code>转移到<code>dp[i-1][j-1]</code></li><li>不相同：<code>dp[i][j] = false</code></li></ul></li></ul><p>【完整代码】如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> p.length();</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++)&#123; <span class="comment">// 从0开始是为了看是否能够匹配空串；填上dp数组的最上面一行；就是确定base case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">// 匹配0个</span></span><br><span class="line">                dp[i][j] = dp[i][j-<span class="number">2</span>];</span><br><span class="line">                <span class="comment">// 匹配1个</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">2</span>) || p.charAt(j-<span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j] || dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">1</span>) || p.charAt(j-<span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三背包问题">三、背包问题</h2><h3 id="类型">1、类型</h3><h4 id="背包问题">1.1、0-1背包问题</h4><p>【问题描述】</p><blockquote><p>给定一个可装载重量为<code>W</code>的背包和<code>N</code>个物品，每个物品有重量和价值两个属性，其中第<code>i</code>个物品的重量为<code>wt[i]</code>，价值为<code>val[i]</code>，请问用这个背包最多可以装多少价值的物品？</p></blockquote><h4 id="完全背包问题">1.2、完全背包问题</h4><p>【518.零钱兑换Ⅱ】</p><blockquote><p>给定不同面额的硬币和一个总金额，计算出可以凑成总金额的硬币组合数，假设每一种面额的硬币有无限个。</p></blockquote><p>转换为背包问题，就是</p><blockquote><p>有一个最大容量为 amount 的背包，有一系列物品 coins，物品的重量为coins[i]，每个物品的数量无限，请问有多少种方法，能够恰好把背包装满？</p></blockquote><p>由于每个物品的数量是无限的，所以被称为【<strong>完全背包问题</strong>】</p><h4 id="子集背包问题">1.3、子集背包问题</h4><p>【416.分割等和子集】</p><blockquote><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得这两个子集的元素和相等。</p></blockquote><p>其实类似于0-1背包问题</p><blockquote><p>有一堆物品 nums，物品重量为 nums[i]，物品重量之和为 sum。有一个容量为sum / 2 的背包，是否存在一种方法能够恰好装满这个背包？</p></blockquote><h3 id="分析">2、分析</h3><p>由于都可以转换为情景相似的背包问题，所以就可以放在一起分析。</p><p>这里我们挑完全背包问题作为例子，【518.零钱兑换Ⅱ】</p><ol type="1"><li>明确状态：<span class="math inline">\(N\)</span>：前<spanclass="math inline">\(N\)</span>个硬币；<spanclass="math inline">\(W\)</span>：总金额</li><li>明确转移：需要求解的是 <span class="math inline">\(f(N,W)\)</span>，即给定前<spanclass="math inline">\(N\)</span>个硬币恰好可以组成<spanclass="math inline">\(W\)</span>金额的组合数。这么定义了之后，我们就可以很轻易的写出最简单问题的答案：<spanclass="math inline">\(f(0, W) = 0\)</span>和<spanclass="math inline">\(f(N, 0) = 1\)</span></li><li>如何转移：对于 <spanclass="math inline">\(f(N,W)\)</span>，我们考虑第<spanclass="math inline">\(N\)</span>个硬币P。如果我们在组合过程中不使用P，那么问题就被转化为了<spanclass="math inline">\(f(N-1,W)\)</span>。如果我们在组合过程中要使用P，那么问题就被转化为了<spanclass="math inline">\(f(N, W-wt[P])\)</span>。</li><li>所以我们可以得出状态转移方程：<span class="math inline">\(f(N,W) =f(N-1,W)+f(N,W-wt[P])\)</span></li></ol><p>写出状态转移方程之后，我们就可以知道如何定义 dp数组 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[][];</span><br><span class="line"><span class="comment">// dp[i][j]: 前i个硬币组合出j金额的种数</span></span><br></pre></td></tr></table></figure><p>我们就可以用dp数组来表示状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j - &lt;第i个硬币的面值&gt;]</span><br></pre></td></tr></table></figure><blockquote><p>[3]有一个比较难理解的点，就是为什么使用了P，问题被转化成了<spanclass="math inline">\(f(N, W-wt[P])\)</span>，而不是<spanclass="math inline">\(f(N-1, W-wt[P])\)</span></p><p>​ 可能会感觉是 <span class="math inline">\(N-1\)</span>，毕竟第<spanclass="math inline">\(N\)</span>个硬币已经用过了，但是也可能<spanclass="math inline">\(W-wt[P]\)</span>金额组合中也用了第<spanclass="math inline">\(N\)</span>个硬币，所以不能确定硬币数，只能确定金额数。</p></blockquote><h3 id="代码和改进">3、代码和改进</h3><h4 id="代码">代码</h4><p>【518.零钱兑换Ⅱ】完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> coins.length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][amount+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 目标就是求 dp[n][amount]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= amount; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; coins[i-<span class="number">1</span>])&#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j - coins[i-<span class="number">1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="状态压缩">状态压缩</h4><p>最后，还要再探讨一下状态压缩问题，即可以使用一维dp数组，使得空间复杂度从<spanclass="math inline">\(O(NW)\)</span>降为<spanclass="math inline">\(O(W)\)</span></p><p>这里主要选取【518.零钱兑换Ⅱ】和【416.分割等和子集】两个问题</p><p>首先写出它们的状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 518.零钱兑换Ⅱ</span></span><br><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j - coins[i-<span class="number">1</span>]];</span><br><span class="line"><span class="comment">// 416.分割等和子集</span></span><br><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i-<span class="number">1</span>][j - nums[i-<span class="number">1</span>]];</span><br></pre></td></tr></table></figure><p>可以发现，<code>dp[i][j]</code>只和<code>dp[i][...]</code>以及<code>dp[i-1][...]</code>有关系。</p><p>改成一维数组后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount];</span><br></pre></td></tr></table></figure><p>在第<code>i</code>轮迭代开始之前，dp数组中的值就等价于之前的<code>dp[i-1][...]</code></p><p>所以只要控制遍历顺序（正向或逆向），使得在遍历<code>dp[j]</code>时，<code>dp[j-?]</code>的值已经更新（<code>dp[i][j-?]</code>）或者没有更新（<code>dp[i-1][j-?]</code>），即可实现状态的转移。</p><p>最后附上使用一维数组解决的代码</p><blockquote><p><strong>注意两段代码的第二层循环，就是通过正向遍历和逆向遍历实现在计算dp[j]时dp[j-?]的已更新和未更新</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 518.零钱兑换Ⅱ</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> coins.length;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 目标就是求 dp[amount]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= amount; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; coins[i]) <span class="keyword">continue</span>;</span><br><span class="line">            dp[j] = dp[j] + dp[j - coins[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 416.分割等和子集</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 前置判断</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : nums) sum += i;</span><br><span class="line">    <span class="keyword">if</span>(sum % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>; <span class="comment">// 背包中的目标值</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[target+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; nums[i]) <span class="keyword">continue</span>;</span><br><span class="line">            dp[j] = dp[j] || dp[j - nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记9-dp应用</title>
      <link href="/2022/11/16/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B09%EF%BC%88dp%E5%BA%94%E7%94%A8%EF%BC%89/"/>
      <url>/2022/11/16/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B09%EF%BC%88dp%E5%BA%94%E7%94%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一股票问题">一、股票问题(*)</h2><blockquote><p><ahref="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/">188.买卖股票的最佳时机 IV</a></p><p>给定一个整数数组 prices ，它的第 i 个元素 prices[i]是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p></blockquote><p>labuladong算法秘籍中使用了【三个<strong>状态</strong>】（三维dp数组）</p><ol type="1"><li>第几天</li><li>手中是否持有股票</li><li>最大交易限制（最大交易限制只在买入股票时减一）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i][j][k] 意味着在第i天，手中持有(j=1)或不持有(j=0)股票，最大交易限制为k情况下的最大利润</span></span><br></pre></td></tr></table></figure><p><strong>状态转移方程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>][k] = Math.max(</span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">0</span>][k],  <span class="comment">// 第i天 不买入不卖出: 第i-1天也没有股票，交易限制还是k</span></span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">1</span>][k]+prices[i-<span class="number">1</span>] <span class="comment">// 第i天 卖出: 第i-1天有股票，交易限制还是k</span></span><br><span class="line">);</span><br><span class="line">dp[i][<span class="number">1</span>][k] = Math.max(</span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">1</span>][k], <span class="comment">// 第i天 不买入不卖出: 第i-1天有股票，交易限制为k</span></span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">0</span>][k-<span class="number">1</span>]-prices[i-<span class="number">1</span>] <span class="comment">// 第i天 买入: 第i-1天没有股票，最大交易次数不能超过k-1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>base case</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = <span class="number">0</span>; dp[<span class="number">0</span>][<span class="number">1</span>][...] = Integer.MIN_VALUE;</span><br><span class="line">dp[...][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; dp[...][<span class="number">1</span>][<span class="number">0</span>] = Integer.MIN_VALUE;</span><br></pre></td></tr></table></figure><h2 id="二打劫家舍问题">二、打劫家舍问题</h2><blockquote><p><ahref="%5B198.%20打家劫舍%20-%20力扣（LeetCode）%5D(https://leetcode.cn/problems/house-robber/)">198.打劫家舍</a></p><p><a href="https://leetcode.cn/problems/house-robber-ii/">213. 打家劫舍II</a></p><p><a href="https://leetcode.cn/problems/house-robber-iii/">337.打家劫舍 III</a></p></blockquote><h3 id="打劫家舍">1、打劫家舍</h3><p>【状态】是 <u>抢劫第i家时能获得的最大金额</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态转移方程</span></span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">2</span>], dp[i-<span class="number">3</span>]) + nums[i];</span><br></pre></td></tr></table></figure><h3 id="打劫家舍ⅱ">2、打劫家舍Ⅱ</h3><blockquote><p>特别之处在于 nums 换成了环形数组</p></blockquote><p>应对策略也十分巧妙</p><p><span class="math inline">\(f([x_{1}, x_{2}, ... , x_{n}]) = max(f([x_{1}, x_{2}, ..., x_{n-1}]), f([x_{2}, ..., x_{n}]) )\)</span></p><p><u><strong>既然首尾相连了，那么肯定最多只能抢劫一家，把另外一家除去</strong></u>，就把环形数组又变成了普通数组了。</p><h3 id="打劫家舍ⅲ">3、打劫家舍Ⅲ</h3><blockquote><p>把家舍的形状变成了二叉树</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] res = dp(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(res[<span class="number">0</span>], res[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return &#123;x, y&#125; </span></span><br><span class="line">    <span class="comment">// x: 包括root节点的最高金额 </span></span><br><span class="line">    <span class="comment">// y: 不包含root节点的最高金额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] dp(TreeNode root)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] left = dp(root.left);</span><br><span class="line">        <span class="type">int</span>[] right = dp(root.right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> left[<span class="number">1</span>] + right[<span class="number">1</span>] + root.val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Math.max(left[<span class="number">1</span>], left[<span class="number">0</span>]) + Math.max(right[<span class="number">1</span>], right[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三博弈问题">三、博弈问题</h2><blockquote><p><a href="https://leetcode.cn/problems/predict-the-winner/">486.预测赢家</a></p></blockquote><p>最核心最关键的还是在【找状态】，理解！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种比较容易理解的，三维数组</span></span><br><span class="line"><span class="comment">// dp[i][j][0] 表示在[xi...xj]区间时，先手的最大得分</span></span><br><span class="line">dp[i][j][<span class="number">0</span>] = Math.max(nums[i]+dp[i+<span class="number">1</span>][j][<span class="number">1</span>], nums[j]+dp[i][j-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// [i...j] 先手可以选择i也可以选择j</span></span><br><span class="line"><span class="comment">// 选择i后，在[i+1...j]区间就变成了后手，就是dp[i+1][j][1]</span></span><br><span class="line"><span class="comment">// 选择j后，在[i...j+1]区间就变成了后手，就是dp[i][j-1][1]</span></span><br><span class="line"><span class="keyword">if</span> 先手选择了i: dp[i][j][<span class="number">1</span>] = dp[i+<span class="number">1</span>][j][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> 先手选择了j: dp[i][j][<span class="number">1</span>] = dp[i][j-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种稍微改进一点，二维数组</span></span><br><span class="line"><span class="comment">// dp[i][j][1] 表示在[xi...xj]区间时，先手的最大得分-后手的最大得分</span></span><br><span class="line">dp[i][j] = Math.max(nums[i] - dp[i+<span class="number">1</span>][j], nums[j] - dp[i][j-<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 在[i...j]先手做出选择后，就变成了后手，所以是&lt;减&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四扔鸡蛋">四、扔鸡蛋（***）</h2><blockquote><p><ahref="https://leetcode.cn/problems/super-egg-drop/">887.鸡蛋掉落</a></p><p>这道题理解上难度很高...</p></blockquote><figure><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221104212852347.png"alt="image-20221104212852347" /><figcaption aria-hidden="true">image-20221104212852347</figcaption></figure><p>这里讲一个逆向思维。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] 表示有j个鸡蛋，可以操作i次，可以在最高dp[i][j]的建筑里保证找到f</span><br></pre></td></tr></table></figure><p>比如<code>dp[2][1]=2</code>，表示有1个鸡蛋，可以操作2次，可以在最高2楼的建筑里保证找到<code>f</code>。意思就是如果楼<code>&gt;=</code>3，就不能保证在1个鸡蛋2次操作的情况下找到f。这里的保证是指不管在什么情况下都可以成功找到f，而不是说有一定概率可以找到。很好理解，不管多高的楼层，即使给1个鸡蛋1次操作，也有一定概率可以找到f（第1层就碎了，所以<code>f=0</code>）</p><p>理解完状态之后，就需要找到状态转移方程。先给出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = <span class="number">1</span> + dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + dp[i][j-<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>这里应该是这道题最难理解的地方。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记10—其他经典算法</title>
      <link href="/2022/11/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B010%EF%BC%88%E5%85%B6%E4%BB%96%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%EF%BC%89/"/>
      <url>/2022/11/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B010%EF%BC%88%E5%85%B6%E4%BB%96%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="素数筛">1 素数筛</h2><p>非常普遍的，寻找素数可以使用<spanclass="math inline">\(O(N^{2})\)</span>复杂度的算法来解决，但是不够高效。下面介绍几种更加高效的寻找素数的算法—素数筛。</p><p>最近再看到素数的算法，就想到了6.S081 lab1 中写的 primes函数，好像其本质就是一个素数筛—埃式筛法</p><h3 id="埃式筛法">埃式筛法</h3><p>思路就是，如果一个数是素数，我们可以将这个数的倍数全部划掉，因为它们不可能是素数。</p><p>代码如下，当我们找到一个素数时，我们就将这个素数的2倍、3倍、...划掉，而没有被划掉的就是素数。</p><p>复杂度：<span class="math inline">\(O(N loglogN)\)</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span>[] nums = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    Arrays.fill(nums, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i])&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * i; j &lt; n; j += i)&#123;</span><br><span class="line">                nums[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，很明显这个解法存在一定的冗余，比如说 6 就被 素数2 和素数3重复标记，下面介绍复杂度为<spanclass="math inline">\(O(N)\)</span>的线性素数筛</p><h3 id="线性筛">线性筛</h3><p>线性筛实现了每个合数只被标记一次，时间复杂度为 <spanclass="math inline">\(O(N)\)</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; primes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] nums = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    Arrays.fill(nums, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i])&#123;</span><br><span class="line">            primes.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; primes.size() &amp;&amp; primes.get(j) * i &lt; n; j++)&#123;</span><br><span class="line">            nums[primes.get(j) * i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % primes.get(j) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> primes.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阶乘">2 阶乘</h2><blockquote><p><ahref="https://leetcode.cn/problems/factorial-trailing-zeroes/">172.阶乘后的零</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221116121050876.png" /></p></blockquote><p>这道题很明显直接去算阶乘肯定是行不通的，应该要考虑核心因素。</p><p>产生0的原因是阶乘式子中存在<span class="math inline">\(2 \times5\)</span>，所以要计算0的数量，只要计算式子中出现了多少对<spanclass="math inline">\(2 \times 5\)</span>，即有多少因子2和因子5。</p><p>再往下考虑，其实只需要考虑因子5的个数即可，因为因子2在任何偶数中都可以提取出来，所以在一个阶乘式子中，因子2的个数是大于因子5的（可以严格证明）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i / <span class="number">5</span> &gt; <span class="number">0</span>; i /= <span class="number">5</span>)&#123;</span><br><span class="line">        cnt += (i / <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><ahref="https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/">793.阶乘函数后 K 个零</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221116121859204.png" /></p></blockquote><p>这一题相当于上一题的逆过程。</p><p>首先明确，<spanclass="math inline">\(f(x)\)</span>肯定是一个单调递增的函数，<spanclass="math inline">\(x\)</span>越大，<spanclass="math inline">\(f(x)\)</span>的值肯定不会减少。而现在是给定<spanclass="math inline">\(f(x)\)</span>，要求出<spanclass="math inline">\(x\)</span>，很自然应该使用【<strong>二分查找</strong>】。</p><p>1、注意数据范围：<span class="math inline">\(k &lt;= 10^9\)</span>，所以能够产生这个<span class="math inline">\(f(x)\)</span>的<spanclass="math inline">\(x\)</span>肯定已经超出了<code>int</code>的范围需要使用<code>long</code></p><p>2、仔细想一想可以发现：给定<code>k</code>之后，要么不存在这样的<spanclass="math inline">\(x!\)</span>，如果存在只有5个这样的<spanclass="math inline">\(x!\)</span>。</p><p>回到上一题的思路，阶乘末尾0的个数 =阶乘式子中因子5的个数。<strong>如果存在的话，应该是能够找到一个<spanclass="math inline">\(x\)</span>，是5的倍数，满足<spanclass="math inline">\(\le x\)</span>的数中因子5的数量之和<spanclass="math inline">\(=k\)</span>。</strong>【举个例子，<spanclass="math inline">\(k=4\)</span>，存在<span class="math inline">\(x =20\)</span>，满足<span class="math inline">\(\lex\)</span>的数中因子5的数量之和<spanclass="math inline">\(=4\)</span>（<spanclass="math inline">\(5、10、15、20\)</span>）】既然如此，那么答案应该就在找到的这个<spanclass="math inline">\(x\)</span>到下一个5的倍数<spanclass="math inline">\(x+5\)</span>之间，即<spanclass="math inline">\([x, x+5)\)</span>，因为到下一个5的倍数<spanclass="math inline">\(x+5\)</span>时，<spanclass="math inline">\(f(x)\)</span>肯定大于<spanclass="math inline">\(k\)</span>，所以总共只有5个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">preimageSizeFZF</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>; <span class="type">long</span> <span class="variable">hi</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">    <span class="keyword">while</span>(lo &lt;= hi)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">k0</span> <span class="operator">=</span> trailingZeroes(mid);</span><br><span class="line">        <span class="keyword">if</span>(k0 == k) <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k0 &gt; k) hi = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> lo = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">trailingZeroes</span><span class="params">(<span class="type">long</span> n)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> n; i / <span class="number">5</span> &gt; <span class="number">0</span>; i /= <span class="number">5</span>)&#123;</span><br><span class="line">        cnt += (i / <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="水塘抽样">3 水塘抽样</h2><p><strong>这个算法可以实现【低空间复杂度】从无限序列中随机抽取元素。</strong>实际上是用时间换空间的一种算法。</p><h4 id="问题1无重复元素">问题1：无重复元素</h4><blockquote><p><a href="https://leetcode.cn/problems/linked-list-random-node/">382.链表随机节点</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221117093723012.png" /></p></blockquote><p>思路：当遇到第<code>i</code>个元素时，从<spanclass="math inline">\([0,i)\)</span>之间随机抽取一个数，如果这个数为0，则将答案置为第<code>i</code>个元素，否则答案不变。这样可以使得返回每个元素的概率都为<spanclass="math inline">\(\frac{1}{n}\)</span>。</p><p>证明： <span class="math display">\[P(return \ \  i\text{-}th \ \ element) = \\P(第i次随机选择的值=0) \times P(第i+1次随机选择的值\ne0) \times \cdots\times P(第n次随机选择的值\ne0) =\\\frac{1}{i} \times (1 - \frac{1}{i+1}) \times (1 - \frac{1}{i+2}) \times\cdots \times (1 - \frac{1}{n}) = \frac{1}{n}\]</span> 代码：<code>getRandom</code>函数的时间复杂度为<spanclass="math inline">\(O(N)\)</span>，空间复杂度为<spanclass="math inline">\(O(1)\)</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    ListNode head;</span><br><span class="line">    Random r;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = head;</span><br><span class="line">        r = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">h0</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(h0 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> h0.val;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(r.nextInt(i) == <span class="number">0</span>)&#123;</span><br><span class="line">                res = val;</span><br><span class="line">            &#125;</span><br><span class="line">            h0 = h0.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题2存在重复元素">问题2：存在重复元素</h4><blockquote><p><a href="https://leetcode.cn/problems/random-pick-index/">398.随机数索引</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221117095257824.png" /></p></blockquote><p>思路：当遇到第<code>i</code>个<code>target</code>时，随机选取<spanclass="math inline">\([0,i)\)</span>之间的一个整数，如果其为0，这将答案置为<code>target</code>下标，否则答案不变。如果存在<code>k</code>个<code>target</code>，保证返回每个索引的概率都为<spanclass="math inline">\(\frac{1}{k}\)</span>。</p><p>证明同上。</p><p>代码：<code>pick</code>函数的时间复杂度为<spanclass="math inline">\(O(N)\)</span>，空间复杂度为<spanclass="math inline">\(O(1)\)</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    Random r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        r = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pick</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == target)&#123;</span><br><span class="line">                times ++;</span><br><span class="line">                <span class="keyword">if</span>(r.nextInt(times) == <span class="number">0</span>)&#123;</span><br><span class="line">                    res = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="吃葡萄">4 吃葡萄</h2><blockquote><p><ahref="https://www.nowcoder.com/questionTerminal/14c0359fb77a48319f0122ec175c9ada">吃葡萄</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221118092640002.png" /></p></blockquote><p>【要求】<u>三个人中吃的最多的那个人吃得尽量少</u>，<strong>就需要尽可能的平均分</strong>。当不考虑每个人只能吃两种葡萄的限制，答案应该是<spanclass="math inline">\((a+b+c+2)/3\)</span>，就是总和除3向上取整。</p><p>但是有"每个人只能吃两种葡萄"的限制就不能这么简单考虑，因为如果出现"其中两种葡萄很少，第三种很多"的情况时，就不一样了。比如<spanclass="math inline">\(a =1,\ b=1,\c=10000\)</span>，这个时候很明显答案就不是<spanclass="math inline">\((a+b+c+2)/3\)</span>了，因为只能吃<spanclass="math inline">\(a,b\)</span>两种葡萄的人最多只能吃2颗，这种情况下做不到三个人平均分，<strong>只能两个人平均分</strong>，来实现吃的最多的人吃得尽量少，就是<spanclass="math inline">\((c+1)/2\)</span>，即<spanclass="math inline">\((max+1)/2\)</span></p><p>那么如何判断属于哪种情况呢？当<spanclass="math inline">\(a,b,c\)</span>三者没有相差很大的情况下，很明显<spanclass="math inline">\((a+b+c+2)/3 &gt;(max+1)/2\)</span>；而当其中一种水果远大于另外两种时，<spanclass="math inline">\((a+b+c+2)/3 &lt;(max+1)/2\)</span>。所以答案应该是<span class="math inline">\(max( \(a+b+c+2)/3,\ (\ max(a,b,c) + 1 \ )/2 )\)</span></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="type">int</span> max_val = <span class="built_in">max</span>( <span class="built_in">max</span>(a, b), c );</span><br><span class="line">        <span class="type">int</span> sum = a + b + c;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>( (sum+<span class="number">2</span>)/<span class="number">3</span>, (max_val+<span class="number">1</span>)/<span class="number">2</span> ) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同时寻找缺失和重复的元素">5 同时寻找缺失和重复的元素</h2><blockquote><p><a href="https://leetcode.cn/problems/set-mismatch/">645.错误的集合</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221118111228487.png" /></p><p><strong>注意数组是无序的</strong></p></blockquote><p>首先很常规的方法有【排序】、【哈希】，这些都需要一定空间复杂度。下面谈谈常数空间复杂度的【映射】和【异或】</p><h3 id="映射">映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findErrorNums(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">dup</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> Math.abs(nums[i]) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[idx] &lt; <span class="number">0</span>)&#123; <span class="comment">// 重复元素</span></span><br><span class="line">            dup = Math.abs(nums[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[idx] *= -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">mis</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            mis = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;dup, mis&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异或">异或</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findErrorNums(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">xor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : nums) xor ^= num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) xor ^= i;</span><br><span class="line">    <span class="comment">// xor = dup ^ mis</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lowbit</span> <span class="operator">=</span> xor &amp; (-xor);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>; <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>((lowbit &amp; num) == <span class="number">0</span>)&#123;</span><br><span class="line">            num1 ^= num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num2 ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((lowbit &amp; i) == <span class="number">0</span>)&#123;</span><br><span class="line">            num1 ^= i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num2 ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == num1)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;num1, num2&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == num2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;num2, num1&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/11/12/TypeScript/"/>
      <url>/2022/11/12/TypeScript/</url>
      
        <content type="html"><![CDATA[<h2 id="一-概述">一 概述</h2><ol type="1"><li>TypeScript是JavaScript的超集，支持ES6+标准</li><li>由微软开发的自由和开源的变成语言</li><li>可编译为纯JS</li></ol><h2 id="二-语法">二 语法</h2><h3 id="基础类型">1 基础类型</h3><p>TypeScript相比JavaScript而言最大的区别就是 <strong>类型</strong></p><h4 id="布尔值">1.1 布尔值</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone : <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="数字">1.2 数字</h4><p>和JavaScript一样，TypeScript中的所有数字都是浮点数，使用类型<code>number</code>表示。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dec : <span class="built_in">number</span> = <span class="number">6</span>; <span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> hex : <span class="built_in">number</span> = <span class="number">0x0C</span>; <span class="comment">// 十六进制</span></span><br><span class="line"><span class="keyword">let</span> bin : <span class="built_in">number</span> = <span class="number">0b01</span>; <span class="comment">// 二进制</span></span><br><span class="line"><span class="keyword">let</span> oct : <span class="built_in">number</span> = <span class="number">0o74</span>; <span class="comment">// 八进制</span></span><br></pre></td></tr></table></figure><h4 id="字符串">1.3 字符串</h4><p>使用<code>string</code>表示文本数据类型，可以使用<code>"</code>或者<code>'</code>来表示字符串</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name : <span class="built_in">string</span> = <span class="string">&quot;curry&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>模板字符串</strong></p><p>模板字符串使用（反引号）包围，并且可以在其中使用<code>$&#123; expr &#125;</code>嵌入表达式，<code>expr</code>既可以是模板字符串也可以是可计算的表达式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name : <span class="built_in">string</span> = <span class="string">`zhhc`</span>;</span><br><span class="line"><span class="keyword">let</span> birth_year : <span class="built_in">number</span> = <span class="number">2002</span>;</span><br><span class="line"><span class="keyword">let</span> sentence : <span class="built_in">string</span> = <span class="string">`hello, i am <span class="subst">$&#123; name &#125;</span>, and my age is <span class="subst">$&#123; <span class="number">2022</span> - birth_year &#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h4 id="数组">1.4 数组</h4><p>两种定义方式</p><ol type="1"><li>```typescript // 类型后面加[] let list : number[] = [1, 2, 3];<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```typescript</span><br><span class="line">   // 数组泛型 Array&lt;类型&gt;</span><br><span class="line">   let list : Array&lt;number&gt; = [1, 2, 3];</span><br></pre></td></tr></table></figure></li></ol><h4 id="元组">1.5 元组</h4><p>元组类型表示 <u>已知数量和类型</u> 的数组，各元素的类型<u>不必相同</u></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x : [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;typescript&#x27;</span>, <span class="number">10</span>];</span><br></pre></td></tr></table></figure><h4 id="枚举">1.6 枚举</h4><p>枚举是TypeScript中多出来的，和C语言等高级语言类似，可以为一组数组赋予有意义的名字，帮助理解。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c : <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Red</span>;</span><br></pre></td></tr></table></figure><p>可以通过枚举值得到其名字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span> = <span class="number">1</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;</span><br><span class="line"><span class="keyword">let</span> green_name : <span class="built_in">string</span> = <span class="title class_">Color</span>[<span class="number">2</span>]; <span class="comment">// &quot;Green&quot;</span></span><br></pre></td></tr></table></figure><h4 id="任意值">1.7 任意值</h4><p>任意值(any)其实就像是JavaScript中的变量一样，可以被赋予任何类型的值，编译器不会进行检查。</p><p>对于Object类型的变量，你可以赋任何值，但是不能任意调用方法，即便它真的有这些方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Any</span> : <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line"><span class="title class_">Any</span> = <span class="string">&quot;Curry&quot;</span>;</span><br><span class="line"><span class="title class_">Any</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anyObject : <span class="title class_">Object</span> = <span class="number">4</span>;</span><br><span class="line">anyObject.<span class="keyword">function</span>(<span class="params"></span>); <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list : <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&quot;free&quot;</span>];</span><br></pre></td></tr></table></figure><h4 id="空值">1.8 空值</h4><p>空值（<code>void</code>）表示没有任何类型，一般用于函数没有返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) : <span class="built_in">void</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明变量没有什么意义，只能赋值<code>null</code>或<code>undefined</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> void_v : <span class="built_in">void</span> = <span class="literal">null</span>; <span class="comment">// or undefined</span></span><br></pre></td></tr></table></figure><h4 id="null-undefined">1.9 Null / Undefined</h4><p>默认情况下 <code>null</code> 和 <code>undefined</code>是所有类型的子类型，即可以将它们赋值给其他类型的变量，但是如果指定了<code>--strictNullChecks</code>，那么只能赋值给各自类型了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// without &#x27;--strictNullChecks&#x27;</span></span><br><span class="line"><span class="keyword">let</span> n : <span class="built_in">number</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> s : <span class="built_in">string</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// with &#x27;--strictNullChecks&#x27;</span></span><br><span class="line"><span class="keyword">let</span> nll : <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> udfd : <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h4 id="never">1.10 Never</h4><p><code>never</code>表示永不存在值的类型。</p><p>对于函数，修饰那些 【抛出异常】 或 【根本就不会有返回值】的函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">erro</span>(<span class="params">message : <span class="built_in">string</span></span>) : <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deadLoop</span>(<span class="params"></span>) : <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于变量，<code>never</code>类型是任何类型的子类型，所以可以赋值给任何类型；但是<code>never</code>类型的变量只能由<code>never</code>赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">number</span> = <span class="built_in">never</span>; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : <span class="built_in">never</span> = <span class="built_in">any</span>; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h4 id="类型断言">1.11 类型断言</h4><p>告诉编译器某个变量的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s : <span class="built_in">any</span> = <span class="string">&quot;i am a string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. &lt;断言类型&gt;变量</span></span><br><span class="line"><span class="keyword">let</span> len : <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;s).<span class="property">length</span>;</span><br><span class="line"><span class="comment">// 2. 变量 as 断言类型</span></span><br><span class="line"><span class="keyword">let</span> len : <span class="built_in">number</span> = (s <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure><h3 id="变量声明">2 变量声明</h3><p><code>TypeScript</code>中支持<code>let</code>和<code>const</code>，JS在ES6就支持了，主要是<code>let</code>和<code>var</code>的区别：主要就是<code>var</code>是函数级作用域，但是<code>let</code>是块级作用域。</p><h3 id="接口">3 接口</h3><p>TypeScript中最核心的原则之一就是<strong>类型</strong>，而接口就是为类型检查 定义契约。</p><p>像下面这个例子，<code>printConfig</code>函数接受一个符合<code>config</code>接口的参数，而<code>config</code>接口定义了需要含有值类型为<code>string</code>的<code>name</code>属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> config&#123;</span><br><span class="line">    name : <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printConfig</span>(<span class="params">Aconfig : config</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cfg = &#123;name : <span class="string">&quot;my config&quot;</span>, size : <span class="number">10</span>&#125;;</span><br><span class="line"><span class="title function_">printConfig</span>(cfg);</span><br></pre></td></tr></table></figure><h4 id="可选属性">可选属性</h4><p>这里重点需要注意的是：<strong>一旦接口中定义了可选的属性，那么被修饰的变量中只能存在要求的属性和可选的属性，不能出现其中不存在的属性。</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> config&#123;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    size?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printConfig</span>(<span class="params">Aconfig : config</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case one</span></span><br><span class="line"><span class="title function_">printConfig</span>(&#123;name : <span class="string">&quot;my config&quot;</span>, siz : <span class="number">10</span>&#125;); <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// case two</span></span><br><span class="line"><span class="title function_">printConfig</span>(&#123;name : <span class="string">&quot;my config&quot;</span>, siz : <span class="number">10</span>&#125; <span class="keyword">as</span> config)</span><br><span class="line"></span><br><span class="line"><span class="comment">// case three</span></span><br><span class="line"><span class="keyword">let</span> c = &#123;name : <span class="string">&quot;my config&quot;</span>, siz : <span class="number">10</span>&#125;</span><br><span class="line"><span class="title function_">printConfig</span>(c);</span><br></pre></td></tr></table></figure><h4 id="函数类型">函数类型</h4><p>下面这个接口就定义了一个函数类型，参数是两个<code>number</code>类型的值，返回类型是<code>boolean</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> func_temp&#123;</span><br><span class="line">    (<span class="attr">n1</span>: <span class="built_in">number</span>, <span class="attr">n2</span>: <span class="built_in">number</span>) : <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">func1</span>: func_temp;</span><br><span class="line">func1 = <span class="keyword">function</span>(<span class="params">n1, n2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 &gt; n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可索引的类型">可索引的类型</h4><p>1、数字索引=》数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> number_index&#123;</span><br><span class="line">    [index : <span class="built_in">number</span>] : <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : number_index = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]; <span class="comment">// a[1]</span></span><br></pre></td></tr></table></figure><p>2、字符串索引=》字典</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> string_index&#123;</span><br><span class="line">    [index : <span class="built_in">string</span>] : <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b : string_index = &#123;x : <span class="string">&quot;x&quot;</span>, y : <span class="string">&quot;y&quot;</span>&#125;; <span class="comment">// b[&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><p>3、由于当使用<code>number</code>来索引时，JavaScript会将它转换成<code>string</code>然后再去索引对象。所以当两者一起使用时，<code>number</code>索引返回值需要是<code>string</code>索引返回值的子类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> both_index&#123;</span><br><span class="line">    [index : <span class="built_in">number</span>] : B;</span><br><span class="line">    [index : <span class="built_in">string</span>] : A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类类型">类类型</h4><p>这一部分就和其他面向对象高级语言中的类似了。</p><p>要注意类静态部分和实例部分的区别</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ACon</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="comment">// 当一个类实现了一个接口，只会对其实例部分进行检查，而构造函数属于静态部分。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">ACon</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ACon</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> () : <span class="title class_">AInter</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AInter</span>&#123;</span><br><span class="line">    <span class="title function_">a_func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createA</span>(<span class="params">acon : ACon</span>) : <span class="title class_">AInter</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">acon</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span> <span class="keyword">implements</span> <span class="title class_">AInter</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span> <span class="keyword">implements</span> <span class="title class_">AInter</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1 = <span class="title function_">createA</span>(<span class="variable constant_">A1</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="title function_">createA</span>(<span class="variable constant_">A2</span>);</span><br></pre></td></tr></table></figure><h4 id="混合类型">混合类型</h4><p>一个对象即可以同时作为函数和对象使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="comment">// as a function</span></span><br><span class="line">    (<span class="attr">start</span>: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// as a object</span></span><br><span class="line">    <span class="attr">interval</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">reset</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCounter</span>(<span class="params"></span>): <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;<span class="title class_">Counter</span>&gt;<span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) &#123; &#125;;</span><br><span class="line">    counter.<span class="property">interval</span> = <span class="number">123</span>;</span><br><span class="line">    counter.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">getCounter</span>();</span><br><span class="line"><span class="title function_">c</span>(<span class="number">10</span>);</span><br><span class="line">c.<span class="title function_">reset</span>();</span><br><span class="line">c.<span class="property">interval</span> = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h4 id="接口继承类">接口继承类</h4><p>当使用接口<code>A</code>去继承类<code>B</code>时，它继承类<code>B</code>的所有成员但不包括实现。所以某个类想要实现这个接口<code>A</code>，这个类必须是类<code>B</code>本身或者是类<code>B</code>的子类，否则它不能拥有接口<code>A</code>中的<code>private</code>和<code>protect</code>成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">state</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SelectableControl</span> <span class="keyword">extends</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: Property &#x27;state&#x27; is missing in type &#x27;Image&#x27;.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类">4 类</h3><p>1、类型兼容：TypeScript使用的是结构性类型系统，当比较两种不同的类型时，并不在乎它们从何处而来，如果所有的成员的类型都是兼容的，我们认为它们的类型是兼容的。但是对于带有<code>private</code>或者<code>protected</code>成员的类型时，就需要<code>private</code>和<code>protect</code>成员来自于同一处声明时，才认为这两个类型是兼容的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> name : <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;<span class="variable language_">super</span>();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> name : <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constuctor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line"></span><br><span class="line">a = b; <span class="comment">// OK</span></span><br><span class="line">a = c; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>2、参数属性：在构造函数中使用访问限定符修饰参数，使类的属性的声明和赋值合并到一处</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Per</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> name : <span class="built_in">string</span></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、存取器</p><p>TypeScript支持通过getter和setter来截获对对象成员的访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> _name : <span class="built_in">string</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() : <span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">newName : <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getter和setter是会在访问相关属性时自动调用的，而不需要显式调用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">a.<span class="property">_name</span> = <span class="string">&quot;zhhc&quot;</span>; <span class="comment">// 执行 setter 函数</span></span><br><span class="line"><span class="title function_">console</span>(a.<span class="property">_name</span>); <span class="comment">// 执行 getter 函数</span></span><br></pre></td></tr></table></figure><p>4、其他</p><p>抽象类、继承、访问修饰符</p><p>5、高级技巧</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> msg = <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">    greeting : <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">greeting</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">greeting</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Greet</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">GreetMaker</span> : <span class="keyword">typeof</span> <span class="title class_">Greet</span> = <span class="title class_">Greet</span>; <span class="comment">// GreetMaker拥有了Greet类的静态部分（构造函数和所有静态变量）</span></span><br></pre></td></tr></table></figure><h3 id="函数">5 函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// named function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// anonymous function</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型">类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) : <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) : <span class="built_in">number</span>&#123;</span><br><span class="line">    retunrn x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = </span><br><span class="line">    <span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) : <span class="built_in">number</span> &#123; <span class="keyword">return</span> x + y; &#125;</span><br></pre></td></tr></table></figure><h4 id="可选参数">可选参数</h4><p>注意：可变参数放最后</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>) : <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(z)&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认参数">默认参数</h4><p>1、默认参数可以放在必须参数的最后面，该参数可以省略</p><p>2、默认参数也可以放在必须参数的最前面，该参数不能省略，需要传递<code>undefined</code>获得这个默认值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y = <span class="number">10</span></span>) : <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x = <span class="number">10</span>, y: <span class="built_in">number</span></span>) : <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">add</span>(<span class="literal">undefined</span>, <span class="number">2</span>); <span class="comment">// OK =&gt; 12</span></span><br></pre></td></tr></table></figure><h4 id="剩余参数">剩余参数</h4><p>剩余参数肯定是需要放在参数列表的最后</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, ...nums: <span class="built_in">number</span>[]</span>) : <span class="built_in">number</span>&#123;</span><br><span class="line">    int sum = x + y;</span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this">this</h4><p>this是JS中的一个难点。在JavaScript中，<strong><code>this</code>的值在调用时才会确定，</strong>这导致了this值会随着调用上下文的改变而改变。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> per = &#123;</span><br><span class="line">    name : <span class="string">&quot;zhhc&quot;</span>,</span><br><span class="line">    age : <span class="number">21</span>,</span><br><span class="line">    hello : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            msg = <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;, &quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;years old!&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Hello</span> = per.<span class="title function_">hello</span>();</span><br><span class="line"><span class="keyword">let</span> message = <span class="title class_">Hello</span>(); <span class="comment">// this =&gt; window</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br></pre></td></tr></table></figure><p>解决方法是使用ES6的一个新特性，箭头函数。在箭头函数中，<code>this</code>的值在创建时就确定下来了，箭头函数不会创建自己的<code>this</code>，它只会从自己的作用域链的上一层继承<code>this</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> per = &#123;</span><br><span class="line">    name : <span class="string">&quot;zhhc&quot;</span>,</span><br><span class="line">    age : <span class="number">21</span>,</span><br><span class="line">    hello : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;, &quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;years old!&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Hello</span> = per.<span class="title function_">hello</span>();</span><br><span class="line"><span class="keyword">let</span> message = <span class="title class_">Hello</span>(); <span class="comment">// this =&gt; per</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br></pre></td></tr></table></figure><h4 id="this参数">this参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="attr">this</span>: <span class="title class_">Person</span>): <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> per : <span class="title class_">Person</span> = &#123;</span><br><span class="line">    name : <span class="string">&quot;zhhc&quot;</span>,</span><br><span class="line">    age : <span class="number">21</span>,</span><br><span class="line">    hello : <span class="keyword">function</span>(<span class="params"><span class="variable language_">this</span>: Person</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;, &quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;years old!&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Hello</span> = per.<span class="title function_">hello</span>();</span><br><span class="line"><span class="keyword">let</span> message = <span class="title class_">Hello</span>(); <span class="comment">// this =&gt; per</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br></pre></td></tr></table></figure><p>明确地告诉<code>typescript</code>，<code>this</code>的类型是<code>Person</code>，而不是<code>any</code></p><h4 id="其他">其他</h4><p>函数重载</p><h3 id="泛型">6 泛型</h3><p>泛型总的来说和Java的比较类似。</p><p>1、泛型函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(arg : T) : T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、泛型接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericFunc</span>&lt;T&gt;&#123;</span><br><span class="line">    (<span class="attr">arg</span>: T) : T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn : <span class="title class_">GenericFunc</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">function</span>(<span class="params">arg : <span class="built_in">number</span></span>)&#123; <span class="keyword">return</span> <span class="number">2</span> * arg; &#125;</span><br></pre></td></tr></table></figure><p>3、泛型类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calc</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、泛型约束</p><p>由于泛型参数是针对所有类型，就会导致不能使用一些只有某些类型才具备的属性，例如<code>length</code>，解决方法就是加上泛型约束，对泛型参数加上一定的限制。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getLen&lt;T <span class="keyword">extends</span> &#123;<span class="attr">length</span>: <span class="built_in">number</span>&#125;&gt;(<span class="attr">arg</span>: T) : T&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理-Lab1</title>
      <link href="/2022/11/10/compilation-principle-lab1/"/>
      <url>/2022/11/10/compilation-principle-lab1/</url>
      
        <content type="html"><![CDATA[<h2 id="一实验思路">一、实验思路</h2><p>本次实验主要是写词法分析器，对语法没有要求，所以在<code>.g4</code>文件中只要写对应的词法即可。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221110105750227.png" /></p><p>然后是在<code>Main</code>函数中处理逻辑，相应的代码在手册中都已给出，主要需要实现是</p><ol type="1"><li>自己的<code>MyErrorListener</code></li><li>处理<code>tokens</code>的输出</li></ol><h3 id="myerrorlistener"><code>MyErrorListener</code></h3><p>首先需要知道代码是如何调用这个类的，所以我在实现的时候先将<code>BaseErrorListener</code>中的函数全部拷贝到<code>MyErrorListener</code>中，然后对每个函数增加一个<code>System.out.println(...)</code>，这样就可以知道在出现错误是会调用哪一个函数，最后发现是<code>syntaxError</code>函数，然后就可以去<code>Lexer</code>类中找到对应调用位置，查看是如何调用这个函数，最后编写这个函数。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221110110552598.png" /></p><h3 id="tokens输出"><code>tokens</code>输出</h3><p>首先确定<code>getAllTokens</code>函数返回的类型=&gt;<code>List&lt;? extends Token&gt;</code></p><p>在遍历<code>token</code>列表时调用<code>Token</code>类中对应函数来获取行号、类型等相关信息，再做输出。</p><blockquote><p>注意：出现错误时，只输出错误信息。</p></blockquote><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221110110925468.png" /></p><h2 id="二碰到的问题">二、碰到的问题</h2><h3 id="输出格式">1、输出格式</h3><p>注意输出格式要严格按照手册要求。</p><h3 id="integr_const的处理">2、<code>INTEGR_CONST</code>的处理</h3><p>注意八进制数和十六进制数的处理，输出<code>token</code>时是需要输出其十进制值。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pointer networks</title>
      <link href="/2022/11/07/pointer-networks/"/>
      <url>/2022/11/07/pointer-networks/</url>
      
        <content type="html"><![CDATA[<p><a href="https://arxiv.org/abs/1506.03134">PointerNetworks</a>提出了一种新的 neuralarchitecture，可以解决输出序列的大小随着输入序列的大小而变化的问题。文章开头讲到，传统的seq2seq模型以及AttentionMechanism，都只能处理固定size的输入序列。下面主要围绕这PointerNetwork展开学习。</p><p>首先需要回顾 seq2seq 模型 和 Attention 机制</p><h2 id="seq2seq-model">1 Seq2Seq Model</h2><p>传统的 seq2seq model 是由两个 RNN 构成，一个作为 Encoder ，另一个作为Decoder。在输入 input sequence后，由Encoder进行处理，形成一个 EncoderVector 送到 Decoder，由 Decoder 产生最终结果。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221115155058693.png" /></p><blockquote><p><ahref="https://towardsdatascience.com/understanding-encoder-decoder-sequence-to-sequence-model-679e04af4346">UnderstandingEncoder-Decoder Sequence to Sequence Model</a></p></blockquote><ol type="1"><li>Encoder 部分由 若干个 RNN 单元构成，每个单元接受前一个单元的 hiddenstate 和当前 input sequence 中的输入元素，生成新的 hidden state并且向前传递。<spanclass="math inline">\(h_{i}\)</span>表示前面所有输入信息的 hiddenstate，计算公式为 <span class="math inline">\(h_{t} = f(W^{hh}h_{t-1} +W^{hx}x_{t})\)</span></li><li>Encoder Vector是Encoder部分的输出，也是最后一个 hiddenstate，并作为Decoder部分的初始hidden state输入Decoder。</li><li>Decoder 部分同样由若干个 RNN 单元构成，每个单元接受前一个单元的hidden state，生成当前状态下的 hidden state，并预测当前的输出。hiddenstate的公式为：<span class="math inline">\(h_{t} =f(W^{hh}h_{t-1})\)</span>，预测输出的公式为：<spanclass="math inline">\(y_{t} = softmax(W^{s}h_{t})\)</span></li></ol><p>seq2seq模型的一个很重要的好处在于 input sequence 和 output sequence的大小可以不一致。</p><p>但是seq2seq不能处理 output dictionary的大小会发生变化的任务，因为seq2seq处理一项特定的任务时，其 outputdictionary 是不会发生变化的，是一个相对固定的域，但是在<ahref="https://arxiv.org/abs/1506.03134">PointerNetworks</a>文章中所提到的闭包问题等组合相关问题，它们的 outputdictionary 是和 input sequence 密切相关的。比如，给定10个点 {<spanclass="math inline">\(P_{1}, P_{2}, ...,P_{10}\)</span>}，要找到一个闭包，那结果肯定是这10个点的子集；如果换10个点，那结果就应该是新的10个点的子集。</p><blockquote><p><ahref="https://kierszbaumsamuel.medium.com/pointer-networks-what-are-they-c3cb68fae076">Pointernetworks : What are they?</a></p></blockquote><h2 id="with-attention">2 with Attention</h2><p>上面提到了，seq2seq模型的Encoder部分将inputsequence转换成一个vector，也叫context，Decoder根据这个context做输出预测。这样的话，这个contextvector就成为模型性能的瓶颈了，模型输出结果的正确性取决于这个contextvector能多好地表达input sequence。</p><p>引入Attention机制，使得模型专注在input sequence的相关部分。</p><p>Attention机制主要在两个地方做了改进</p><ol type="1"><li><p>给Decoder部分传递<strong>所有的 hidden state</strong>，而不是一个context vector。</p></li><li><p>在Decoder的每一步，为所有的 hidden state 打分，用 softmax后的分数乘上对应的 hidden state，然后加和形成<strong>这一步的 contextvector</strong>。之后，得到的 context vector 和 Decoder hidden state做连接，得到新的 vector 传递给 <strong>feedforward neuralnetwork</strong>，最后得到该步的输出。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221115173050556.png" /></p></li></ol><p><strong>完整步骤</strong></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221115190841720.png" /></p><blockquote><p><ahref="http://jalammar.github.io/visualizing-neural-machine-translation-mechanics-of-seq2seq-models-with-attention/">VisualizingA Neural Machine Translation Model (Mechanics of Seq2seq Models WithAttention)</a></p></blockquote><p>然后我们看看论文中对于Attention机制给的公式</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221116134655019.png" /></p><ol type="1"><li>第①个公式相当于就是上面说的打分，得到的<spanclass="math inline">\(u_{j}^{i}\)</span>表示的是在 time-step 'i'时，对Encoder的第 j 个 hidden state 的打分。</li><li>第②个公式：使用 <span class="math inline">\(softmax\)</span>函数对打分进行处理。</li><li>第③个公式：将 <span class="math inline">\(softmax\)</span> 后的分数<span class="math inline">\(\times\)</span> Encoder的对应 hiddenstate，并加和算出这一步的 context vector。</li></ol><h2 id="pointer-networks">3 Pointer Networks</h2><p>而 Pointer Network 所做的改变就是，<strong>在 <spanclass="math inline">\(softmax\)</span> 函数处理完打分后，选择其中最大权重 的元素直接作为该步的输出</strong>。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221116135652884.png" /></p><p>如图，第一个时间步的输出是 "1"，那么在下一个时间步，输入<spanclass="math inline">\([x_1,y_1]\)</span>的相应token和上一个时间步的hidden state 会被传递给网络以计算当前的 hidden state。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-note-imgs/image-20221116141433610.png" /></p><p>这样就使得输出序列完全取决于输入序列，所以可以很好适应输入序列大小的变化。</p><h2 id="ptr的应用">4 Ptr的应用</h2><h3 id="abstractive-text-summarization">abstractive textsummarization</h3><p>首先<code>text summarization</code>分为<code>extractive</code>和<code>abstractive</code>两种，<code>extractive</code>是指通过选择和重组原文中的句子或短语形成的<code>summarization</code>，而<code>abstractive</code>是指更高级的概括，会产生全新的词语，像人写<code>abstract</code>那样。</p><p><a href="https://arxiv.org/abs/1704.04368">Get To The Point:Summarization with Pointer-GeneratorNetworks</a>介绍了一种<code>hybrid pointer-generator network</code>+<code>coverage mechanism</code>的架构来处理这一任务，可以很好地解决：①不能准确再现细节；②不能处理超出词汇表以外的单词；③出现重复。其中<code>hybrid pointer-generator network</code>主要解决①②，而<code>coverage mechanism</code>解决③。</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221118003614644.png" /></p><p>上图主要是<code>hybrid pointer-generator network</code>的结构。之所以是<code>hybrid</code>，是因为这里不是单纯使用<code>pointer</code>，而是将<code>pointer</code>和原先<code>seq2seq-with-attention</code>结合起来的。从图中我们可看到有两个<code>distribution</code>，一个是<code>attention distribution</code>，它就是<code>pointer network</code>中的<code>pointer</code>，反应的是<code>source text</code>中的分布；另一个是<code>vocabulary distribution</code>，这个就是正常<code>seq2seq</code>模型会产生的针对<code>output dictionary</code>的分布。这两个分布是通过<spanclass="math inline">\(p_{gen}\)</span>结合起来的，最后形成一个总的<code>distribution</code>，由此产生结果。</p><p>而<code>coverage mechanism</code>则是插入在产生<code>attention distribution</code>的步骤中，因为它是用来反映<code>source text</code>中单词在结果中的覆盖程度，通过将它加入<code>attention distribution</code>的计算中，起到一个反馈的作用，从而有效减少重复问题。（下式红框部分就是<code>coverage vector</code>作为额外输入传递给<code>attention</code>机制的计算中）</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221118004630172.png" /></p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab2 System Call</title>
      <link href="/2022/11/06/6.S081-lab2-syscall/"/>
      <url>/2022/11/06/6.S081-lab2-syscall/</url>
      
        <content type="html"><![CDATA[<h2 id="preview">1. Preview</h2><h3 id="xv6-book-chap2">1.1 xv6-book Chap2</h3><p>xv6-book的第二章和lecture3的内容类似，主要介绍了操作系统的组织结构，从物理资源的抽象、用户态/内核态、系统调用、微内核/宏内核以及代码层面展开</p><p>xv6-book的4.3、4.4节讲的是如何进行系统调用</p><h3 id="code">1.2 code</h3><p>了解xv6启动过程</p><p><code>_entry.S</code>中将<code>stack0+4096</code>赋给栈指针寄存器<code>sp</code>，使得其指向栈顶，然后<code>call start</code></p><p><code>start</code> =&gt; <code>main</code> =&gt;<code>userinit</code> =&gt; <code>initcode.S</code> =&gt;<code>init.c</code></p><h2 id="system-call-tracing">2 System call tracing</h2><p><code>trace</code>是一个工具，能够记录指定的系统调用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">trace 32 grep hello README</span></span><br><span class="line">3: syscall read -&gt; 1023</span><br><span class="line">3: syscall read -&gt; 966</span><br><span class="line">3: syscall read -&gt; 70</span><br><span class="line">3: syscall read -&gt; 0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令的格式</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">trace [MASK] [OPTIONS...] <span class="comment"># 其中[MASK]是一个数字n; 如果 (n &gt;&gt; i) &amp; 1 == 1 表示i号系统调用需要trace</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出的形式</span></span><br><span class="line">[pid]: syscall &lt;name&gt; -&gt; &lt;return_value&gt;</span><br></pre></td></tr></table></figure><p>首先需要明确的是<code>trace</code>也是一个系统调用，所以就需要大概明白从用户态调用<code>trace</code>工具到内核调用对应的系统调用的过程。</p><p>根据手册的指示大概能够推测出来</p><p>1、在命令行中输入：<code>trace 32 grep hello README</code>后，实际上是执行 /user/trace.c 文件。过程就是 先执行 <code>trace</code>函数，然后再执行后面的命令。</p><p>2、这个 trace 函数是需要在 /user/user.h文件中定义原型的，之后好像就找不到对应的实现了。其实之后的实现是在内核态了，需要先陷入内核，手册中说要在/user/usys.pl 中定义一个 stub: <code>entry("trace")</code>，这个stub会在user/usys.S 生成一段汇编代码：进行系统调用。</p><p>3、其中的<code>ecall</code>指令就会调用 /kernel/syscall.c 中的<code>syscall</code> 函数，执行对应的系统调用函数 sys_<name></p><p>然后就可以开始根据手册的提示写代码了...</p><ol type="1"><li>在 kernel/sysproc.c 中增加 sys_trace() 函数</li><li>要在 proc 结构体中增加一个新的变量存储 trace 的参数</li><li>修改 syscall() 函数来打印 trace 输出</li><li>修改 fork() 函数使得 trace 的参数从父进程拷贝到子进程</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 kernel/sysproc.c 中增加 sys_trace 函数</span></span><br><span class="line">uint64</span><br><span class="line"><span class="title function_">sys_trace</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="keyword">if</span>( argint(<span class="number">0</span>, &amp;n) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// parse the `n` to get which sys_call need to be traced</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span>* <span class="title">p</span> =</span> myproc();</span><br><span class="line">  p-&gt;trace_mask = n;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改 kernel/syscall.c 中的 syscall 函数</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">syscall</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line"></span><br><span class="line">  num = p-&gt;trapframe-&gt;a7; <span class="comment">// a7: sys_call number</span></span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = syscalls[num]();</span><br><span class="line">    <span class="comment">// add the trace check</span></span><br><span class="line">    <span class="keyword">if</span>( (( p-&gt;trace_mask &gt;&gt; num ) &amp; <span class="number">1</span>) == <span class="number">1</span> )&#123; <span class="comment">// need to trace</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d: syscall %s -&gt; %d\n&quot;</span>, p-&gt;pid, sys_call_names[num], p-&gt;trapframe-&gt;a0);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s: unknown sys call %d\n&quot;</span>,</span><br><span class="line">            p-&gt;pid, p-&gt;name, num);</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><blockquote><p>注意第四个测试有可能会超时，需要修改 gradelib.py 文件的第 428 行扩大时间限制</p></blockquote><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212319005.png" /></p><h2 id="sysinfo">3 Sysinfo</h2><p>还是实现一个系统调用，在内核填上 <code>struct sysinfo</code>的两个字段，并拷贝回用户空间，主要过程：</p><ol type="1"><li>像<code>trace</code>那样，在对应位置增加系统调用所需的相关信息。</li><li>在 <code>kernel/proc.c</code> 中增加一个统计<code>not UNUSED process</code> 的函数</li><li>在 <code>kernel/kalloc.c</code> 中增加一个统计<code>free memory</code> 的函数</li><li>理解 <code>copyout</code> 函数，在系统调用中将<code>struct sysinfo</code> 从内核空间 拷贝入 用户空间</li></ol><p>核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// need to copy the sysinfo struct from kernel space to user space</span></span><br><span class="line">uint64</span><br><span class="line"><span class="title function_">sys_sysinfo</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  uint64 addr;</span><br><span class="line">  <span class="keyword">if</span>( argaddr(<span class="number">0</span>, &amp;addr) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span> <span class="title">si</span>;</span></span><br><span class="line">  si.nproc = notunusedproc();</span><br><span class="line">  si.freemem = freemem();</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span>* <span class="title">p</span> =</span> myproc();</span><br><span class="line">  <span class="keyword">if</span>( copyout(p-&gt;pagetable, addr, (<span class="type">char</span> *)(&amp;(si)), <span class="keyword">sizeof</span>(si)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计 不是 UNUSED 的 进程数量，只需要遍历 proc 数组即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uint64</span><br><span class="line"><span class="title function_">notunusedproc</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; NPROC; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(proc[i].state != UNUSED)&#123;</span><br><span class="line">      num++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计 free memory，需要读一下 <code>kalloc.c</code> 的代码，会发现 在<code>kalloc</code> 函数中，如果 <code>kmem.freelist</code>不为空的话就会分配一个 <code>PGSIZE</code> 的内存空间，所以只需要统计<code>kmem.freelist</code> 链表长度即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uint64</span><br><span class="line"><span class="title function_">freemem</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">run</span>* <span class="title">r</span> =</span> kmem.freelist;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(r)&#123;</span><br><span class="line">    r = r-&gt;next;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num * PGSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212340499.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 6.S081 OS Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.S081 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab1 Utilities</title>
      <link href="/2022/11/06/6.S081-lab1-utils/"/>
      <url>/2022/11/06/6.S081-lab1-utils/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建lab环境">1、搭建lab环境</h3><h4 id="安装工具包">1、安装工具包</h4><p>使用的是之前跑在 VirtualBox 上的 Ubuntu 虚拟机 版本 20.04.5 TLS</p><p>然后按照<ahref="https://pdos.csail.mit.edu/6.828/2021/tools.html">官网</a>上的指令下载对应的工具包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu</span></span><br></pre></td></tr></table></figure><p>完成之后可以测试一下</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212121280.png" /></p><p>然后到<ahref="https://pdos.csail.mit.edu/6.828/2021/labs/util.html">lab页</a>clone相应的代码</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212134633.png" /></p><p>最后执行 <code>make qemu</code>，出现</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212150813.png" /></p><p>即为搭建成功</p><h4 id="gdb调试过程">2、gdb调试过程</h4><p>1、打开两个cmd窗口</p><p>2、其中一个输入：make qemu-gdb</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212206029.png" /></p><p>3、另一个输入：gdb-multiarch kernel/kernel</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212223488.png" /></p><p>4、可以使用gdb命令进行调试了</p><h3 id="book-riscv-chapter-one">2、book-riscv Chapter One</h3><h3 id="sleepeasy">3、sleep（easy）</h3><p>这个函数比较简单，使用系统调用 sleep</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;too few arguments...&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pingpongeasy">3、pingpong（easy）</h3><p>这个函数的实现需要重点理解<code>pipe</code>函数（xv6-book的ChapterOne）</p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212234931.png" /></p><p>感性的理解，<code>pipe</code>就是创建了一个管道，使得两个进程之间可以通信（互相读取到对方写的数据）</p><p>实际上，<code>pipe</code>在传入的数组<code>p</code>里存放一个<code>read file descriptor</code>(<code>p[0]</code>)和<code>write file descriptor</code>(<code>p[1]</code>)</p><p>就像管道的一头一尾，从"头部"写入数据，可以从"尾部"读取数据</p><p>而由于<code>fork</code>创建的子进程也会带着这个数组<code>p</code>，从而可以实现父子进程的通信</p><p>（具体细节参见<ahref="https://pdos.csail.mit.edu/6.828/2021/xv6/book-riscv-rev2.pdf">xv6-book</a>的相应部分）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> </span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> p[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> * parent_msg = <span class="string">&quot;p&quot;</span>;</span><br><span class="line">    <span class="type">char</span> * child_msg  = <span class="string">&quot;c&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    pipe(p);</span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d: received ping\n&quot;</span>, getpid());</span><br><span class="line">        close(p[<span class="number">0</span>]);</span><br><span class="line">        write(p[<span class="number">1</span>], child_msg, <span class="number">1</span>);</span><br><span class="line">        close(p[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        write(p[<span class="number">1</span>], parent_msg, <span class="number">1</span>);</span><br><span class="line">        close(p[<span class="number">1</span>]);</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">        read(p[<span class="number">0</span>], buffer, <span class="number">1</span>);</span><br><span class="line">        close(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d: received pong\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="primesmoderatehard">4、primes（moderate/hard）</h3><p><code>primes</code>函数是借助<code>pipeline</code>实现了一个素数筛。</p><p>需要好好理解下面<ahref="https://swtch.com/~rsc/thread/">这幅图</a>和上面的<code>pipe</code></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212246450.png" /></p><p>思想：在每个进程中，选取一个素数<code>N</code>（就是通过管道读到的第一个数），然后把所有读到的数中不能被整除<code>N</code>的数继续通过管道写进下一个进程中，而把可以整除的数<code>drop</code>掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> * p)</span>&#123;</span><br><span class="line">    <span class="type">int</span> p1[<span class="number">2</span>];</span><br><span class="line">    p1[<span class="number">0</span>] = p[<span class="number">0</span>]; p1[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    pipe(p); <span class="comment">// create the new pipeline connect the it and the it&#x27;s child</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> num[<span class="number">1</span>];</span><br><span class="line">    close(p1[<span class="number">1</span>]); <span class="comment">// close the old write</span></span><br><span class="line">    <span class="keyword">if</span>( read(p1[<span class="number">0</span>], num, <span class="number">1</span>) == <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="type">int</span> prime = num[<span class="number">0</span>]; <span class="comment">// the first number is the prime</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;prime %d\n&quot;</span>, prime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">            func(p); <span class="comment">// recursion</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            close(p[<span class="number">0</span>]); <span class="comment">// close the read</span></span><br><span class="line">            <span class="keyword">while</span> ( read(p1[<span class="number">0</span>], num, <span class="number">1</span>) == <span class="number">1</span> )&#123;</span><br><span class="line">                <span class="type">int</span> n = num[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span>(n % prime != <span class="number">0</span>)&#123;</span><br><span class="line">                    write(p[<span class="number">1</span>], num, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            close(p1[<span class="number">0</span>]);</span><br><span class="line">            close(p[<span class="number">1</span>]);</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// no data avaliable</span></span><br><span class="line">        close(p[<span class="number">0</span>]);</span><br><span class="line">        close(p[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> </span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[<span class="number">2</span>];</span><br><span class="line">    pipe(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">      func(p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        close(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">char</span> num[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">35</span>; i++)&#123;</span><br><span class="line">            num[<span class="number">0</span>] = i;</span><br><span class="line">            write(p[<span class="number">1</span>], num, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        close(p[<span class="number">1</span>]);</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="findmoderate">5、find（moderate）</h3><p><code>find</code>函数的实现需要先去学习一下<code>ls</code>函数的实现，主要是学习如何读取目录的，读懂了之后难度不是很大，需要注意一些细节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Look at user/ls.c to see how to read directories.</span></span><br><span class="line">    <span class="comment">// Use recursion to allow find to descend into sub-directories.</span></span><br><span class="line">    <span class="comment">// Don&#x27;t recurse into &quot;.&quot; and &quot;..&quot;.</span></span><br><span class="line">    <span class="comment">// Changes to the file system persist across runs of qemu; to get a clean file system run make clean and then make qemu.</span></span><br><span class="line">    <span class="comment">// You&#x27;ll need to use C strings. Have a look at K&amp;R (the C book), for example Section 5.5.</span></span><br><span class="line">    <span class="comment">// Note that == does not compare strings like in Python. Use strcmp() instead.</span></span><br><span class="line">    <span class="comment">// Add the program to UPROGS in Makefile. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">find</span><span class="params">(<span class="type">char</span> *dir, <span class="type">char</span> *file)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> <span class="title">de</span>;</span></span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">512</span>], *p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// put the dir_name into the buf</span></span><br><span class="line">    <span class="comment">// buf : dir_name/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf, dir);</span><br><span class="line">    p = buf + <span class="built_in">strlen</span>(buf);</span><br><span class="line">    *p++ = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( (fd = open(dir, <span class="number">0</span>)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot open %s\n&quot;</span>, dir);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( fstat(fd, &amp;st) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot stat %s\n&quot;</span>, dir);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(st.type != T_DIR)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: %s is not a dir\n&quot;</span>, dir);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// read the every file or dir in the `dir` sequentially</span></span><br><span class="line">    <span class="keyword">while</span>( read(fd, &amp;de, <span class="keyword">sizeof</span>(de)) == <span class="keyword">sizeof</span>(de))&#123;</span><br><span class="line">        <span class="keyword">if</span>(de.inum == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> *name = de.name;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(name, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(name, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>) <span class="keyword">continue</span>; <span class="comment">// not consider the . and ..</span></span><br><span class="line"></span><br><span class="line">        memmove(p, name, DIRSIZ);</span><br><span class="line">        p[DIRSIZ] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stat(buf, &amp;st) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;find: cannot stat %s\n&quot;</span>, name);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(st.type == T_DIR)&#123;</span><br><span class="line">            find(buf, file);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(name, file) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find &lt;dir_name&gt; &lt;file_name&gt;</span></span><br><span class="line"><span class="comment">// find all the &lt;file_name&gt; in the &lt;dir_name&gt;</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">1</span>, <span class="string">&quot;the arguments is too few...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xargsmoderate">6、xargs（moderate）</h3><p>首先需要知道这个命令是干什么的。</p><blockquote><p>Run COMMAND with arguments INITIAL-ARGS and more arguments read frominput.</p></blockquote><p>总的来说就是<strong>用来跑其他命令的，而参数从输入中读取</strong>。</p><p>从实验手册上的要求和例子来看，实现的是一个只带<code>-n</code>参数且参数值只为1的<code>xargs</code>命令</p><p>这里的<code>-n</code>的意思是执行命令最大能够从输入读取的参数个数，如果<code>-n 1</code>就意味着只能从输入读取一个参数执行命令，所以就意味着会执行多次命令（需要把读取的参数用完）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> hello too | xargs <span class="built_in">echo</span> <span class="built_in">bye</span></span></span><br><span class="line">bye hello too</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;1\n2&quot;</span> | xargs -n 1 <span class="built_in">echo</span> line</span></span><br><span class="line">line 1</span><br><span class="line">line 2</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><p>理解了<code>xargs</code>的作用和实现的细节，就可以开始写代码了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">author: zhhc</span></span><br><span class="line"><span class="comment">date:   2022-10-09</span></span><br><span class="line"><span class="comment">time-spent: about 3 hours</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> seq_num = MAXARG;  <span class="comment">// the max_args per cmd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exec1</span><span class="params">(<span class="type">char</span> **argv)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">        exec(argv[<span class="number">0</span>], argv);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;too few arguments...&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">512</span>]; <span class="comment">// store the input from the previous cmd</span></span><br><span class="line">    <span class="type">int</span> read_n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> read_total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// attention: if exits &#x27;\n&#x27;, just a read can not read all</span></span><br><span class="line">    <span class="keyword">while</span>( (read_n = read(<span class="number">0</span>, buf + read_total, <span class="number">512</span>)) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        read_total += read_n; <span class="comment">// stat the number of input</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = read_total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch all the &#x27;\n&#x27; to &#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i] == <span class="string">&#x27;\n&#x27;</span>) buf[i] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cmd_ptr = <span class="number">1</span>; <span class="comment">// the ptr to cmd</span></span><br><span class="line">    <span class="type">bool</span> is_set_n = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set the max args</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;-n&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        is_set_n = <span class="literal">true</span>;</span><br><span class="line">        cmd_ptr = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* cmd_argv[MAXARG]; <span class="comment">// the cmd argv</span></span><br><span class="line">    <span class="comment">// put the arg into the cmd_argv</span></span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cmd_ptr; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">char</span> *arg = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(argv[i])+<span class="number">1</span>); <span class="comment">// attention: must use malloc, put the data in heap</span></span><br><span class="line">        <span class="comment">// if use char arg[MAXARG] will cause the error</span></span><br><span class="line">        <span class="built_in">strcpy</span>(arg, argv[i]);</span><br><span class="line">        cmd_argv[idx] = arg;</span><br><span class="line">        idx ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_set_n)&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> arg[MAXARG];</span><br><span class="line">        <span class="built_in">memset</span>(arg, <span class="number">0</span>, MAXARG); <span class="comment">// clear the space</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[i] == <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">// can spilt out a arg</span></span><br><span class="line"></span><br><span class="line">                arg[index++] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                cmd_argv[idx++] = arg;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// run</span></span><br><span class="line">                exec1(cmd_argv);</span><br><span class="line"></span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">memset</span>(arg, <span class="number">0</span>, MAXARG); <span class="comment">// clear the space</span></span><br><span class="line"></span><br><span class="line">                idx --;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arg[index ++] = buf[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// should spilt the args with &#x27; &#x27;</span></span><br><span class="line">        <span class="comment">// and put them into cmd_argv sequentially</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="type">char</span>* add_arg = (<span class="type">char</span> *)<span class="built_in">malloc</span>(i - prev);</span><br><span class="line">                <span class="built_in">memcpy</span>(add_arg, buf+prev, i - prev);</span><br><span class="line">                prev = i+<span class="number">1</span>; <span class="comment">// attention</span></span><br><span class="line">                cmd_argv[idx++] = add_arg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exec1(cmd_argv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>记录一个小问题</p><p>发生在将argv里的参数拷贝到cmd_argv的过程中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="type">char</span> agr[<span class="number">32</span>]; <span class="comment">// 每次分配到的地址都是一样的！！！</span></span><br><span class="line">    cmd_argv[idx ++] = <span class="built_in">strcpy</span>(arg, argv[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组空间是分配在栈中的，而且一次迭代之后空间失效，再次分配时就会分配相同的地址空间，导致cmd_argv中的指针值都是一样的，然后strcpy就是在不断地改变那块地址中的内容。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 6.S081 OS Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.S081 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript</title>
      <link href="/2022/11/05/ECMAScript/"/>
      <url>/2022/11/05/ECMAScript/</url>
      
        <content type="html"><![CDATA[<h1 id="ecmascript">ECMAScript</h1><h2 id="概述">1 概述</h2><p>ECMA是一个组织，制定了一些标准，然后JS去实现这些标准。</p><p>ES2015兼容性：IE10+、Chrome、FireFox、移动端、NodeJS</p><p>由于兼容性问题，对于一些版本较低的设备，就需要使用一些方法使得ES6的代码可以运行起来</p><p>1、浏览器打开页面时，对ES6代码进行转换。</p><p>2、先将ES6代码编译为可以被低版本设备接收的代码，再拿去执行。</p><h2 id="letconst和块级作用域">2 let/const和块级作用域</h2><p>之前的JS中只有<code>var</code>可以声明变量，但是<code>var</code>存在一些问题：</p><ol type="1"><li>可以重复声明 =》混乱</li><li>无法限制修改 =》 想要声明常量全凭自觉</li><li>没有块级作用域（只有函数作用域）</li></ol><p>对于第3个问题，下面举一个例子说明</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i*i;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resluts = <span class="title function_">func</span>()</span><br><span class="line"><span class="keyword">var</span> f1 = results[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> f2 = resluts[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> f3 = resluts[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>(); <span class="comment">// 16</span></span><br><span class="line"><span class="title function_">f2</span>(); <span class="comment">// 16</span></span><br><span class="line"><span class="title function_">f3</span>(); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><p>这个现象就是由于<code>var</code>没有块级作用域引起的。由于函数内部都引用了变量<code>i</code>，但是函数并不是立刻执行的，等到<code>results[0]</code>需要返回的时候，<code>i</code>已经变成3了，所以都输出了<code>9</code>。</p><p>一种解决方法是使用闭包来解决，创建一个匿名函数并立刻执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>( </span><br><span class="line">            (<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> n * n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)(i)</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resluts = <span class="title function_">func</span>()</span><br><span class="line"><span class="keyword">var</span> f1 = results[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> f2 = resluts[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> f3 = resluts[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">f2</span>(); <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">f3</span>(); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></blockquote><p>ES6引入<code>let</code>和<code>const</code>关键字，可以有效解决上面三个问题。</p><ol type="1"><li>使用<code>let</code>和<code>const</code>声明变量，不能重复声明</li><li><code>const</code>声明常量，不能修改</li><li><code>let</code>和<code>const</code>都是块级作用域，要解决上面的问题，只要将<code>for(var i...)</code>改成<code>for(let i...)</code>即可。</li></ol><h2 id="解构赋值">3 解构赋值</h2><p>解构赋值是对赋值操作符的扩展，从字面意思上理解，就是把复杂对象拆分开给其他变量赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// a=1, b=2, c=3</span></span><br><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// a=1, b=[2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;x, y, z&#125; = &#123;<span class="attr">x</span>:<span class="string">&quot;x&quot;</span>, <span class="attr">y</span>:<span class="string">&quot;y&quot;</span>, <span class="attr">z</span>:<span class="string">&quot;z&quot;</span>&#125;; <span class="comment">// x=&quot;x&quot;, y=&quot;y&quot;, z=&quot;z&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划应用</title>
      <link href="/2022/10/31/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BA%94%E7%94%A8%E9%A2%98/"/>
      <url>/2022/10/31/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BA%94%E7%94%A8%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="一股票问题">一、股票问题(*)</h2><blockquote><p><ahref="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/">188.买卖股票的最佳时机 IV</a></p><p>给定一个整数数组 prices ，它的第 i 个元素 prices[i]是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p></blockquote><p>labuladong算法秘籍中使用了【三个<strong>状态</strong>】（三维dp数组）</p><ol type="1"><li>第几天</li><li>手中是否持有股票</li><li>最大交易限制（最大交易限制只在买入股票时减一）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i][j][k] 意味着在第i天，手中持有(j=1)或不持有(j=0)股票，最大交易限制为k情况下的最大利润</span></span><br></pre></td></tr></table></figure><p><strong>状态转移方程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>][k] = Math.max(</span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">0</span>][k],  <span class="comment">// 第i天 不买入不卖出: 第i-1天也没有股票，交易限制还是k</span></span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">1</span>][k]+prices[i-<span class="number">1</span>] <span class="comment">// 第i天 卖出: 第i-1天有股票，交易限制还是k</span></span><br><span class="line">);</span><br><span class="line">dp[i][<span class="number">1</span>][k] = Math.max(</span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">1</span>][k], <span class="comment">// 第i天 不买入不卖出: 第i-1天有股票，交易限制为k</span></span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">0</span>][k-<span class="number">1</span>]-prices[i-<span class="number">1</span>] <span class="comment">// 第i天 买入: 第i-1天没有股票，最大交易次数不能超过k-1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>base case</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = <span class="number">0</span>; dp[<span class="number">0</span>][<span class="number">1</span>][...] = Integer.MIN_VALUE;</span><br><span class="line">dp[...][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; dp[...][<span class="number">1</span>][<span class="number">0</span>] = Integer.MIN_VALUE;</span><br></pre></td></tr></table></figure><h2 id="二打劫家舍问题">二、打劫家舍问题</h2><blockquote><p><ahref="%5B198.%20打家劫舍%20-%20力扣（LeetCode）%5D(https://leetcode.cn/problems/house-robber/)">198.打劫家舍</a></p><p><a href="https://leetcode.cn/problems/house-robber-ii/">213. 打家劫舍II</a></p><p><a href="https://leetcode.cn/problems/house-robber-iii/">337.打家劫舍 III</a></p></blockquote><h3 id="打劫家舍">1、打劫家舍</h3><p>【状态】是 <u>抢劫第i家时能获得的最大金额</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态转移方程</span></span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">2</span>], dp[i-<span class="number">3</span>]) + nums[i];</span><br></pre></td></tr></table></figure><h3 id="打劫家舍ⅱ">2、打劫家舍Ⅱ</h3><blockquote><p>特别之处在于 nums 换成了环形数组</p></blockquote><p>应对策略也十分巧妙</p><p><span class="math inline">\(f([x_{1}, x_{2}, ... , x_{n}]) = max(f([x_{1}, x_{2}, ..., x_{n-1}]), f([x_{2}, ..., x_{n}]) )\)</span></p><p><u><strong>既然首尾相连了，那么肯定最多只能抢劫一家，把另外一家除去</strong></u>，就把环形数组又变成了普通数组了。</p><h3 id="打劫家舍ⅲ">3、打劫家舍Ⅲ</h3><blockquote><p>把家舍的形状变成了二叉树</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] res = dp(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(res[<span class="number">0</span>], res[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return &#123;x, y&#125; </span></span><br><span class="line">    <span class="comment">// x: 包括root节点的最高金额 </span></span><br><span class="line">    <span class="comment">// y: 不包含root节点的最高金额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] dp(TreeNode root)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] left = dp(root.left);</span><br><span class="line">        <span class="type">int</span>[] right = dp(root.right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> left[<span class="number">1</span>] + right[<span class="number">1</span>] + root.val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Math.max(left[<span class="number">1</span>], left[<span class="number">0</span>]) + Math.max(right[<span class="number">1</span>], right[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三博弈问题">三、博弈问题</h2><blockquote><p><a href="https://leetcode.cn/problems/predict-the-winner/">486.预测赢家</a></p></blockquote><p>最核心最关键的还是在【找状态】，理解！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种比较容易理解的，三维数组</span></span><br><span class="line"><span class="comment">// dp[i][j][0] 表示在[xi...xj]区间时，先手的最大得分</span></span><br><span class="line">dp[i][j][<span class="number">0</span>] = Math.max(nums[i]+dp[i+<span class="number">1</span>][j][<span class="number">1</span>], nums[j]+dp[i][j-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// [i...j] 先手可以选择i也可以选择j</span></span><br><span class="line"><span class="comment">// 选择i后，在[i+1...j]区间就变成了后手，就是dp[i+1][j][1]</span></span><br><span class="line"><span class="comment">// 选择j后，在[i...j+1]区间就变成了后手，就是dp[i][j-1][1]</span></span><br><span class="line"><span class="keyword">if</span> 先手选择了i: dp[i][j][<span class="number">1</span>] = dp[i+<span class="number">1</span>][j][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> 先手选择了j: dp[i][j][<span class="number">1</span>] = dp[i][j-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种稍微改进一点，二维数组</span></span><br><span class="line"><span class="comment">// dp[i][j][1] 表示在[xi...xj]区间时，先手的最大得分-后手的最大得分</span></span><br><span class="line">dp[i][j] = Math.max(nums[i] - dp[i+<span class="number">1</span>][j], nums[j] - dp[i][j-<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 在[i...j]先手做出选择后，就变成了后手，所以是&lt;减&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四扔鸡蛋">四、扔鸡蛋（***）</h2><blockquote><p><ahref="https://leetcode.cn/problems/super-egg-drop/">887.鸡蛋掉落</a></p><p>这道题理解上难度很高...</p></blockquote><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221104212852347.png" /></p><p>这里讲一个逆向思维。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] 表示有j个鸡蛋，可以操作i次，可以在最高dp[i][j]的建筑里保证找到f</span><br></pre></td></tr></table></figure><p>比如<code>dp[2][1]=2</code>，表示有1个鸡蛋，可以操作2次，可以在最高2楼的建筑里保证找到<code>f</code>。意思就是如果楼<code>&gt;=</code>3，就不能保证在1个鸡蛋2次操作的情况下找到f。这里的保证是指不管在什么情况下都可以成功找到f，而不是说有一定概率可以找到。很好理解，不管多高的楼层，即使给1个鸡蛋1次操作，也有一定概率可以找到f（第1层就碎了，所以<code>f=0</code>）</p><p>理解完状态之后，就需要找到状态转移方程。先给出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = <span class="number">1</span> + dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + dp[i][j-<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>这里应该是这道题最难理解的地方。</p><h2 id="五自由之路">五、自由之路</h2><blockquote><p><a href="https://leetcode.cn/problems/freedom-trail/">514.自由之路</a><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221109163239286.png" /></p></blockquote><p>这道题一眼看去和普通的动态规划没什么区别，<strong>给定两个字符串，求某个最值</strong>。</p><p>但是这里的<code>ring</code>是环形的，而且可以顺时针/逆时针旋转，就导致每次的局部最优可能得不到全局最优，有点像回溯算法，需要走到更后面才能知道这一次的选择是否是更优的。</p><p>所以需要在每一步都要列出所有情况，在最后再选出最小的。</p><p>可以这么定义<code>dp</code>数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] 表示 匹配key的第i个字符时 ring的第j个字符指向<span class="number">12</span>:<span class="number">00</span> (当然了ring的第j个字符和key的第i个字符是相同的) 所需要的最小步数</span><br></pre></td></tr></table></figure><p>状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = Math.min( dp[i-<span class="number">1</span>][k] + Math.min( Math.abs(j-k), n - Math.abs(j-k) ) ) k是ring中所有字符等于key[i-<span class="number">1</span>]的下标集合</span><br></pre></td></tr></table></figure><p>含义是：当用ring的第j个字符去匹配key的第i个字符时，所需要的最小步数应该这么求</p><p>列举出前一次匹配的所有情况<span class="math inline">\(dp[i-1][k], k\in[key的第i-1个字符在ring中的下标集合]\)</span>，计算从每一次的情况走到当前情况需要的更小的步数（因为可以顺时针转也可以逆时针转），最后取这些情况的最小值。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRotateSteps</span><span class="params">(String ring, String key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> ring.length(); <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> key.length();</span><br><span class="line">    <span class="comment">// 将ring中的字符转换为对应下标</span></span><br><span class="line">    List&lt;Integer&gt;[] char2idx = <span class="keyword">new</span> <span class="title class_">List</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">        char2idx[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        char2idx[ring.charAt(i) - <span class="string">&#x27;a&#x27;</span>].add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义并初始化dp数组</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) Arrays.fill(dp[i], <span class="number">0x3f3f3f</span>);</span><br><span class="line">    <span class="comment">// base case: dp[0][...]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i : char2idx[key.charAt(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">        dp[<span class="number">0</span>][i] = Math.min( i, m-i ) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递推过程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j : char2idx[key.charAt(i) - <span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k : char2idx[key.charAt(i-<span class="number">1</span>) - <span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">                dp[i][j] = Math.min(</span><br><span class="line">                    dp[i][j],</span><br><span class="line">                dp[i-<span class="number">1</span>][k] </span><br><span class="line">                    + Math.min( </span><br><span class="line">                    Math.abs(j-k),</span><br><span class="line">                        m-Math.abs(j-k)</span><br><span class="line">                      ) </span><br><span class="line">                    + <span class="number">1</span></span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(dp[n-<span class="number">1</span>]).min().getAsInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六k-站中转内最便宜的航班">六、K 站中转内最便宜的航班</h2><blockquote><p><ahref="https://leetcode.cn/problems/cheapest-flights-within-k-stops/">787.K站中转内最便宜的航班</a></p><p><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221112013321045.png" /></p><figure><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221112013403828.png"alt="image-20221112013403828" /><figcaption aria-hidden="true">image-20221112013403828</figcaption></figure></blockquote><p>这道题既可以使用Dijkstra算法，也可以使用动态规划算法来解决。</p><p>这道题的起点和终点是确定的，在状态转移过程中选定一个不变，将另一个作为状态，然后另外一个状态就是中转站数k(或者使用边数来表示)</p><p>这里将<code>src</code>固定，将终点和中转站数作为状态，可以写出如下转移方程</p><p><span class="math inline">\(price(k,dst) = min(price(k-1, v) +val(v,dst))\)</span><code>v</code>是距离<code>dst</code>还有一步的节点，<spanclass="math inline">\(val(v,dst)\)</span>指边的价值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="type">int</span>[]&gt;[] graph;</span><br><span class="line"><span class="type">int</span> <span class="variable">inf</span> <span class="operator">=</span> <span class="number">999999</span>;</span><br><span class="line"><span class="type">int</span> src;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCheapestPrice</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] flights, <span class="type">int</span> src, <span class="type">int</span> dst, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.src = src;</span><br><span class="line">    graph = <span class="keyword">new</span> <span class="title class_">List</span>[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) graph[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[] flight : flights)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> flight[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> flight[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> flight[<span class="number">2</span>];</span><br><span class="line">        graph[to].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;from, price&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[][] mem = <span class="keyword">new</span> <span class="title class_">int</span>[k+<span class="number">2</span>][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k+<span class="number">2</span>; i++) Arrays.fill(mem[i], inf);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> dp(dst, k+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans == inf ? -<span class="number">1</span> : ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> d, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d == src) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> inf;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(mem[k][d] != inf)&#123;</span><br><span class="line">        <span class="keyword">return</span> mem[k][d];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[] prev : graph[d])&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sub_ans</span> <span class="operator">=</span> dp(prev[<span class="number">0</span>], k-<span class="number">1</span>);</span><br><span class="line">        mem[k][d] = Math.min(mem[k][d], sub_ans + prev[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mem[k][d];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种更加简便的，去求所有从src开始走1步、2步、...、k+1步到达某节点的最小代价：使用<code>dp[i][j]</code>表示从<code>src</code>走<code>i</code>步到<code>j</code>节点所需要的最小代价。最后只要求<spanclass="math inline">\(min(dp[1][dst],dp[2][dst],...,dp[k+1][dst])\)</span>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCheapestPrice</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] flights, <span class="type">int</span> src, <span class="type">int</span> dst, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[k+<span class="number">2</span>][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= k+<span class="number">1</span>; i++) Arrays.fill(dp[i], <span class="number">999999</span>);</span><br><span class="line">    dp[<span class="number">0</span>][src] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= k+<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] flight : flights)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> flight[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> flight[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> flight[<span class="number">2</span>];</span><br><span class="line">            dp[i][to] = Math.min(dp[i][to], dp[i-<span class="number">1</span>][from]+price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">999999</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= k+<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res &gt; dp[i][dst])&#123;</span><br><span class="line">            res = dp[i][dst];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res == <span class="number">999999</span> ? -<span class="number">1</span> : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记6-图论</title>
      <link href="/2022/10/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B06%EF%BC%88%E5%9B%BE%E8%AE%BA%EF%BC%89/"/>
      <url>/2022/10/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B06%EF%BC%88%E5%9B%BE%E8%AE%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>##一、图论基础</p><h3 id="图的表示">1、图的表示</h3><p>图可以分为：</p><ul><li>有向无权图</li><li>有向有权图</li><li>无向无权图</li><li>无向有权图</li></ul><h4 id="邻接表">1.1、邻接表</h4><p>对于邻接表来说</p><ul><li><p>有向/无向：没有影响，在相应结点的邻居结点表中增减即可</p></li><li><p>有权/无权：对结构有一定影响。</p><p>有权：<code>List&lt;int[]&gt;[] graph</code>其中<code>List</code>中的<code>int[]</code>放两个值，一个是结点值，一个是权重</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt;[] graph; <span class="comment">// int[][] 结构也可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.length; i++)&#123; <span class="comment">// 遍历结点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; graph[i].length; j++)&#123; <span class="comment">// 遍历每个结点的邻居结点</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="邻接矩阵">1.2、邻接矩阵</h4><p>对于临界矩阵来说</p><ul><li>有向/无向：遍历矩阵的【右上角】和【全部】的区别</li><li>有权/无权：矩阵中的值是<code>0/int</code>和<code>0/1</code>的区别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] graph; <span class="comment">// n*n的矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 遍历起始节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++)&#123; <span class="comment">// 遍历终止结点</span></span><br><span class="line">        graph[i][j] <span class="comment">// 1表示存在从i结点到j结点的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图的遍历">2、图的遍历</h3><p>图的遍历一般程度上可以理解为多叉树的遍历，但是需要注意【环的存在】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> visited; <span class="comment">// 记录结点是否已经访问过</span></span><br><span class="line">List&lt;Integer&gt; path; <span class="comment">// 记录一条路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(Graph graph, <span class="type">int</span> s)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[s])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    path.add(s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> neighbor : graph.neighbors(s))&#123;</span><br><span class="line">        traversal(graph, neighbor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 回溯</span></span><br><span class="line">    path.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题">3、例题</h3><p>【797. 所有可能的路径】</p><blockquote><p>给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点n-1 的路径并输出（不要求按特定顺序）</p><p>graph[i] 是一个从节点 i 可以访问的所有节点的列表（即从节点 i 到节点graph[i][j]存在一条有向边）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; paths;</span><br><span class="line">List&lt;Integer&gt; path;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">allPathsSourceTarget</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">    paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    traversal(graph, <span class="number">0</span>, graph.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> paths;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(<span class="type">int</span>[][] graph, <span class="type">int</span> begin, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    path.add(begin);</span><br><span class="line">    <span class="keyword">if</span>(begin == end) &#123;</span><br><span class="line">        paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        path.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(begin));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph[begin].length; i++)&#123;</span><br><span class="line">        traversal(graph, graph[begin][i], end);</span><br><span class="line">    &#125;</span><br><span class="line">    path.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(begin));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二拓扑排序">二、拓扑排序</h2><h3 id="图的生成与遍历">0、图的生成与遍历</h3><p>给定图的结点数<code>n</code>，以及结点之间的依赖关系<code>dependency</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">n(int) 节点数</span></span><br><span class="line"><span class="comment">dependency(int[][]) 结点之间依赖关系 dependency[i]是一个[from, to]的二元数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt;[] buildGraph(<span class="type">int</span> n, <span class="type">int</span>[][] dependency)&#123;</span><br><span class="line">    List&lt;Integer&gt;[] graph = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        graph[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[] pair : dependency)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> pair[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> pair[<span class="number">1</span>];</span><br><span class="line">        graph[from].add(to);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否存在环">1、判断是否存在环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span>[] visited;</span><br><span class="line"><span class="type">boolean</span>[] onPath;</span><br><span class="line"><span class="type">boolean</span> isCycle;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(<span class="type">int</span>[][] graph, <span class="type">int</span> s)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(onPath[s])&#123;</span><br><span class="line">        isCycle = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(visited[s])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    onPath[s] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> neighbor : graph[s])&#123;</span><br><span class="line">        traversal(graph, neighbor);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    onPath[s] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑序列">2、拓扑序列</h3><p>如果图G中不存在环，G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边&lt;u,v&gt;∈E(G)，则u在线性序列中出现在v之前。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改造一下traversal函数</span></span><br><span class="line"><span class="type">boolean</span>[] visited;</span><br><span class="line"><span class="type">boolean</span>[] onPath;</span><br><span class="line"><span class="type">boolean</span> isCycle;</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; postOrder;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(<span class="type">int</span>[][] graph, <span class="type">int</span> s)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(onPath[s])&#123;</span><br><span class="line">        isCycle = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(visited[s])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    onPath[s] = <span class="literal">true</span>;</span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[] neighbor : graph[s])&#123;</span><br><span class="line">        traversal(graph, s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    onPath[s] = <span class="literal">false</span>;</span><br><span class="line">    postOrder.add(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后再将postOrder逆序得到就是结果</span></span><br></pre></td></tr></table></figure><p>【重点理解：为什么图的后序遍历就是拓扑排序】</p><p>如果图中不存在环，那么图就可以看成是一颗多叉树，如图。</p><figure><imgsrc="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029210620536.png"alt="image-20221029210620536" /><figcaption aria-hidden="true">image-20221029210620536</figcaption></figure><p>那么从结点<code>0</code>开始的后序遍历的序列之一就是<code>[7,9,16,11, |  6,10,8,19,2, |  3,4,5, |  0]</code></p><p>其实就是从最底层到最高层的排列。</p><p><strong>它满足了<code>from</code>结点都在<code>to</code>结点的后面</strong>（所以最后结果需要逆序，使from结点在前面）</p><p>【局部 ==》全局】</p><p>而这只是这个图的一部分，可以把这部分抽象成一个结点<strong><code>S</code></strong>，那么同样使用前面的函数，在得到的遍历结果中，图中直接指向或者间接指向<strong><code>S</code></strong>的结点都会在其后面，逆序之后就在前面，所以得出的结果就是正确的。</p><p>（同时在xi'jie'shang<code>visited</code>和<code>onPath</code>数组保证结点只被遍历一次以及不会出现环）</p><h2 id="三二分图">三、二分图</h2><blockquote><p>二分图：直观的理解就是能够用两种颜色给一张图上色，使得每条边两端的结点颜色不同</p></blockquote><h3 id="判断二分图">【判断二分图】</h3><p>思路：一边遍历，一边给图上色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span>[] visited; <span class="comment">// 记录结点是否被访问</span></span><br><span class="line"><span class="type">boolean</span>[] color; <span class="comment">// 记录结点的颜色 true 和 false 两种</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isBinary</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBipartite</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph.length; <span class="comment">// 结点数</span></span><br><span class="line">    visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    color = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">        traversal(graph, i); <span class="comment">// 遍历不同的liang</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> isBinary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这里的 color 被new了之后每一个值都是 false 也就成了默认的颜色，只需要去改变对应结点的颜色即可</span></span><br><span class="line"><span class="comment">* 由于这里的图是无向图，所以traversal一个结点就是遍历这个连通分支</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(<span class="type">int</span>[][] graph, <span class="type">int</span> v)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isBinary) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> w : graph[v])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">            color[w] = !color[v];</span><br><span class="line">            traversal(graph, w);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(color[w] == color[v])&#123;</span><br><span class="line">                isBinary = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四union-find-算法">四、Union-Find 算法</h2><h3 id="union-find的算法思想">1、union-find的算法思想</h3><ul><li>基本思想：用下标代替实际的结点，parent数组存储父结点，这样就可以较为快速的实现【合并】和【判断是否相连】的操作</li><li>进阶思想：无论是 union 操作还是 connected 操作，其复杂度的局限都在于find函数，即从一个结点找到根节点的过程，如果这个结点距离结点越近，复杂度越低。而结点与根节点的距离一方面取决于union时的插入方式，如果插入不当，就可能形成链式的连通分量，复杂度是最高的，我们希望尽量降低树的高度，可以在union 中采取 【小树插大树】的方式，使得树的高度尽可能的小。</li><li>路径压缩：在 find过程中，在从当前结点向上寻找的过程中，不断的压缩路径（将该结点连到其父结点的父结点上），使得树的高度始终维持在常数复杂度。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="type">int</span> count; <span class="comment">// 连通分量个数</span></span><br><span class="line">    <span class="type">int</span>[] parent; <span class="comment">// 结点的父节点</span></span><br><span class="line">    <span class="type">int</span>[] size; <span class="comment">// 该节点所处连通分量的结点数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.count = n;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">if</span>(rootP == rootQ)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 小树插到大树上，保持树的平衡 维持 logN 的时间复杂度</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">if</span>(size[rootP] &gt; size[rootQ])&#123;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent[rootP] = rootQ;</span><br><span class="line">        &#125;</span><br><span class="line">        size[rootP] += size[rootQ];</span><br><span class="line">        size[rootQ] += size[rootP];</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">return</span> rootP == rootQ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= parent.length) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (parent[p] != p)&#123;</span><br><span class="line">            parent[p] = parent[parent[p]]; <span class="comment">// 路径压缩 使得所有非根结点都直接连接在根上 使树高维持在2</span></span><br><span class="line">            p = parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="union-find算法的应用">2、Union-Find算法的应用</h3><h4 id="被围绕的区域">2.1、130. 被围绕的区域</h4><blockquote><p>给你一个 <code>m x n</code> 的矩阵 <code>board</code> ，由若干字符<code>'X'</code> 和 <code>'O'</code> ，找到所有被 <code>'X'</code>围绕的区域，并将这些区域里所有的 <code>'O'</code> 用 <code>'X'</code>填充。</p></blockquote><p>这道题其实使用DFS算法可以很好地解决，但是也是可以体现Union-Find算法思想的一道题目</p><p><strong>加深对于DFS算法的理解</strong></p><p>DFS算法是深度优先，在二叉树中体现为从根节点不断地向叶节点前进，在图中是体现为从一个结点不断地向其邻居结点前进。</p><p>其实在这道题中，把这个矩阵理解为一副图的话，DFS就显得比较自然了</p><p>1、遍历矩阵的四周，如果是<code>'O'</code>，则进入<code>dfs</code>，将所有与其相连的<code>'O'</code>变成特殊符号</p><p>2、遍历矩阵，将特殊符号变回<code>'O'</code>，把<code>'O'</code>变成<code>'X'</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 DFS 解决</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    x x x x</span></span><br><span class="line"><span class="comment">    x o x o</span></span><br><span class="line"><span class="comment">    x o o x</span></span><br><span class="line"><span class="comment">    o x x o</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [要深入理解 dfs 的内涵]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    边界坐标的特点: [0/m-1][0/n-1]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">        m = board.length;</span><br><span class="line">        n = board[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历board的四条边</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                dfsHelper(board, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span>[] next = forward(i,j);</span><br><span class="line">            i = next[<span class="number">0</span>];</span><br><span class="line">            j = next[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &gt; <span class="number">0</span>  || j &gt; <span class="number">0</span>); <span class="comment">// ① 考虑到 forward 函数会返回 &#123;-1, -1&#125; 所以要改成 &gt;0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历整个board 把 &#x27;O&#x27; 换成 &#x27;X&#x27; 把 &#x27;#&#x27; 换成 &#x27;O&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>; a &lt; m; a++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>; b &lt; n; b++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (board[a][b] == <span class="string">&#x27;O&#x27;</span>) board[a][b] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (board[a][b] == <span class="string">&#x27;#&#x27;</span>) board[a][b] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 这里的 DFS 就有些不同于 树的 DFS</span></span><br><span class="line"><span class="comment">    * DFS: 只处理一个结点，然后用递归向四周扩散深入</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfsHelper</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里要改成 != &#x27;O&#x27; 而不是 == &#x27;X&#x27;</span></span><br><span class="line"><span class="comment">        != &#x27;O&#x27; 针对的是两种情况 == &#x27;X&#x27; 和 == &#x27;#&#x27;</span></span><br><span class="line"><span class="comment">        == &#x27;X&#x27; 肯定是直接 return</span></span><br><span class="line"><span class="comment">        == &#x27;#&#x27; 的情况，其实也可以return 因为这个 &#x27;#&#x27; 周围的格子已经被遍历过了 (在其从&#x27;O&#x27;变成&#x27;#&#x27;之后)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(board[x][y] != <span class="string">&#x27;O&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[x][y] == <span class="string">&#x27;O&#x27;</span>) board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span>) dfsHelper(board, x - <span class="number">1</span>, y); <span class="comment">// 上</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; m - <span class="number">1</span>) dfsHelper(board, x + <span class="number">1</span>, y); <span class="comment">// 下</span></span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span>) dfsHelper(board, x, y - <span class="number">1</span>); <span class="comment">// 左</span></span><br><span class="line">        <span class="keyword">if</span> (y &lt; n - <span class="number">1</span>) dfsHelper(board, x, y + <span class="number">1</span>); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在board的四个边上前进</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] forward(<span class="type">int</span> i , <span class="type">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j + <span class="number">1</span>&#125;; <span class="comment">// 上 向右走</span></span><br><span class="line">        <span class="keyword">if</span> (j == n - <span class="number">1</span> &amp;&amp; i &lt; m - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i + <span class="number">1</span>, j&#125;; <span class="comment">// 右 向下走</span></span><br><span class="line">        <span class="keyword">if</span> (i == m - <span class="number">1</span> &amp;&amp; j &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j - <span class="number">1</span>&#125;; <span class="comment">// 下 向左走</span></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> &amp;&amp; i &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i - <span class="number">1</span>, j&#125;; <span class="comment">// 左 向上走</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这道题也是很好的体现，Union-Find的思想在二位数组（矩阵）中判断连通性的例子</strong></p><ul><li>根据题意知道：在矩阵的<code>'O'</code>及与其相连的<code>'O'</code>是属于不被替换的<code>'O'</code>，可以算作一个连通分量。<strong>【利用一个dummy结点和它们相连】</strong>，为什么再找一个dummy结点呢？方便查找。在后续判断这个<code>'O'</code>是否需要被替换时，只需要判断是否和这个dummy结点连通即可。</li><li>遍历完四周之后，再次遍历即可完成替换。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 union-find 解决</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">uf</span><span class="params">(<span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> board.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board[<span class="number">0</span>].length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最后一个dummy作为 不被 &#x27;X&#x27; 替换的&#x27;O&#x27; 的联通分量中的一个结点 来寻找该连通分量中的其他结点</span></span><br><span class="line">    <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n*m+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> i * n + j; <span class="comment">// 二维数组转化为一维</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将矩阵四周的&#x27;O&#x27;和dummy连通</span></span><br><span class="line">            <span class="keyword">if</span>( (i == <span class="number">0</span> || i == m - <span class="number">1</span> || j == <span class="number">0</span> || j == n - <span class="number">1</span>) &amp;&amp;</span><br><span class="line">                        board[i][j] == <span class="string">&#x27;O&#x27;</span> )&#123;</span><br><span class="line">                uf.union(val, n*m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">// 上</span></span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; board[i-<span class="number">1</span>][j] == <span class="string">&#x27;O&#x27;</span>) uf.union((i-<span class="number">1</span>)*n+j, val);</span><br><span class="line">                <span class="comment">// 下</span></span><br><span class="line">                <span class="keyword">if</span> (i &lt; m - <span class="number">1</span> &amp;&amp; board[i+<span class="number">1</span>][j] == <span class="string">&#x27;O&#x27;</span>) uf.union((i+<span class="number">1</span>)*n+j, val);</span><br><span class="line">                <span class="comment">// 左</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; board[i][j-<span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>) uf.union(i*n+(j-<span class="number">1</span>), val);</span><br><span class="line">                <span class="comment">// 右</span></span><br><span class="line">                <span class="keyword">if</span> (j &lt; n - <span class="number">1</span> &amp;&amp; board[i][j+<span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>) uf.union(i*n+(j+<span class="number">1</span>), val);</span><br><span class="line">                <span class="comment">/* </span></span><br><span class="line"><span class="comment">                // 如果不在能够连通分量中 则改成 X</span></span><br><span class="line"><span class="comment">                if (!uf.connected(val, n*m))&#123;</span></span><br><span class="line"><span class="comment">                    board[i][j] = &#x27;X&#x27;;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;O&#x27;</span> &amp;&amp; !uf.connected(i*n+j, n*m))&#123;</span><br><span class="line">                board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="等式方程的可满足性">2.2、990. 等式方程的可满足性</h4><p>这道题就是典型需要利用Union-Find解决。相等和不相等就相当于连通和不连通，核心就是<code>union</code> 和 判断是否 <code>connected</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equationsPossible</span><span class="params">(String[] equations)</span> &#123;</span><br><span class="line">    <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(<span class="number">26</span>);</span><br><span class="line">    <span class="keyword">for</span> (String equation : equations) &#123;</span><br><span class="line">        <span class="keyword">if</span>(equation.charAt(<span class="number">1</span>) == <span class="string">&#x27;!&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> equation.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> equation.charAt(<span class="number">3</span>);</span><br><span class="line">        uf.union(c1-<span class="string">&#x27;a&#x27;</span>, c2-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String equation : equations) &#123;</span><br><span class="line">        <span class="keyword">if</span> (equation.charAt(<span class="number">1</span>) == <span class="string">&#x27;=&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> equation.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> equation.charAt(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(uf.connected(c1-<span class="string">&#x27;a&#x27;</span>, c2-<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五最小生成树算法">五、最小生成树算法</h2><h3 id="kruskal算法">Kruskal算法</h3><ol type="1"><li>对所有边进行排序</li><li>从权重最小的边开始，依次将边加入到结点集中</li><li>检查是否产生环（并查集），如果有就剔除</li></ol><blockquote><p>给你一个points 数组，表示 2D 平面上的一些点，其中 points[i] = [xi,yi] 。</p><p>连接点 [xi, yi] 和点 [xj, yj] 的费用为它们之间的 曼哈顿距离 ：|xi -xj| + |yi - yj| ，其中 |val| 表示 val 的绝对值。</p><p>请你返回将所有点连接的最小总费用。只有任意两点之间 有且仅有一条简单路径时，才认为所有点都已连接。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kruskal 最小生成树算法</span></span><br><span class="line"><span class="comment"> * 1584. 连接所有点的最小费用</span></span><br><span class="line"><span class="comment"> * https://leetcode.cn/problems/min-cost-to-connect-all-points/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>[] parent;</span><br><span class="line"><span class="type">int</span>[] size;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostConnectPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> points.length; <span class="comment">// 节点个数</span></span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> Math.abs(points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) +</span><br><span class="line">                               Math.abs(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>]);</span><br><span class="line">            edges.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j, cost&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    edges.sort(Comparator.comparingInt(a -&gt; a[<span class="number">2</span>])); <span class="comment">// 升序排列</span></span><br><span class="line">    </span><br><span class="line">    parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        parent[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">        <span class="keyword">if</span>(union(edge[<span class="number">0</span>], edge[<span class="number">1</span>]))&#123;</span><br><span class="line">            sum += edge[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (parent[v] != v) &#123;</span><br><span class="line">        parent[v] = parent[parent[v]];</span><br><span class="line">        v = parent[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (parent[w] != w) &#123;</span><br><span class="line">        parent[w] = parent[parent[w]];</span><br><span class="line">        w = parent[w];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (w == v) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 处在一个连通分量中</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size[w] &gt; size[v]) &#123;</span><br><span class="line">            parent[v] = w;</span><br><span class="line">            size[w] += size[v];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent[w] = v;</span><br><span class="line">            size[v] += size[w];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六dijstra算法">六、Dijstra算法</h2><h3 id="框架">1、框架</h3><ol type="1"><li>建图：将题目中对应的图模型建立起来（以邻接表的形式）</li><li>封装每个图节点 Node：节点id 和 "代价"(从 start节点到当前节点的最值)</li><li>使用一个 cost 数组：cost[i] 记录从 start 节点开始到 i 节点的"<strong>代价</strong>" <strong>最值</strong></li><li>使用 优先队列 queue：目的是每次能够取出最小（最大）的节点，加速BFS</li><li>从 start 节点开始 BFS</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] dijstra(..args)&#123;</span><br><span class="line">    <span class="comment">// 建图</span></span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt;[] graph = buildGraph();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// start节点到相应节点的&quot;代价&quot;最值</span></span><br><span class="line">    <span class="type">int</span>[] costTo = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    initialize the array;</span><br><span class="line">    costTo[start] = init_value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用优先级队列，对所有封装起来的图节点按照&quot;cost&quot;排序</span></span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">    queue.offer(<span class="keyword">new</span> <span class="title class_">a</span> start node);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> node.id;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> node.costFromStart;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cost &gt; costTo[id])&#123; <span class="comment">// 已经有更优的</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] next : graph[id])&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextId</span> <span class="operator">=</span> next[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// 这个地方可以衍生出很多的变式，对于代价是相加，对于概率是相乘，也有可能是求最大值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextCost</span> <span class="operator">=</span> func(next[<span class="number">1</span>], costTo[id]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(nextCost &lt; costTo(nextId))&#123;</span><br><span class="line">                <span class="comment">// 更新</span></span><br><span class="line">                costTo[nextId] = nextCost;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">this</span> node);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> costTo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记2-队列/栈</title>
      <link href="/2022/09/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B02%EF%BC%88%E9%98%9F%E5%88%97%E6%A0%88%EF%BC%89/"/>
      <url>/2022/09/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B02%EF%BC%88%E9%98%9F%E5%88%97%E6%A0%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="括号问题">括号问题</h2><blockquote><p>有效的括号 20</p><p>使括号有效的最小添加 921</p><p>平衡括号串的最小插入 1541</p></blockquote><ul><li>【有效括号】</li></ul><p>如果只判断一种括号，则不需要使用栈，通过一次遍历即可解决</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c : s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            left ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            left --;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> left == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要同时判断三种括号是否正确：<code>() [] &#123;&#125;</code></p><p>使用上述方法就显得十分麻烦，应该利用栈结构的特性来解决</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IS_PUSH(x) (x == <span class="string">&#x27;(&#x27;</span> || x == <span class="string">&#x27;[&#x27;</span> || x == <span class="string">&#x27;&#123;&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IS_MATCH(x, y) \</span></span><br><span class="line"><span class="meta">    ((x == <span class="string">&#x27;(&#x27;</span> &amp;&amp; y == <span class="string">&#x27;)&#x27;</span>) || (x == <span class="string">&#x27;[&#x27;</span> &amp;&amp; y == <span class="string">&#x27;]&#x27;</span>) || (x == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; y == <span class="string">&#x27;&#125;&#x27;</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">IS_PUSH</span>(c)) &#123; <span class="comment">// 左半括号，压栈</span></span><br><span class="line">                stk.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 缺少左半括号</span></span><br><span class="line">                <span class="type">char</span> c1 = stk.<span class="built_in">top</span>();</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">IS_MATCH</span>(c1, c)) &#123; <span class="comment">// 匹配</span></span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 左右括号不匹配</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>(); <span class="comment">// 如果栈不为空，缺少右半括号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>【使括号有效的最小添加】</li></ul><p>由于只涉及一种括号，就不需要使用栈结构，通过一次遍历即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minAddToMakeValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            left--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left + cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【平衡括号串的最小插入】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较普通的解法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minInsertions1</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rightInRow = <span class="number">0</span>; <span class="comment">// 连续右括号的数目</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rightInRow != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt++;  <span class="comment">//增加一个右括号</span></span><br><span class="line">                    left--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cnt += <span class="number">2</span>;  <span class="comment">// 增加一个左括号和右括号</span></span><br><span class="line">                &#125;</span><br><span class="line">                rightInRow = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rightInRow++;</span><br><span class="line">            <span class="keyword">if</span> (rightInRow == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left &gt; <span class="number">0</span>)</span><br><span class="line">                    left--;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    cnt++;  <span class="comment">// 增加一个左括号</span></span><br><span class="line">                rightInRow = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rightInRow != <span class="number">0</span>) &#123;  <span class="comment">// 多余的右括号</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span>) &#123;</span><br><span class="line">            cnt += <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left--;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        rightInRow = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left * <span class="number">2</span> + cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更加简洁的jie&#x27;fa</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minInsertions</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> need = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 当出现一个左括号时，其前的右括号数目应该为偶数，即need应该为偶数，若为奇数需要插入一个右括号</span></span><br><span class="line">            <span class="keyword">if</span> (need % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                need--;</span><br><span class="line">                cnt++;  <span class="comment">// 插入一个右括号</span></span><br><span class="line">            &#125;</span><br><span class="line">            need += <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            need--;</span><br><span class="line">            <span class="keyword">if</span> (need == <span class="number">-1</span>) &#123;</span><br><span class="line">                cnt++;  <span class="comment">// 插入一个左括号</span></span><br><span class="line">                need =</span><br><span class="line">                    <span class="number">1</span>;  <span class="comment">// 由于一个左括号需要两个右括号，所以还需要一个右括号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnt + need;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调栈">单调栈</h2><blockquote><p>单调栈实际上就是栈，只是通过简单的技巧使得其中元素的呈单调排列</p><p>可以很好解决【下一个更大元素】的问题</p><p>下一个更大元素Ⅰ 496</p><p>下一个更大元素Ⅱ 503</p><p>每日温度 739</p></blockquote><ul><li>【base case】</li></ul><blockquote><p>给定一个数组 nums 返回一个结果数组 res，res[i] 表示 nums[i]的下一个更大的元素，没有返回 -1</p></blockquote><p>[2, 1, 2, 4, 3]将每一个元素看成是相应高度的棍子。res[i]就是从nums[i]这根棍子向后所能看到的那个棍子的高度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">    <span class="comment">// 从后往前遍历，因为栈是后进先出，从后开始遍历，保证出栈的顺序是从前到后</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="comment">// 如果栈不空 依次取出栈顶元素和当前元素比较</span></span><br><span class="line">        <span class="comment">// 直到找到比当前元素大的那一个</span></span><br><span class="line">        <span class="comment">// 【&lt;= 当前元素的可以从栈顶移除，因为当前元素前面的元素是看不见它们的】</span></span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">top</span>() &lt;= nums[i])&#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        res[i] = stk.<span class="built_in">empty</span>() ? <span class="number">-1</span> : stk.<span class="built_in">top</span>();</span><br><span class="line">        stk.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【下一个更大元素Ⅰ】</li></ul><blockquote><p><code>nums1</code> 中数字 <code>x</code> 的<strong>下一个更大元素</strong> 是指 <code>x</code> 在<code>nums2</code> 中对应位置 <strong>右侧</strong> 的<strong>第一个</strong> 比 <code>x</code> 大的元素。</p></blockquote><p>这个问题更难了一些，因为是<code>nums1</code>中的<code>x</code>映射到<code>nums2</code>后的下一个更大元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对nums2进行base case的处理，但是将结果存放在map中</span></span><br><span class="line"><span class="comment">对nums1进行遍历，根据map得到最终结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums1.size())</span></span>;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对nums2求每个元素的下一个更大元素</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = nums2.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">top</span>() &lt;= nums2[i]) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map[nums2[i]] = stk.<span class="built_in">empty</span>() ? <span class="number">-1</span> : stk.<span class="built_in">top</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if (stk.empty()) &#123;</span></span><br><span class="line"><span class="comment">                map[nums2[i]] = -1;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                while (!stk.empty() &amp;&amp; stk.top() &lt;= nums2[i]) &#123;</span></span><br><span class="line"><span class="comment">                    stk.pop();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                if (stk.empty()) &#123;</span></span><br><span class="line"><span class="comment">                    map[nums2[i]] = -1;</span></span><br><span class="line"><span class="comment">                &#125; else &#123;</span></span><br><span class="line"><span class="comment">                    map[nums2[i]] = stk.top();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        stk.<span class="built_in">push</span>(nums2[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        res[i] = map[nums1[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【每日温度】</li></ul><p>base case 的变式，res[i] 是 下一个最大元素 到 nums[i] 的距离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈结构中存放的是 &lt;index, value&gt; 的pair</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// &lt;pos, value&gt;</span></span><br><span class="line">    stack&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; stk;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(temperatures.size())</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = temperatures.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">top</span>().second &lt;= temperatures[i]) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        res[i] = stk.<span class="built_in">empty</span>() ? <span class="number">0</span> : stk.<span class="built_in">top</span>().first - i;</span><br><span class="line">        stk.<span class="built_in">push</span>(&#123;i, temperatures[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈结构存放的index</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;  <span class="comment">// 存放索引</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(temperatures.size())</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = temperatures.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; temperatures[stk.<span class="built_in">top</span>()] &lt;= temperatures[i]) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        res[i] = stk.<span class="built_in">empty</span>() ? <span class="number">0</span> : stk.<span class="built_in">top</span>() - i;</span><br><span class="line">        stk.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【下一个更大元素Ⅱ】</li></ul><p>引入了<strong>环形数组</strong>，但是可以通过<strong>模运算</strong>来模拟环形数组的效果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用单调栈时将数组长度翻倍，但是循环数组的效果是用模运算体现出来的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> j = i % nums.<span class="built_in">size</span>(); <span class="comment">// 对应的下标</span></span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">top</span>() &lt;= nums[j]) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res[i] = stk.<span class="built_in">empty</span>() ? <span class="number">-1</span> : stk.<span class="built_in">top</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push</span>(nums[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调队列">单调队列</h2><blockquote><p>滑动窗口最大值 239</p></blockquote><p>【题目】给你一个整数数组 <code>nums</code>，有一个大小为<code>k</code>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的<code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure></blockquote><p><font color='red'>最主要是利用了【双端队列】，或者说是利用可以在头部尾部增减元素的数据结构</font></p><p>难点在于：为什么窗口和队列中的元素可以不同步？</p><p><strong>队列中的元素x，是在 比它更大元素y插入时【注意y是在x后面的】被移出的</strong>。由于只是求窗口中的最大值，所以结果是不受影响的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size() - k + <span class="number">1</span>)</span></span>;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">// 记录队列中的元素个数</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>; <span class="comment">// 结果集的下标</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="comment">// 将队列中所有比 nums[i] 小的元素移出 =&gt; 使得队列中元素呈单调递减排列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1、这样使得队列头部元素就是队列中最大元素，即窗口最大值</span></span><br><span class="line"><span class="comment">        2、为什么要移出，而不是让它们排列</span></span><br><span class="line"><span class="comment">        2.1、如果不将它们移出，只是排列，当窗口需要实际移出它们时就会变得困难</span></span><br><span class="line"><span class="comment">        2.2、而且在排列时就移出，不会对正确性产生影响，队列和窗口中的元素不是同时移出，</span></span><br><span class="line"><span class="comment">        会出现四种情况: 有两种是对应的，即窗口中和队列中都有某元素、都没有某元素  这两种肯定是正确的。另外两种:</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        2.2.1、窗口中有该元素，而队列中没有。队列中没有 说明该元素不是队列中最大元素，在比其更大的元素插入时被移出，</span></span><br><span class="line"><span class="comment">        还说明该元素在nums中的位置是先于比它更大的元素的，所以窗口也是更早将其移出的。</span></span><br><span class="line"><span class="comment">        由于只需要求窗口最大元素，所以没有影响</span></span><br><span class="line"><span class="comment">        2.2.2、窗口中没有某元素，而队列中有。</span></span><br><span class="line"><span class="comment">        如果该元素不是最大元素的话，同2.2.1 在窗口实际移除它之前，队列就已经把它给移出了，故不存在该情况</span></span><br><span class="line"><span class="comment">        如果该元素是最大元素的话，那么在窗口移出它的同时，队列会移出它，即代码29、30行所做，也不会存在该情况</span></span><br><span class="line"><span class="comment">        3、将元素从尾部取出比较的，这样才能保证是单调递减 =&gt; 所以需要双端队列</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">while</span>(!dq.<span class="built_in">empty</span>() &amp;&amp; dq.<span class="built_in">back</span>() &lt; nums[i])&#123;</span><br><span class="line">            dq.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        dq.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        cnt++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 窗口元素满了</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == k)&#123;</span><br><span class="line">            res[index++] = dq.<span class="built_in">front</span>(); <span class="comment">// 最大元素就是队列头部元素</span></span><br><span class="line">            <span class="comment">// 如果窗口需要移出的是最大元素，那队列就要移出该元素。</span></span><br><span class="line">            <span class="comment">// 否则不需要，因为更早时候已经移出了</span></span><br><span class="line">            <span class="keyword">if</span>(dq.<span class="built_in">front</span>() == nums[i - k + <span class="number">1</span>])&#123;</span><br><span class="line">                dq.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cnt --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组去重">数组去重</h2><blockquote><p>去除重复字母 316</p><p>不同字符的最小子序列 1081</p></blockquote><p>给你一个字符串 <code>s</code>，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证<strong>返回结果的字典序最小</strong>（要求不能打乱其他字符的相对位置）。</p><blockquote><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;bcabc&quot;</span><br><span class="line">输出：&quot;abc&quot;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用栈结构</span></span><br><span class="line"><span class="function">string <span class="title">removeDuplicateLetters</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* cnts = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">26</span>]&#123;<span class="number">0</span>&#125;;  <span class="comment">// 记录字符串中每种字符的数量</span></span><br><span class="line">    <span class="type">bool</span>* isInStk = <span class="keyword">new</span> <span class="type">bool</span>[<span class="number">26</span>]&#123;<span class="literal">false</span>&#125;; <span class="comment">// 记录对应字符在栈中是否出现</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计字符串中每种字符的数量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cnts[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        </span><br><span class="line">        cnts[stk.<span class="built_in">top</span>() - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isInStk[s[i] - <span class="string">&#x27;a&#x27;</span>]) &#123; <span class="comment">// 栈中已经存在该字符</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp;</span><br><span class="line">               stk.<span class="built_in">top</span>() &gt;= s[i] &amp;&amp; <span class="comment">// 前面的字符字典序更大</span></span><br><span class="line">               cnts[stk.<span class="built_in">top</span>() - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">1</span>) &#123; <span class="comment">// 而且后面还存在该字符 就可以将该字符移除</span></span><br><span class="line">            isInStk[stk.<span class="built_in">top</span>() - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stk.<span class="built_in">push</span>(s[i]);</span><br><span class="line">        isInStk[s[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        ans += stk.<span class="built_in">top</span>();</span><br><span class="line">        stk.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用字符串</span></span><br><span class="line"><span class="function">string <span class="title">smallestSubsequence</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* cnts = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">26</span>]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">bool</span>* isInStk = <span class="keyword">new</span> <span class="type">bool</span>[<span class="number">26</span>]&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cnts[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string stk;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInStk[s[i] - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">            cnts[s[i] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">back</span>() &gt;= s[i] &amp;&amp;</span><br><span class="line">               cnts[stk.<span class="built_in">back</span>() - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            isInStk[stk.<span class="built_in">back</span>() - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">            cnts[stk.<span class="built_in">back</span>() - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stk.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">        isInStk[s[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记1-数组/链表</title>
      <link href="/2022/09/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B01%EF%BC%88%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8%EF%BC%89/"/>
      <url>/2022/09/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B01%EF%BC%88%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀和">前缀和</h2><p><font color='blue'>使用于 数组固定不变 而且需要频繁求和的情况</font></p><blockquote><p>相关题目：</p><p>1、一维数组的区域和检索 303</p><p>2、二维数组的区域和检索 304</p><p>3、和为k的子数组个数 560</p></blockquote><p>在求解数组和的时候，最普通的方法就是for循环遍历，复杂度为<spanclass="math inline">\(O(N)\)</span>。</p><p>但是当需要多次调用求解数组和的方法时，就需要降低其复杂度</p><p>使用前缀和可以将复杂度降为<spanclass="math inline">\(O(1)\)</span></p><p>使用条件：<strong>调用数组求和方法前数组已经初始化 +会调用大量的数组求和方法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在初始化的时候构建前缀和数组</span></span><br><span class="line"><span class="type">int</span> *preSum = <span class="keyword">new</span> <span class="type">int</span>[len + <span class="number">1</span>]&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    preSum[i+<span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回数组某个范围的和只需要用相应前缀和数组进行相减即可</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sunRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preSum[right+<span class="number">1</span>] - preSum[left+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在二维数组（矩阵）中应用时，"前缀和" 就是 某点<spanclass="math inline">\((row, col)\)</span> 到 <spanclass="math inline">\((0,0)\)</span>或者其他定点所围成的区域的和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 求解 row1, col1, row2, col2 所围成的区域的和</span></span><br><span class="line"><span class="comment">* Sum(row2, col2) - Sum(row2, col1) - Sum(row1, col2) + Su(row1, col1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span></span>&#123;</span><br><span class="line">    preMatrix[row2][col2] -</span><br><span class="line">               (col1 &gt; <span class="number">0</span> ? preMatrix[row2][col1 - <span class="number">1</span>] : <span class="number">0</span>) -</span><br><span class="line">               (row1 &gt; <span class="number">0</span> ? preMatrix[row1 - <span class="number">1</span>][col2] : <span class="number">0</span>) +</span><br><span class="line">               (row1 &gt; <span class="number">0</span> &amp;&amp; col1 &gt; <span class="number">0</span> ? preMatrix[row1 - <span class="number">1</span>][col1 - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>和为k的子数组个数</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最普通的思路 O(N^3)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; len; j++)&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = i; k &lt;= j; k++)&#123;</span><br><span class="line">            sum += nums[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == k)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用前缀和数组 =&gt; O(N^2)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preSum[i] - preSum[j] == k)&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【O(N)】</span></span><br><span class="line"><span class="comment">// preSum[j] = preSum[i] - k ·········· (1)</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; preSum;</span><br><span class="line"><span class="type">int</span> sum_i = <span class="number">0</span>, sum_j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    sum_i += nums[i];</span><br><span class="line">    sum_j = sum_i - k;</span><br><span class="line">    <span class="keyword">if</span>(preSum.<span class="built_in">find</span>(sum_j) != preSum.<span class="built_in">end</span>())&#123; <span class="comment">// 存在前缀和使得 (1) 成立</span></span><br><span class="line">        cnt += preSum[sum_j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preSum.<span class="built_in">find</span>(sum_i) != preSum.<span class="built_in">end</span>())&#123;</span><br><span class="line">        preSum[sum_i] ++;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        preSum[sum_i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="差分数组">差分数组</h2><p><font color='blue'>差分数组适用于需要频繁对数组的<strong>某个区间做增减</strong>的情况</font></p><blockquote><p>区间加法 370</p><p>航班预定统计 1109</p><p>拼车 1094</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Difference</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; diff;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 初始化差分数组</span></span><br><span class="line">    <span class="built_in">Difference</span>(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span><br><span class="line">    &#123;</span><br><span class="line">        diff.<span class="built_in">push_back</span>(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            diff.<span class="built_in">push_back</span>(nums[i] - nums[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [startIndex, endIndex]区间 加和</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increment</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span> endIndex, <span class="type">int</span> inc)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        diff[startIndex] += inc;</span><br><span class="line">        <span class="keyword">if</span> (endIndex &lt; diff.<span class="built_in">size</span>() - <span class="number">1</span>)&#123;</span><br><span class="line">            diff[endIndex + <span class="number">1</span>] -= inc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由差分数组得到原数组并返回</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(diff.size())</span></span>;</span><br><span class="line">        nums[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; diff.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[i] += nums[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在【航班预定统计】中，对航班人数形成的数组做差分</p><p>在【拼车】中，对每个位置车上的人数形成的数组做差分</p><h2 id="滑动窗口">滑动窗口</h2><p><font color='blue'>一般解决 在字符串中寻找子串 的问题</font></p><blockquote><p>最小覆盖子串 76</p><p>字符串的排列 567</p><p>找到字符串中所有字母异位词 438</p><p>无重复字符最长子串 3</p></blockquote><p>思路：</p><p>1、先用一个map记录满足要求的情况（比如子串中字符类型和数目）</p><p>2、用另一个map记录窗口内的情况（window）[ left, right )</p><p>3、【不断移动右边界，并对window内容<strong>做更新</strong>】 =&gt;【在满足<strong>某种情况</strong>时，需要缩减窗口（即移动左边界），并<strong>做更新</strong>】（循环这个过程，直到右边界到达字符串边界）</p><p>4、<strong>我们需要的结果在哪里更新？</strong>（移动右边界过程中，还是移动左边界过程中）</p><p><strong><font color='red'>理解窗口缩小背后的含义</font></strong></p><blockquote><p>个人的理解：</p><p>滑动窗口的核心当然在于【窗口】的含义和【滑动】的含义</p><p>一般来说，窗口是帮助我们寻找答案的结构；滑动是我们寻找的答案的过程以及技巧。</p><p>所以，窗口的定义都是比较简单的。</p><p>真正灵活的是窗口的滑动。滑动避免了冗余的循环，大大降低了问题的复杂度</p><p>我们如果使用最一般的方法处理此类问题，首先要确定就是 字符串的开始位置和结束位置，之前我们使用循环是O(N^2)的复杂度；而使用窗口的滑动，右边界滑动是确定开始位置不断改变结束位置，而左边界滑动是确定结束位置不断改变开始位置，最多只需要对字符串做两次遍历，是O(N)复杂度，当然其中还涉及一些其他的技巧，帮助筛选掉一些情况。</p><p>滑动分为右边界滑动（窗口扩大）和左边界滑动（窗口缩小）</p><p>分别对应着什么时候窗口扩大；窗口扩大之后干什么；什么时候窗口缩小；窗口缩小之后干什么</p><p>一般我们都将窗口初始化为 [ 0, 0 )</p><p>窗口扩大是对应于【寻找解】的过程；窗口缩小是对应于【优化解】的过程</p><p>寻找解的过程相对简单，根据问题的类型很容易可以写出相应的代码</p><p>【最难的是】 什么时候进行解的优化，以及怎么做？先根据题目来看看</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑动窗口的框架</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slideWindow</span><span class="params">(string s1, string s2)</span></span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c : s1) need[c]++;</span><br><span class="line">    </span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; window;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> valid = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(right &lt; s2.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">char</span> c = s2[right];</span><br><span class="line">        right++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ... 窗口扩大时做的更新</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>( condition )&#123; <span class="comment">// 什么时候停止窗口扩大，开始缩减窗口</span></span><br><span class="line">            <span class="type">char</span> d = s2[left];</span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// ... 窗口缩减时做的操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上面的四个例子，具体地阐述一下框架的使用，以及对于那几个问题的思考</p><ul><li>【最小覆盖子串】</li></ul><blockquote><p>在 s 中找到 包含 t 中所有字符的最小子串</p></blockquote><p>1、移动右边界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">char</span> c = s2[right];</span><br><span class="line">right++;</span><br><span class="line"><span class="comment">// 窗口增大时的更新操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果加入窗口的这个字符 是need中的字符 (也就是说是 t 中的字符)</span></span><br><span class="line"><span class="comment">就将该字符在窗口中的数量+1</span></span><br><span class="line"><span class="comment">如果该字符在窗口中的数量 和 在need中的数量一样 (也就是说窗口中该字符满足了t中的要求)</span></span><br><span class="line"><span class="comment">valid +1 表示有效的字符数增加 当有效字符数和t中的字符类型数一样的时候 说明此时窗口中满足了要求 包含了t中所有字符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(need.<span class="built_in">count</span>(c))&#123;</span><br><span class="line">    window[c]++;</span><br><span class="line">    <span class="keyword">if</span>(window[c] == need[c])&#123;</span><br><span class="line">        valid++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、【窗口中满足要求时】，缩减窗口</p><p><font color='red'>为什么要缩减窗口？为什么要在窗口满足要求的时候缩减窗口？缩减时干什么？</font></p><p>问题是求解【最小子串】</p><p>在右边界不断移动的过程中，可能会有一些不必要的字符被加入窗口中，就会导致窗口中的答案可能不是最小的。比如（"adbc"中包含 "bcd"，但是 "a"是无关紧要的，可以从窗口中移除的，应该变为"dbc"）就需要对窗口进行缩减才能使得答案更优（局部最优）。</p><p>因为要对解进行优化，首先需要在窗口中出现解，或包含解，才能继续优化，所以需要在窗口满足要求时进行缩减。</p><p>根据前面我们要缩减窗口的原因，在缩减窗口时，我们需要做的就是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    将字符从左边界移出，直到窗口中刚好不满足要求，此时窗口内的解为局部最优</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>( valid == need.<span class="built_in">size</span>() )&#123;</span><br><span class="line">    <span class="type">char</span> d = s2[left];</span><br><span class="line">    left++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果移出的字符在need中，而且移出前该字符在窗口中的数量刚好满足要求</span></span><br><span class="line"><span class="comment">    移出后，valid --</span></span><br><span class="line"><span class="comment">    window[d] --</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(need.<span class="built_in">count</span>(d))&#123;</span><br><span class="line">        <span class="keyword">if</span>(window[d] == need[d])&#123;</span><br><span class="line">            valid--;</span><br><span class="line">        &#125;</span><br><span class="line">        window[d]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、由于我们需要的最小子串，那么肯定需要对解进行判断和更新，在哪？</p><p>我们需要的全局最优解，更新的时候肯定是考虑局部最优解，所以自然就应该将答案的更新放在窗口缩小中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( valid == need.<span class="built_in">size</span>() )&#123;</span><br><span class="line">    <span class="comment">// 对答案进行更新</span></span><br><span class="line">    <span class="keyword">if</span>(right - left &lt; len)&#123;</span><br><span class="line">        start = left; </span><br><span class="line">        len = right - left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> d = s2[left];</span><br><span class="line">    left++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(need.<span class="built_in">count</span>(d))&#123;</span><br><span class="line">        <span class="keyword">if</span>(window[d] == need[d])&#123;</span><br><span class="line">            valid--;</span><br><span class="line">        &#125;</span><br><span class="line">        window[d]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【字符串的排列】【找到字符串中所有字母异位词】</li></ul><blockquote><p>判断字符串 s1 中是否包含 s2 的排列</p><p>找到字符串 s1 中 s2 所有排列的起始位置</p></blockquote><p>这两个问题的核心是一样的，都是查找字符串的排列</p><p>应用上面的框架，移动右边界寻找解的过程是一致的，区别和难点在于【缩减窗口的时机】和【缩减窗口的操作】</p><p><font color='red'>什么时候缩减窗口</font></p><p>缩减窗口的目的是 优化解。</p><p>所以，可以得出缩减窗口的两个时机就是 1、窗口中包含了解2、明显知道窗口中的内容不能满足解，需要对窗口中的内容进行修正。</p><p>这两个时机可以任选一个，就看不同的问题中，哪个时机更加明显。</p><p>对于上一个问题：最小覆盖子串中，时机1是更加明显的，只要窗口中包含了和need中一样的字符和数量（<code>valid == need.size()</code>）；相比之下，时机2是不明显的，【修正解】在这个问题中是需要解先出现的，因为子串可以包含其他字符，在解出现之间都不能知道这个解需不需要被修正。</p><p>而这个问题中，我们很容易就能知道什么时候解需要修正：1、出现了其他字符；（<code>need.count(c) == 0</code>）2、字符数量过多了（窗口的size大于s2的size：<code>right - left &gt; s2.size()</code>）。对于什么时候窗口中包含解，我们是更难以知道的，我们要验证窗口这一块区域，难度更大，也不合适。</p><p>至于缩减窗口的操作，经过思考很容易能够得到，就是将字符从左边界移出，并更新window和valid</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出现了其他字符如果没有处理会导致字符数量过多, 所以选择用 rigth - left &gt; s2.size() 来判断</span></span><br><span class="line"><span class="comment">我们需要判断结果的出现，所以将 = 放进了判断中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>( right - left &gt;= s2.<span class="built_in">size</span>() )&#123;</span><br><span class="line">    <span class="keyword">if</span>(valid == need.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="comment">// 满足情况</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> d = s1[left];</span><br><span class="line">    left++;</span><br><span class="line">    <span class="keyword">if</span>(need.<span class="built_in">count</span>(d))&#123;</span><br><span class="line">        <span class="keyword">if</span>(window[d] == need[d])&#123;</span><br><span class="line">            valid --;</span><br><span class="line">        &#125;</span><br><span class="line">        window[d]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【无重复字符最长子串】</li></ul><blockquote><p>找到 s 中没有重复字符的最长子串。</p><p>"pwwkew" =&gt; "wke"</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这道题在框架上更为简单，是一个变种，但是在考虑缩减窗口上还是值得思考一番</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; window;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(right &lt; s.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">char</span> c = s[right];</span><br><span class="line">        right++;</span><br><span class="line">        window[c]++;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        缩减窗口的时机: 存在重复字符</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">while</span>(window[c] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">char</span> d = s[left];</span><br><span class="line">            left++;</span><br><span class="line">            window[d]--;</span><br><span class="line">        &#125;</span><br><span class="line">        len = <span class="built_in">max</span>(len, right-left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分搜索">二分搜索</h2><p>【二分搜索】是十分常见的算法，其思想十分简单，但是在细节上的处理较为繁琐和复杂。</p><p>下面针对不同的场景和问题来探究一下二分搜索的细节</p><h3 id="二分搜索框架">0 二分搜索框架</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchFramework</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = ...</span><br><span class="line">    <span class="built_in">whilie</span>(...)&#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>...</code> 处就是之后要考虑的细节</li><li><code>left + (right - left) / 2</code> 防止溢出问题</li></ul><h3 id="普通二分搜索">1 普通二分搜索</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 [left, right] 型的搜索区间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">whilie</span>( left &lt;= right )&#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>right = nums.size() - 1</code> 表示是在<code>[left, right]</code> 这样的闭区间中搜索的 =&gt; 所以 while中的循环条件是 <code>left &lt;= right</code> 而不是<code>left &lt; right</code> 因为 <code>left == right</code>时，<code>[left, right]</code>这个区间仍然是可用的。</li><li>在 <code>if-else</code>结构中的操作，和搜索区间是统一的。【搜索区间】其实就是可能出现解的区间，问题在于区间的开闭需要统一。比如如果要使用闭区间，就要<code>right = nums.size() - 1</code>，在更新<code>left</code> 和 <code>right</code>的时候也要保证更新后搜索区间是闭区间。相反，如果要使用开区间，就要<code>right = nums.size()</code> ，在更新 <code>left</code> 和<code>right</code> 时也要保证更新后搜索区间是开区间。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [left, right) 型搜索区间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>(); <span class="comment">// 注意</span></span><br><span class="line">    <span class="keyword">while</span>( left &lt; right )&#123; <span class="comment">// 注意</span></span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid; <span class="comment">// 注意</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找左侧边界的二分查找">2 寻找左侧边界的二分查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [left, right] 搜索区间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchLeftBound</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>; <span class="comment">// [1]</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123; <span class="comment">// [2]</span></span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// [3]</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// [4]</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (left &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[left] == target) ? left : <span class="number">-1</span>; <span class="comment">// [5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[1]：<code>right = nums.size() - 1</code> 意味着选择 闭区间作为搜索区间 <code>[left, right]</code></li><li>[2]：闭区间，有效的循环范围是 <code>left &lt;= right</code>或者说终止条件是 <code>left = right + 1</code></li><li>[3]、[4]：保证搜索区间是闭区间（保证搜索区间之间没有重叠）</li><li>[5]：考虑终止条件时，<code>left</code>和<code>right</code>的情况：1、如果<code>nums</code>中存在<code>target</code>，<code>nums[left] == target</code>；2、如果<code>nums</code>中不存在<code>target</code>，<code>left == nums.size() || left == 0</code>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [left, right) 搜索区间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchLeftBound</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (left &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[left] == target) ? left : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找右侧边界的二分查找">3 寻找右侧边界的二分查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 [left, right] 闭区间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchRightBound</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == target) ? right : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重点说一下<code>return</code>：查找右边界的情况要些许复杂一点，和搜索区间的开闭有一定的关系。对于闭区间，终止条件是<code>left == right + 1</code>，经过简单的推理可以知道如果nums中存在target的话，nums[right]==target；如果不存在的话，<code>right == -1 || right = nums.size() - 1</code>，分别对应于<code>target</code>小于全部<code>nums</code>元素和大于全部<code>nums</code>元素。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 [left, right) 开区间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchRightBound</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (right &gt; <span class="number">0</span> &amp;&amp; nums[right - <span class="number">1</span>] == target) ? right - <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>而对于开区间，如果<code>nums</code>中存在<code>target</code>，<code>nums[right - 1] == target</code>（因为是开区间，<code>right</code>位置的值是取不到的，所以需要减一）；如果不存在的话，<code>right == 0 || right == nums.size()</code>，同样分别对应于<code>target</code>小于全部<code>nums</code>元素和大于全部<code>nums</code>元素。</li></ul><h3 id="二分搜索的题型解析">4 二分搜索的题型解析</h3><p>从上面的例子可以看出，我们使用二分搜索的情景一般如下：【有序数组】、【查找元素或元素边界】</p><p>但是这大大限制了二分搜索的使用，下面我们对二分搜索使用的场景做一下抽象和总结。</p><p>首先，我们还是把眼光放到二分搜索的最普通的场景上。其实对二分搜索最重要的是【有序数组】，只有数组是有序的，我们才能根据中间位置的情况一次筛除掉一半的元素，以达到<spanclass="math inline">\(lg(n)\)</span>的时间复杂度。</p><p>其实，【有序数组】本质上是【单调】，二分搜索之所以可以达到<spanclass="math inline">\(lg(n)\)</span>的复杂度，就是利用了【单调】的性质。</p><p>进一步泛化，我们可以将上述情景抽象成</p><blockquote><p>存在一个单调函数 f(x) ，给定 一个值 target ，返回 令 f(x) = target成立的 x</p><p>（这个单调函数其实就是返回下标x对应的nums数组中的值）</p></blockquote><p>所以，如果我们可以从题目中抽象出</p><p>1、自变量 x</p><p>2、建立在 x 上的单调函数</p><p>3、一个target</p><p>我们就可以使用二分搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">whilie</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">f</span>(nums, mid);</span><br><span class="line">        <span class="keyword">if</span>(res == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过三个题目来具体讲解一下</p><ul><li>【875.爱吃香蕉的珂珂】</li></ul><blockquote><p>珂珂喜欢吃香蕉。这里有 <code>n</code> 堆香蕉，第 <code>i</code>堆中有 <code>piles[i]</code> 根香蕉。警卫已经离开了，将在 <code>h</code>小时后回来。</p><p>珂珂可以决定她吃香蕉的速度 <code>k</code>（单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 <code>k</code>根。如果这堆香蕉少于 <code>k</code>根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。</p><p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p><p>返回她可以在 <code>h</code> 小时内吃掉所有香蕉的最小速度<code>k</code>（<code>k</code> 为整数）。</p></blockquote><p>分析：</p><ol type="1"><li><p>x：吃香蕉的速度 k</p></li><li><p>f(x)：在k的吃香蕉速度下，需要的时间</p><p><strong><span class="math inline">\(f(x) = \sum_{i=1}^{n} \lceil\frac{piles[i]}{x} \rceil\)</span></strong></p><p>很明显是一个单调函数</p></li><li><p>target：f(x) &lt;= h</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minEatingSpeed</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 确定 吃香蕉速度 x 的区间 [low, high]</span></span><br><span class="line">        <span class="type">int</span> low = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> pile : piles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; pile) &#123;</span><br><span class="line">                max = pile;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> high = max;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2 二分搜索</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="type">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> hours = <span class="built_in">timeCost</span>(piles, mid);</span><br><span class="line">            <span class="keyword">if</span> (hours &lt;= h) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hours &gt; h) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// f(x)</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">timeCost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> hours = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> speed = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            hours += <span class="built_in">ceil</span>(nums[i] / speed);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hours;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>【1011.在-d-天内送达包裹的能力】</li></ul><blockquote><p>传送带上的包裹必须在 <code>days</code>天内从一个港口运送到另一个港口。</p><p>传送带上的第 <code>i</code> 个包裹的重量为<code>weights[i]</code>。每一天，我们都会按给出重量（<code>weights</code>）的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。</p><p>返回能在 <code>days</code>天内将传送带上的所有包裹送达的船的最低运载能力。</p></blockquote><p>分析：</p><ol type="1"><li><p>x：船的运载能力</p></li><li><p>f(x)：船的运载能力对应的需要的天数</p><p>这个比较明显，很容易想到，船的运载能力越大，需要的天数肯定不会越多，应该是非递增函数。</p></li><li><p>target：f(x) &lt;= days</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shipWithinDays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; weights, <span class="type">int</span> days)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 船的最低承载能力不能小于weights数组中最大的元素</span></span><br><span class="line">        <span class="comment">// 最高承载能力只要是weights数组元素之和即可</span></span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> weight : weights) &#123;</span><br><span class="line">            low = <span class="built_in">max</span>(weight, low);</span><br><span class="line">            high += weight;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="type">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> day = <span class="built_in">daysNeeded</span>(weights, mid);</span><br><span class="line">            <span class="keyword">if</span> (day &lt;= days) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day &gt; days) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// f(x) 某运载能力下，需要的天数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">daysNeeded</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; weights, <span class="type">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> days = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> weight : weights) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum + weight &gt; capacity) &#123;</span><br><span class="line">                days++;</span><br><span class="line">                sum = weight;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) days++;</span><br><span class="line">        <span class="keyword">return</span> days;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>【410.分割数组的最大值】</li></ul><blockquote><p>给定一个非负整数数组 <code>nums</code> 和一个整数 <code>m</code>，你需要将这个数组分成 <code>m</code> 个非空的连续子数组。</p><p>设计一个算法使得这 <code>m</code> 个子数组各自和的最大值最小。</p></blockquote><p>这道题在f(x)的选择上比较巧妙</p><p>【分析】</p><p>首先，划分成多少个子数组（m）是确定的，子数组和的最大值只是跟划分方式有关。但是划分方式又不好用数表示出来，所以想写成子数组和的最大值关于划分方式的函数 肯定是行不通的。</p><p>其次，我们要写成 f(x) 的形式，其中 x肯定是数。在这道题中，唯一会变化的数就是子数组的和的最大值。所以大概可以确定，x就是子数组和的最大值。</p><p>那 f(x)是什么呢？根据题意大概就是【是否存在某种划分方式使得子数组和的最大值=x】这样的函数，得到的是0 和 1。只要这个函数以某个分界点一边是0一边是1，也是一种单调函数。</p><p>但是很遗憾，【是否存在某种划分方式使得子数组和的最大值=x】这个函数得到的0/1分布是散乱的。</p><p>下面这个就是最有技巧的一步了：<font color='red'>【是否存在某种划分方式使得子数组和的最大值&lt;= x】</font></p><p>这个函数得到的0/1分布就是以某个点为分界线的，是单调的。</p><ol type="1"><li>x：子数组和的最大值</li><li>f(x)：是否存在某种划分方式使得子数组和的最大值 &lt;= x</li><li>target：f(x) == 1</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">splitArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 判断 x 的范围: 数组nums的最大值 - 数组nums的元素之和</span></span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            low = <span class="built_in">max</span>(num, low);</span><br><span class="line">            high += num;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2 二分搜索</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="type">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">bool</span> res = <span class="built_in">isExist</span>(nums, m, mid);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="literal">true</span>) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res == <span class="literal">false</span>) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否存在一种分割方式使得子数组的和的最大值&lt;=x</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相反的思路: 将数组尽可能少的分成和小于x的子数组，如果最终得到的子数组数 &lt;= m(要求划分的子数组个数), 那么就是c</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isExist</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> m, <span class="type">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum + num &gt; max) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                sum = num;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) cnt++;</span><br><span class="line">        <span class="keyword">return</span> cnt &lt;= m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="田忌赛马">田忌赛马</h2><blockquote><p>优势洗牌 870</p></blockquote><p>算法思想：<font color='red'><strong>如果没办法赢就用最差的去输</strong></font></p><blockquote><p>给定两个大小相等的数组 <code>nums1</code> 和<code>nums2</code>，<code>nums1</code> 相对于 <code>nums</code>的<em>优势</em>可以用满足 <code>nums1[i] &gt; nums2[i]</code> 的索引<code>i</code> 的数目来描述。</p><p>返回 nums1 的<strong>任意</strong>排列，使其相对于 <code>nums2</code>的优势最大化。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; p1, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1.second &lt; p2.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">advantageCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 由于最终的结果是根据nums2的原始顺序的，所以不能直接对nums2进行排序，需要使用priority_queue进行排序</span></span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            v.<span class="built_in">push_back</span>(&#123;i, nums2[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="comment">// 2 排序nums1</span></span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 3 使用双指针进行遍历</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums1.size())</span></span>;</span><br><span class="line">        <span class="type">int</span> right = nums1.<span class="built_in">size</span>() - <span class="number">1</span>, left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index = right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 有优势</span></span><br><span class="line">            <span class="keyword">if</span> (nums1[right] &gt; v[index].second) &#123;</span><br><span class="line">                res[v[index].first] = nums1[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 没有优势</span></span><br><span class="line">                res[v[index].first] = nums1[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="原地修改数组">原地修改数组</h2><blockquote><p>删除有序数组中的重复项 26</p><p>删除排序链表中的重复元素 83</p><p>移除元素 27</p><p>移动零 283</p></blockquote><h3 id="快慢指针">快慢指针</h3><blockquote><p>让快指针在前面探路，当快指针所指向的值和慢指针不同时，则将慢指针向前移动并更新其值为快指针所指向的值</p></blockquote><ul><li>【删除有序数组中的重复项】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast != nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[slow] != nums[fast])&#123;</span><br><span class="line">            slow ++;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【删除排序链表中的重复元素】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode* slow = head, * fast = head;</span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fast-&gt;val != slow-&gt;val)&#123;</span><br><span class="line">            slow-&gt;next = fast;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【移除元素】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] == val) &#123;</span><br><span class="line">            nums[left] = nums[right];</span><br><span class="line">            right--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快慢指针</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast != nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != val) &#123;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【移除零】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">移除0元素 + 末尾修改成0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">removeElement</span>(nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(; len &lt; nums.<span class="built_in">size</span>(); len++)&#123;</span><br><span class="line">        nums[len] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ku&#x27;ao</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast != nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// swap</span></span><br><span class="line">            <span class="type">int</span> tmp = nums[slow];</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            nums[fast] = tmp;</span><br><span class="line">            </span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表问题">单链表问题</h2><blockquote><p>合并两个有序链表 21</p><p>合并K个升序链表 23</p><p>环形链表 141</p><p>环形链表Ⅱ 142</p><p>链表的中间节点 876 =&gt; 快慢指针 fast指针走2步，slow指针走1步</p><p>相交链表 160</p><p>删除链表的倒数第N个节点 19 =&gt; 双指针一个指针先走n步，再两个指针同时走</p></blockquote><ul><li>【合并两个有序链表】</li></ul><p>采用双指针 + <font color='red'><strong>dummy头结点</strong></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">    ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    ListNode *p = dummy, *p1 = list1, *p2 = list2;</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="literal">nullptr</span> &amp;&amp; p2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1-&gt;val &gt; p2-&gt;val) &#123;</span><br><span class="line">            p-&gt;next = p2;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p-&gt;next = p1;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p1 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p-&gt;next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p-&gt;next = p2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【合并k个升序链表】</li></ul><p>前一道题的升级版。难度在于如何快速找到 k 个 ListNode 中的最小结点=&gt; 使用 priority_queue 最小堆</p><p>算法时间复杂度是 <span class="math inline">\(O(NlgK)\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(ListNode* p1, ListNode* p2)</span> </span>&#123; <span class="keyword">return</span> p1-&gt;val &gt; p2-&gt;val; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 最小堆</span></span><br><span class="line">        priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, cmp&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lists.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lists[i] != <span class="literal">nullptr</span>) q.<span class="built_in">push</span>(lists[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* p = dummy;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ListNode* t = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            p-&gt;next = t;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            <span class="comment">// 该链表的下一个元素，加入堆中</span></span><br><span class="line">            <span class="keyword">if</span> (t-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                t = t-&gt;next;</span><br><span class="line">                q.<span class="built_in">push</span>(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>【删除链表的倒数第N个节点】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    ListNode *p1 = head, *p2 = dummy;</span><br><span class="line">    <span class="comment">// p1先向前走n步</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// p1和p2一起向前走 直到p1走到链表末尾</span></span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">        p2 = p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p2-&gt;next = p2-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【链表的中间节点】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快慢指针</span></span><br><span class="line"><span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode *fast = head, *slow = head;</span><br><span class="line">    <span class="comment">// fast一次走两步 slow一次走一步</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【环形链表】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode *fast = head, *slow = head;</span><br><span class="line">    <span class="comment">// fast 一次走两部 slow 一次走一步</span></span><br><span class="line">    <span class="comment">// 由于fast更快 只要存在环 fast和slow一定会相遇</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【环形链表Ⅱ】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> hasCycle = <span class="literal">false</span>;</span><br><span class="line">    ListNode *fast = head, *slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            hasCycle = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!hasCycle) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    设 s 是环的起点到链表起点的距离 l 是相遇点到环的起点的距离</span></span><br><span class="line"><span class="comment">    易知 慢指针走过的距离为 s + l 快指针走过的是 2(s + l)</span></span><br><span class="line"><span class="comment">    又 快指针比慢指针多走一个环的长度</span></span><br><span class="line"><span class="comment">    所以 2(s+l) - (s+l) = n</span></span><br><span class="line"><span class="comment">    s + l = n</span></span><br><span class="line"><span class="comment">    =&gt; s = n - l</span></span><br><span class="line"><span class="comment">    所以 让慢指针回到链表起点 快指针继续向前 以相同的速度走 最后会在环的起点相遇</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【相交链表】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设A链表与B链表相交的部分长度为 m</span></span><br><span class="line"><span class="comment">A链表剩余部分长度为 x B链表剩余部分长度为 y</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">让 p1 先走A链表 走完再走B链表</span></span><br><span class="line"><span class="comment">p2 先走B链表 走完再走A链表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果存在相交部分 那么就会在相交的起点相遇 因为走的距离都为 x + y + m</span></span><br><span class="line"><span class="comment">如果不存在相交部分 那么就会使得 p1 p2 都为 nullptr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">    ListNode *p1 = headA, *p2 = headB;</span><br><span class="line">    <span class="keyword">while</span> (p1 != p2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 == <span class="literal">nullptr</span>)</span><br><span class="line">            p1 = headB;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p2 == <span class="literal">nullptr</span>)</span><br><span class="line">            p2 = headA;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表操作递归思想">链表操作递归思想</h2><blockquote><p>反转链表 206</p><p>反转链表 Ⅱ 92</p></blockquote><ul><li>反转整个链表</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* p = <span class="built_in">reverse</span>(head-&gt;next);</span><br><span class="line">    <span class="comment">// 把后一个结点的next指针指向当前的节点(head)</span></span><br><span class="line">    head-&gt;next-&gt;next = head;</span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>反转链表的前n个结点</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ListNode* successor = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="function">ListNode* <span class="title">reverseN</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        successor = head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* p = <span class="built_in">reverseN</span>(head-&gt;next, --n);</span><br><span class="line">    head-&gt;next-&gt;next = head;</span><br><span class="line">    head-&gt;next = successor; <span class="comment">// 改变每次的后继 使得反转后的最后一个结点指向链表剩余部分(n+1个结点)</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>反转链表的一部分</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left == <span class="number">1</span>)&#123; <span class="comment">// 就是反转前n个结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverseN</span>(head, right-left+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向前di&#x27;gui</span></span><br><span class="line">    head-&gt;next = <span class="built_in">reverseBetween</span>(head-&gt;next, left<span class="number">-1</span>, right<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记5-二叉搜索树</title>
      <link href="/2022/09/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B05%EF%BC%88%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%89/"/>
      <url>/2022/09/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B05%EF%BC%88%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一">（一）</h2><blockquote><p>230、二叉搜索树中第K小的元素</p><p>538、把二叉搜索树转换为累加树</p></blockquote><h3 id="二叉搜索树中第k小的元素">【二叉搜索树中第K小的元素】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历二叉树的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    kthSmallestTraversal(root, k);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">rank</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">kthSmallestTraversal</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    kthSmallestTraversal(root.left, k);</span><br><span class="line">    rank++;</span><br><span class="line">    <span class="keyword">if</span>(rank == k)&#123;</span><br><span class="line">        res = root.val;</span><br><span class="line">    &#125;</span><br><span class="line">    kthSmallestTraversal(root.right, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把二叉搜索树转换为累加树">【把二叉搜索树转换为累加树】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    convertBSTHelper(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 关键!! 使用一个外部变量来记录和 大大降低了复杂度</span></span><br><span class="line"><span class="comment">/* 特殊的中序遍历 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">convertBSTHelper</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    convertBSTHelper(root.right);</span><br><span class="line">    root.val += sum;</span><br><span class="line">    sum = root.val;</span><br><span class="line">    convertBSTHelper(root.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二">（二）</h2><h3 id="判断bst的合法性">1、判断BST的合法性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 采用后序遍历的方式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> isValidBST(root.left);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> isValidBST(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(left &amp;&amp; right)&#123; <span class="comment">// 左右子树都是二叉搜索树</span></span><br><span class="line">        <span class="keyword">return</span> isValidBSTHelper(root);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当左右子树都是二叉搜索树时，判断加上根后是否为二叉搜索树</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidBSTHelper</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">is_left_satisfied</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">is_right_satisfied</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左边是否满足情况</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left_max</span> <span class="operator">=</span> root.left;</span><br><span class="line">    <span class="keyword">while</span> (left_max != <span class="literal">null</span> &amp;&amp; left_max.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        left_max = left_max.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left_max == <span class="literal">null</span> || left_max.val &lt; root.val)&#123;</span><br><span class="line">        is_left_satisfied = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右边是否满足情况</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right_min</span> <span class="operator">=</span> root.right;</span><br><span class="line">    <span class="keyword">while</span> (right_min != <span class="literal">null</span> &amp;&amp; right_min.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        right_min = right_min.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(right_min == <span class="literal">null</span> || right_min.val &gt; root.val)&#123;</span><br><span class="line">        is_right_satisfied = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> is_left_satisfied &amp; is_right_satisfied;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 分解问题</span></span><br><span class="line"><span class="comment"> * 但是由于在原函数上不好直接分解，所以需要扩展函数参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isValidBST1Helper(root, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidBSTHelper</span><span class="params">(TreeNode root, TreeNode min, TreeNode max)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( (min != <span class="literal">null</span> &amp;&amp; root.val &lt;= min.val) ||</span><br><span class="line">                (max != <span class="literal">null</span> &amp;&amp; root.val &gt;= max.val))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isValidBST1Helper(root.left, min, root) &amp;&amp;</span><br><span class="line">                   isValidBST1Helper(root.right, root, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在bst中搜索元素">2、在BST中搜索元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == val) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val &gt; val) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST1(root.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST1(root.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在bst中插入元素">3、在BST中插入元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; val)&#123;</span><br><span class="line">        root.left = insertIntoBST(root.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.right = insertIntoBST(root.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在bst中删除元素">4、在BST中删除元素</h3><p>删除元素相对来说要复杂一些。</p><p>因为做递归的时候是将所有节点都当作根节点（一颗子树的根）来看的，所以如果需要删除，那么就要找到其左子树的最大结点或者右子树的最小结点来替换根节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == key)&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left_min</span> <span class="operator">=</span> root.left;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">min_parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(left_min != <span class="literal">null</span> &amp;&amp; left_min.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            min_parent = left_min;</span><br><span class="line">            left_min = left_min.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left_min == <span class="literal">null</span>)&#123; <span class="comment">// 没有左子树</span></span><br><span class="line">            <span class="keyword">return</span> root.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 这里是采用了交换两个结点的值来实现删除结点的交换</span></span><br><span class="line"><span class="comment">            * 也可以实际交换两个结点</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            root.val = left_min.val;</span><br><span class="line">            <span class="keyword">if</span>(min_parent == <span class="literal">null</span>)&#123; <span class="comment">// 左子树的根节点就是最大，没有右节点</span></span><br><span class="line">                root.left = left_min.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 右边没有结点，左边可能有</span></span><br><span class="line">                min_parent.right = left_min.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(root.val &gt; key) &#123;</span><br><span class="line">        root.left = deleteNode(root.left, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.right = deleteNode(root.right, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结">5、总结</h3><ul><li><p>BST 的框架</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">BST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.val == val)&#123;</span><br><span class="line">        <span class="comment">// 具体操作</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(root.val &gt; val)&#123;</span><br><span class="line">        BST(root.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        BST(root.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在解决递归问题时，如果发现在原函数上难以正确执行，可以考虑</p><ul><li>借助外部变量</li><li>借助另外一个函数，增加函数参数</li></ul></li></ul><h2 id="三">（三）</h2><blockquote><p>96、不同的二叉搜索树</p><p>95、不同的二叉搜索树 Ⅱ</p></blockquote><h3 id="二叉树数量">【二叉树数量】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归求解</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 其实就是n个数能形成多少个合法二叉搜索树: i, i+1, i+2, ... , i+n-1</span></span><br><span class="line"><span class="comment">* numTrees(n) = numTrees(j-1) + numTrees(n-j) 其中 j 在 [1,n] 之间</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">// 递归 =&gt; 很慢 递归+循环 存在重叠的部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123; <span class="comment">// 分别以i为根节点</span></span><br><span class="line">        sum += numTrees(i-<span class="number">1</span>) * numTrees(n-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代 动态规划 大大降低了时间复杂度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    tmp[<span class="number">0</span>] = <span class="number">1</span>; tmp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            tmp[i] += (tmp[j-<span class="number">1</span>] * tmp[i-j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成二叉树">【生成二叉树】</h3><blockquote><p>给你一个整数 <code>n</code> ，请你生成并返回所有由 <code>n</code>个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的不同<strong>二叉搜索树</strong> 。可以按 <strong>任意顺序</strong>返回答案。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">generateTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> generateTree(<span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title function_">generateTree</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> h)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; h)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;TreeNode&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt;= h; i++)&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;TreeNode&gt; lefts = generateTree(l, i-<span class="number">1</span>);</span><br><span class="line">        List&lt;TreeNode&gt; rights = generateTree(i+<span class="number">1</span>, h);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(TreeNode left : lefts)&#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode right : rights) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(i);</span><br><span class="line">                root.left = left;</span><br><span class="line">                root.right = right;</span><br><span class="line">                res.add(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划 不如递归优雅 而且 优化不了多少</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记4-二叉树</title>
      <link href="/2022/09/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B04%EF%BC%88%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/"/>
      <url>/2022/09/15/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B04%EF%BC%88%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一">（一）</h2><blockquote><p>翻转二叉树 226</p><p>二叉树展开为链表 114</p><p>填充每个节点的下一个右侧节点指针 116</p></blockquote><h3 id="翻转二叉树">【翻转二叉树】</h3><blockquote><p>给你一棵二叉树的根节点 <code>root</code>，翻转这棵二叉树，并返回其根节点。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode* right = <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        TreeNode* left = <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        root-&gt;left = left;</span><br><span class="line">        root-&gt;right = right;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3id="填充每个节点的下一个右侧节点指针">【填充每个节点的下一个右侧节点指针】</h3><blockquote><p>给定一个 <strong>完美二叉树</strong>，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填充它的每个 next指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将next 指针设置为 <code>NULL</code>。</p><p>初始状态下，所有 next 指针都被设置为 <code>NULL</code>。</p></blockquote><p>【分析】</p><p>这道题的递归解法十分巧妙，而迭代解法更为自然</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 借用队列实现的迭代解法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param root</span></span><br><span class="line"><span class="comment">     * @return Node*</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Node* <span class="title">connect1</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="literal">nullptr</span>);  <span class="comment">// 用nullptr标志一层的结束</span></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            Node* n = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (n != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                n-&gt;next = q.<span class="built_in">front</span>();</span><br><span class="line">                <span class="keyword">if</span> (n-&gt;left) q.<span class="built_in">push</span>(n-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (n-&gt;right) q.<span class="built_in">push</span>(n-&gt;right);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="literal">nullptr</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 递归解法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param root</span></span><br><span class="line"><span class="comment">     * @return Node*</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        root-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">connectionTwoNode</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 采用两个结点的递归</span></span><br><span class="line">    <span class="comment">// 但是这个递归会存在重叠部分</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connectionTwoNode</span><span class="params">(Node* node1, Node* node2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node1 == <span class="literal">nullptr</span> || node2 == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        node1-&gt;next = node2;</span><br><span class="line">        node2-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">connectionTwoNode</span>(node1-&gt;left, node1-&gt;right);</span><br><span class="line">        <span class="built_in">connectionTwoNode</span>(node1-&gt;right, node2-&gt;left);</span><br><span class="line">        <span class="built_in">connectionTwoNode</span>(node2-&gt;left, node2-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二叉树展开为链表">【二叉树展开为链表】</h3><blockquote><p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p><ul><li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中<code>right</code> 子指针指向链表中下一个结点，而左子指针始终为<code>null</code> 。</li><li>展开后的单链表应该与二叉树 <ahref="https://baike.baidu.com/item/先序遍历/6442839?fr=aladdin"><strong>先序遍历</strong></a>顺序相同。</li></ul></blockquote><p>【思路】</p><p>先将<code>root</code>的左子树部分展开为链表，再将右子树部分展开为链表，最后进行连接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">connect</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 将左边的链表、根节点、右边的链表进行连接</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 找到左子节点的最右子节点</span></span><br><span class="line">        TreeNode* rightConnector = root-&gt;left;</span><br><span class="line">        <span class="keyword">while</span> (rightConnector-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            rightConnector = rightConnector-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rightConnector-&gt;right = root-&gt;right;</span><br><span class="line">        root-&gt;right = root-&gt;left;</span><br><span class="line">        root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>二叉树的递归解法需要从大局来看，先将整个二叉树看成是左子树、根节点、右子树三部分，然后考虑应该对左子树和右子树如何递归操作，以及和根节点如何整合。不要局限于递归的细节，而是用整体来看待。但是对于最基本的base-case还是要考虑清楚以及是否能正确执行。</p><h2 id="二">（二）</h2><blockquote><p>最大二叉树 654</p><p>从前序与中序遍历序列构造二叉树 105</p><p>从中序与后序遍历序列构造二叉树 106</p></blockquote><h3 id="最大二叉树">【最大二叉树】</h3><blockquote><p>给定一个不重复的整数数组 <code>nums</code> 。<strong>最大二叉树</strong> 可以用下面的算法从 <code>nums</code>递归地构建:</p><ol type="1"><li>创建一个根节点，其值为 <code>nums</code> 中的最大值。</li><li>递归地在最大值 <strong>左边</strong> 的<strong>子数组前缀上</strong> 构建左子树。</li><li>递归地在最大值 <strong>右边</strong> 的<strong>子数组后缀上</strong> 构建右子树。</li></ol><p>返回 <em><code>nums</code> 构建的</em> *<strong>最大二叉树*</strong>。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">constructMaximumBinaryTreeHelper</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTreeHelper</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left,</span></span></span><br><span class="line"><span class="params"><span class="function">                                               <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// 找到[left, right]部分的最大元素</span></span><br><span class="line">        <span class="type">int</span> idx = left;</span><br><span class="line">        <span class="type">int</span> val = nums[left];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; val) &#123;</span><br><span class="line">                val = nums[i];</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建根节点</span></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        root-&gt;left = <span class="built_in">constructMaximumBinaryTreeHelper</span>(nums, left, idx - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">constructMaximumBinaryTreeHelper</span>(nums, idx + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3id="从前序与中序遍历序列构造二叉树">【从前序与中序遍历序列构造二叉树】</h3><blockquote><p>给定两个整数数组 <code>preorder</code> 和 <code>inorder</code> ，其中<code>preorder</code> 是二叉树的<strong>先序遍历</strong>，<code>inorder</code>是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过先序遍历数组确定根的位置，然后通过中序遍历数组构造二叉树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">buildTreeHelper</span>(preorder, <span class="number">0</span>, preorder.<span class="built_in">size</span>() - <span class="number">1</span>, inorder, <span class="number">0</span>,</span><br><span class="line">                               inorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTreeHelper</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, <span class="type">int</span> preleft, <span class="type">int</span> preright,</span></span></span><br><span class="line"><span class="params"><span class="function">                              vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">int</span> inleft, <span class="type">int</span> inright)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preleft &gt; preright || inleft &gt; inright) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// 通过先序遍历数组部分得到根节点</span></span><br><span class="line">        <span class="type">int</span> root_val = preorder[preleft];</span><br><span class="line">        <span class="comment">// 到中序遍历数组中找到根节点</span></span><br><span class="line">        <span class="type">int</span> idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = inleft; i &lt;= inright; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == root_val) &#123;</span><br><span class="line">                idx = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建根节点</span></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(root_val);</span><br><span class="line">        <span class="comment">// 判断该根节点左右子树的结点数</span></span><br><span class="line">        <span class="type">int</span> left_nodes = idx - inleft;</span><br><span class="line">        <span class="type">int</span> right_nodes = inright - idx;</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        root-&gt;left =</span><br><span class="line">            <span class="built_in">buildTreeHelper</span>(preorder, preleft + <span class="number">1</span>, (left_nodes + preleft),</span><br><span class="line">                            inorder, inleft, idx - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">buildTreeHelper</span>(preorder, (left_nodes + preleft + <span class="number">1</span>),</span><br><span class="line">                                      preright, inorder, idx + <span class="number">1</span>, inright);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3id="从中序与后序遍历序列构造二叉树">【从中序与后序遍历序列构造二叉树】</h3><blockquote><p>给定两个整数数组 <code>inorder</code> 和 <code>postorder</code>，其中 <code>inorder</code> 是二叉树的中序遍历， <code>postorder</code>是同一棵树的后序遍历，请你构造并返回这颗 <em>二叉树</em> 。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">buildTreeHelper</span>(inorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>() - <span class="number">1</span>, postorder, <span class="number">0</span>,</span><br><span class="line">                               postorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTreeHelper</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">int</span> inleft, <span class="type">int</span> inright,</span></span></span><br><span class="line"><span class="params"><span class="function">                              vector&lt;<span class="type">int</span>&gt;&amp; postorder, <span class="type">int</span> postleft,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="type">int</span> postright)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inleft &gt; inright) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// 根据后序遍历数组找到根节点 最后一个就是根节点</span></span><br><span class="line">        <span class="type">int</span> root_val = postorder[postright];</span><br><span class="line">        <span class="comment">// 找到根节点在中序遍历数组中的位置</span></span><br><span class="line">        <span class="type">int</span> idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = inleft; i &lt;= inright; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == root_val) &#123;</span><br><span class="line">                idx = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建根节点</span></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(root_val);</span><br><span class="line">        <span class="comment">// 确定左子树和右子树结点数量</span></span><br><span class="line">        <span class="type">int</span> left_nodes = idx - inleft;</span><br><span class="line">        <span class="type">int</span> right_nodes = inright - idx;</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        root-&gt;left = <span class="built_in">buildTreeHelper</span>(inorder, inleft, idx - <span class="number">1</span>, postorder,</span><br><span class="line">                                     postleft, postright - right_nodes - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">buildTreeHelper</span>(inorder, idx + <span class="number">1</span>, inright, postorder,</span><br><span class="line">                                      postleft + left_nodes - <span class="number">1</span>, postright - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结-1">【总结】</h3><p>这三道题都是关于如何构建二叉树的，而构建二叉树的关键在于【中序遍历数组】+【可以确定根节点的条件】</p><p>在【最大二叉树】中可以确定根节点的条件是最大元素，而在后两道题中分别是前序遍历数组和后序遍历数组。</p><h2 id="三">（三）</h2><blockquote><p>寻找重复的子树 652</p></blockquote><h3 id="寻找重复的子树">【寻找重复的子树】</h3><blockquote><p>给定一棵二叉树<code>root</code>，返回所有<strong>重复的子树</strong>。</p><p>对于同一类的重复子树，你只需要返回其中任意<strong>一棵</strong>的根结点即可。</p><p>如果两棵树具有<strong>相同的结构</strong>和<strong>相同的结点值</strong>，则它们是<strong>重复</strong>的。</p></blockquote><p>【思路】</p><p>要找重复的子树，【就需要记录之前的子树，然后再去匹配】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;string, <span class="type">int</span>&gt; memo; <span class="comment">// 记录子树出现的次数 string表示树的结构 int表示出现次数</span></span><br><span class="line">    vector&lt;TreeNode*&gt; res; <span class="comment">// 结果集</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">findDuplicateSubtrees</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">findDuplicateSubtreesHelper</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">findDuplicateSubtreesHelper</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string left = <span class="built_in">findDuplicateSubtreesHelper</span>(root-&gt;left);</span><br><span class="line">        string right = <span class="built_in">findDuplicateSubtreesHelper</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        string tree = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        tree.<span class="built_in">append</span>(left).<span class="built_in">append</span>(<span class="string">&quot;,&quot;</span>).<span class="built_in">append</span>(right).<span class="built_in">append</span>(<span class="string">&quot;,&quot;</span>).<span class="built_in">append</span>(</span><br><span class="line">            <span class="built_in">to_string</span>(root-&gt;val));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (memo.<span class="built_in">count</span>(tree) &amp;&amp; memo[tree] == <span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(root);</span><br><span class="line">            memo[tree] = memo[tree] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!memo[tree]) &#123;</span><br><span class="line">            memo[tree] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的序列化">二叉树的序列化</h2><blockquote><ol start="297" type="1"><li>二叉树的序列化与反序列化</li></ol></blockquote><p><strong>使用Java</strong></p><blockquote><p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 /反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p><p><strong>提示:</strong> 输入输出格式与 LeetCode目前使用的方式一致，详情请参阅 <ahref="vscode-webview://158f0tu0bi5btl1al2do8fjqofsbp3m18hvj94kqe2d694ac5r1p/faq/#binary-tree">LeetCode序列化二叉树的格式</a>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p></blockquote><p>这里提供四种方法（两种思路：递归和迭代）</p><p>每种方法的序列化过程都十分的简单，关键在于反序列化过程。</p><p>1、【前序遍历】/【后序遍历】：按理说，将二叉树序列化后再变回二叉树，是还需要中序遍历数组的。但是在序列化的时候，将空指针的也加入序列化的过程，也就是说二叉树序列化后可以是包含空指针，有了空指针的位置，就可以只依靠前序遍历或后序遍历重构二叉树。而前序遍历和后序遍历的区别就在于根节点的位置不同。【而这里的递归思路和之前不一样】，之前是找到序列中表示左子树的部分进行递归，...</p><p>2、【层次遍历】：利用队列对二叉树进行按层次遍历</p><p>3、【递归定义】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm.tree.binaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> algorithm.tree.TreeNode;</span><br><span class="line"><span class="keyword">import</span> sun.font.TextRecord;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.generics.tree.Tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.SearchResult;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树的序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Serialization</span> &#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; list;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">preSerialize</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> preSerialize(root.left);</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> preSerialize(root.right);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> root.val + <span class="string">&quot;,&quot;</span> + left + <span class="string">&quot;,&quot;</span> + right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下面这个解法在某些情况下无法给出正确答案，虽然感觉它很正确</span></span><br><span class="line">    <span class="comment">// 这里采用的递归思路是: 找到data中属于左子树和右子树的部分，再去递归</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    private TreeNode preDeserialize(String data)&#123;</span></span><br><span class="line"><span class="comment">        if(data == null || data.length() == 0) return null;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        char c = data.charAt(0);</span></span><br><span class="line"><span class="comment">        if(c == &#x27;#&#x27;) return null;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        // 前序排列的第一个就是根节点</span></span><br><span class="line"><span class="comment">        TreeNode root = new TreeNode(c - &#x27;0&#x27;);</span></span><br><span class="line"><span class="comment">        // 找到左子树的部分</span></span><br><span class="line"><span class="comment">        int left_tree_nodes = 1; // 无论root的左节点是空还是存在左子树 data[1]一定是属于左子树的</span></span><br><span class="line"><span class="comment">        int i = 1;</span></span><br><span class="line"><span class="comment">        while(left_tree_nodes &gt; 0 &amp;&amp; i &lt; data.length())&#123;</span></span><br><span class="line"><span class="comment">            if(data.charAt(i) != &#x27;#&#x27;)&#123; // 如果存在非空结点，左子树在data中的元素个数多2个</span></span><br><span class="line"><span class="comment">                left_tree_nodes += 2;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            left_tree_nodes--;</span></span><br><span class="line"><span class="comment">            i++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        root.left = preDeserialize(data.substring(1, i));</span></span><br><span class="line"><span class="comment">        // 找到右子树的部分</span></span><br><span class="line"><span class="comment">        root.right = preDeserialize(data.substring(i));</span></span><br><span class="line"><span class="comment">        return root;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">preDeserialize</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, data.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> preDeserializeHelper();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">preDeserializeHelper</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">rootVal</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(rootVal.equals(<span class="string">&quot;#&quot;</span>)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(rootVal));</span><br><span class="line">        </span><br><span class="line">        root.left = preDeserializeHelper();</span><br><span class="line">        root.right = preDeserializeHelper();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">postSerialize</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> postSerialize(root.left);</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> postSerialize(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> left + <span class="string">&quot;,&quot;</span> + right + <span class="string">&quot;,&quot;</span> + root.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">postDeserialize</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        String[] split = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> split.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            list.add(split[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> postDeserializeHelper();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">postDeserializeHelper</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">rootVal</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(rootVal.equals(<span class="string">&quot;#&quot;</span>)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(rootVal));</span><br><span class="line">        </span><br><span class="line">        root.right = postDeserializeHelper();</span><br><span class="line">        root.left = postDeserializeHelper();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">inSerialize</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> postSerialize(root.left);</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> postSerialize(root.right);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> left + <span class="string">&quot;,&quot;</span> + root.val + <span class="string">&quot;,&quot;</span> + right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无法进行反序列化</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">inDeserialize</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用层级遍历</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">levelSerialize</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(node == <span class="literal">null</span>) sb.append(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(node.val);</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!queue.isEmpty()) sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">levelDeserialize</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data.equals(<span class="string">&quot;&quot;</span>)) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 存在一个问题: split空字符串的时候返回的数组长度为1</span></span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, data.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> levelDeserializeHelper();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">levelDeserializeHelper</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(list.remove(<span class="number">0</span>))); <span class="comment">// 根节点</span></span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">leftVal</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(leftVal.equals(<span class="string">&quot;#&quot;</span>))&#123;</span><br><span class="line">                node.left = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(leftVal));</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">rightVal</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(rightVal.equals(<span class="string">&quot;#&quot;</span>))&#123;</span><br><span class="line">                node.right = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(rightVal));</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> levelSerialize(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> levelDeserialize(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>.split(<span class="string">&quot;,&quot;</span>).length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;X&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> <span class="string">&quot;(&quot;</span> + serialize(root.left) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> <span class="string">&quot;(&quot;</span> + serialize(root.right) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> left + root.val + right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ptr = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> parse(data, ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">parse</span><span class="params">(String data, <span class="type">int</span>[] ptr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.charAt(ptr[<span class="number">0</span>]) == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">            ++ptr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        cur.left = parseSubtree(data, ptr);</span><br><span class="line">        cur.val = parseInt(data, ptr);</span><br><span class="line">        cur.right = parseSubtree(data, ptr);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">parseSubtree</span><span class="params">(String data, <span class="type">int</span>[] ptr)</span> &#123;</span><br><span class="line">        ++ptr[<span class="number">0</span>]; <span class="comment">// 跳过左括号</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subtree</span> <span class="operator">=</span> parse(data, ptr);</span><br><span class="line">        ++ptr[<span class="number">0</span>]; <span class="comment">// 跳过右括号</span></span><br><span class="line">        <span class="keyword">return</span> subtree;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String data, <span class="type">int</span>[] ptr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, sgn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!Character.isDigit(data.charAt(ptr[<span class="number">0</span>]))) &#123;</span><br><span class="line">            sgn = -<span class="number">1</span>;</span><br><span class="line">            ++ptr[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (Character.isDigit(data.charAt(ptr[<span class="number">0</span>]))) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + data.charAt(ptr[<span class="number">0</span>]++) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x * sgn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用后序遍历优化算法">利用后序遍历优化算法</h2><blockquote><p>二叉搜索子树的最大键值和 1373</p><p>给你一棵以 root 为根的 二叉树 ，请你返回 任意二叉搜索子树的最大键值和。</p></blockquote><p>【思路】</p><p>这道题无论是判断是否为BST，还是求树的键值和都需要用到左右子树的相关信息，而判断树是否为BST以及求树的键值和本身又是递归求解，一旦采用前序遍历的思想就是递归套递归，复杂度很高。原因就在于前面递归求过的到后面还得再递归再求一次，复杂度会达到指数级。、</p><p>而使用后序遍历的思想，可以在递归遍历的过程中直接拿到左右子树的相关信息，然后根据这些信息求出该树是否为BST以及键值和，依次向下求解，复杂度大大降低，只有线性复杂度。</p><p>还是要从大局看起，不要一开始就限于细节，应该再整体的递归布局想清楚后再考虑细节问题。否则不容易写出递归的解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NOT_BST</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求二叉树中 键值和最大的二叉搜索子树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSumBST</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> maxSumBSTHelper(root);</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果是二叉树返回该树的键值和，如果不是则返回 NOT_BST</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSumBSTHelper</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> maxSumBSTHelper(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> maxSumBSTHelper(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left != NOT_BST &amp;&amp; right != NOT_BST)&#123; <span class="comment">// 左右子树都是BST</span></span><br><span class="line">            <span class="keyword">if</span>(isBST(root))&#123; <span class="comment">// 判断以root为根的树是否为BST</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tree</span> <span class="operator">=</span> left + root.val + right;</span><br><span class="line">                <span class="keyword">if</span>(tree &gt; maxSum) maxSum = tree;</span><br><span class="line">                <span class="keyword">return</span> tree;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> NOT_BST;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 左子树或者右子树不是BST</span></span><br><span class="line">            <span class="keyword">return</span> NOT_BST;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当该根节点的左右子树均为BST的前提下，判断以root为根的树是否为BST</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否是BST</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isBST</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">is_left_satisfied</span> <span class="operator">=</span> <span class="literal">false</span>; </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">is_right_satisfied</span> <span class="operator">=</span> <span class="literal">false</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断左子树是否满足条件</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> root.left;</span><br><span class="line">        <span class="keyword">while</span> (left != <span class="literal">null</span> &amp;&amp; left.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            left = left.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> || left.val &lt; root.val) is_left_satisfied = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断右子树是否满足条件</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> root.right;</span><br><span class="line">        <span class="keyword">while</span> (right != <span class="literal">null</span> &amp;&amp; right.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            right = right.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="literal">null</span> || right.val &gt; root.val) is_right_satisfied = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> is_left_satisfied &amp; is_right_satisfied;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-2">总结</h2><h3 id="深入理解遍历方式">深入理解遍历方式</h3><h4 id="前中后序遍历">前中后序遍历</h4><p>一般我们求解二叉树的前中后序遍历的框架如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历框架</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">preTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 处理 */</span></span><br><span class="line">    </span><br><span class="line">    preTraversal(root.left);</span><br><span class="line">    preTraversal(root.right);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历框架</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">inTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    inTraversal(root.left);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 处理 */</span></span><br><span class="line">    </span><br><span class="line">    inTraversal(root.right);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历框架</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">postTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    postTraversal(root.left);</span><br><span class="line">    postTraversal(root.right);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 处理 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实，用前中后序遍历的递归框架来解决问题，本质上就是【按照前中后序三种遍历顺序来处理每一个结点】，而利用这种框架来解决二叉树问题，只要考虑在每一个结点位置（<code>/* 处理 */</code>）应该编写怎样的逻辑。</p><h4 id="层次遍历">层次遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">levelTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> q.poll();</span><br><span class="line">        <span class="comment">/* 处理 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两种解题思路">两种解题思路</h3><ul><li>遍历二叉树 =》 回溯算法思想</li><li>分解问题 =》 动态规划思想</li></ul><p>以【二叉树的最大深度】为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分解问题: 将原问题分解为规模更小的子问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> maxDepth(root.right);</span><br><span class="line">    <span class="keyword">return</span> Math.max(leftMax, rightMax) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历二叉树</span></span><br><span class="line"><span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth1</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    traversal(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123; <span class="comment">// 到达分支的最底部</span></span><br><span class="line">        res = Math.max(res, depth);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    depth++; <span class="comment">// 进入子树，深度+1</span></span><br><span class="line">    traversal(root.left);</span><br><span class="line">    traversal(root.right);</span><br><span class="line">    depth--; <span class="comment">// 回到根节点，深度-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的直径">【二叉树的直径】</h3><blockquote><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p></blockquote><p>利用后序遍历的递归方法，得到左右子树中距离子树根节点的最大距离，由此计算经过root结点的最大距离，并更新<code>diameter</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历二叉树</span></span><br><span class="line"><span class="type">int</span> <span class="variable">diameter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    diameterOfBinaryTreeHelper(root);</span><br><span class="line">    <span class="keyword">return</span> diameter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param root 根节点</span></span><br><span class="line"><span class="comment"> * @return 该树距离根节点的最远距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTreeHelper</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> diameterOfBinaryTreeHelper(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> diameterOfBinaryTreeHelper(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">distance_cross_root</span> <span class="operator">=</span> left + right + <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max_distance_to_root</span> <span class="operator">=</span> Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    diameter = Math.max(diameter, distance_cross_root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_distance_to_root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题笔记3-设计数据结构</title>
      <link href="/2022/09/07/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B03%EF%BC%88%E8%AE%BE%E8%AE%A1%EF%BC%89/"/>
      <url>/2022/09/07/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B03%EF%BC%88%E8%AE%BE%E8%AE%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="lru">1 LRU</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=146 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [146] LRU 缓存</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该数据结构需要满足满足的要求:</span></span><br><span class="line"><span class="comment"> * 1、get方法需要根据key值快速获取到value =&gt; 哈希表</span></span><br><span class="line"><span class="comment"> * 2、数据结构中 key-value 需要按照是使用时间排序 =&gt;</span></span><br><span class="line"><span class="comment"> * 这样可以在需要逐出最久没使用的关键字时直接移除最头部或最尾部元素</span></span><br><span class="line"><span class="comment"> * 3、get或者put的 key 后，需要改变其位置，因为其是最近被使用的关键字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 哈希 + shua链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表结点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> key&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> value&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    Node* next&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    Node* prev&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> key, <span class="type">int</span> value) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;key = key;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span> &#123;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    Node *head, *tail;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DoubleLinkedList</span>() &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        head-&gt;next = tail;</span><br><span class="line">        tail-&gt;prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Node* n)</span> </span>&#123;  <span class="comment">// 从链表中删除一个结点</span></span><br><span class="line">        n-&gt;prev-&gt;next = n-&gt;next;</span><br><span class="line">        n-&gt;next-&gt;prev = n-&gt;prev;</span><br><span class="line">        n-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        n-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addInLast</span><span class="params">(Node* n)</span> </span>&#123;  <span class="comment">// 把一个结点插在尾部</span></span><br><span class="line">        tail-&gt;prev-&gt;next = n;</span><br><span class="line">        n-&gt;prev = tail-&gt;prev;</span><br><span class="line">        tail-&gt;prev = n;</span><br><span class="line">        n-&gt;next = tail;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否在某个容量内</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isWithinCap</span><span class="params">(<span class="type">int</span> capacity)</span> </span>&#123; <span class="keyword">return</span> size &lt; capacity; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回第一个元素</span></span><br><span class="line">    <span class="function">Node* <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LRUcache类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, Node*&gt; um;  <span class="comment">// 哈希表</span></span><br><span class="line">    DoubleLinkedList list;         <span class="comment">// 双向链表</span></span><br><span class="line">    <span class="type">int</span> _cap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeRecently</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;  <span class="comment">// 把某个关键字变成最近使用</span></span><br><span class="line">        Node* p = um[key];</span><br><span class="line">        list.<span class="built_in">remove</span>(p);</span><br><span class="line">        list.<span class="built_in">addInLast</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeLeastRecentlyUsed</span><span class="params">()</span> </span>&#123;  <span class="comment">// 逐出最不常使用的关键字</span></span><br><span class="line">        Node* p = list.<span class="built_in">first</span>();</span><br><span class="line">        list.<span class="built_in">remove</span>(p);</span><br><span class="line">        um.<span class="built_in">erase</span>(p-&gt;key);</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="type">int</span> capacity) &#123; _cap = capacity; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!um.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">makeRecently</span>(key);</span><br><span class="line">        <span class="keyword">return</span> um[key]-&gt;value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 已经存在</span></span><br><span class="line">        <span class="keyword">if</span> (um.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            um[key]-&gt;value = value;  <span class="comment">// 更新值</span></span><br><span class="line">            <span class="built_in">makeRecently</span>(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不存在，需要插入</span></span><br><span class="line">        <span class="keyword">if</span> (!list.<span class="built_in">isWithinCap</span>(_cap)) &#123;  <span class="comment">// 满了</span></span><br><span class="line">            <span class="built_in">removeLeastRecentlyUsed</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加在尾部</span></span><br><span class="line">        Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(key, value);</span><br><span class="line">        list.<span class="built_in">addInLast</span>(n);</span><br><span class="line">        um[key] = n;  <span class="comment">// 加在map中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="lfu">2 LFU</h2><p><code>lfu</code> 算法的难度更大，其要求如下：</p><p>1、使用<code>get</code>函数根据<code>key</code>得到<code>value</code>，时间复杂度为<code>O(1)</code></p><p>2、<code>put</code>函数（需要<code>O(1)</code>时间复杂度）</p><p>​2.1、如果<code>key</code>已经存在，那么修改对应的<code>value</code></p><p>​2.2、如果容量够，那么插入一个<code>key-value</code>，且其使用频率（<code>freq</code>）为1</p><p>​2.3、如果容量不够，那么逐出使用频率最少的一个<code>key-value</code>，如果存在多个使用频率最少的<code>key-value</code>，那么逐出最近最不常使用的那一个</p><p>3、所有<code>key-value</code>在被访问后其使用频率<code>freq</code>都应该加一</p><p>分析：</p><p>很明显，需要<code>O(1)</code>的时间复杂度，肯定还是离不开【哈希表】和【链表】</p><p>对上面的要求来逐个分析</p><p>1和3、建立一个 <code>key</code> 到 <code>value</code> 和<code>freq</code> 的哈希映射（<font color='red'>建立key到Node的哈希映射</font>）</p><p>2.1、建立和哈希映射之后可以很好解决</p><p>2.2、建立一个新的key-Node映射即可</p><p>2.3、存在两层的排序【使用频率】和【使用时间】。其中【使用时间】其实就是<code>lru</code>算法中的排序，使用双向链表即可解决。但是注意，是先根据使用【频率排序】，当使用【频率相同】的情况下再根据【使用时间】排序，所以应该是一个freq值对应这一个双向链表，这个双向链表记录【使用时间】的远近，所以再建立一个freq到双向链表的映射，就可以很好解决这个问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双向链表的结点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> key&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> val&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> freq&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    Node* next&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    Node* prev&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> k, <span class="type">int</span> v, <span class="type">int</span> f) &#123;</span><br><span class="line">        key = k;</span><br><span class="line">        val = v;</span><br><span class="line">        freq = f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    Node *head, *tail;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="built_in">DoubleLinkedList</span>() &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        head-&gt;next = tail;</span><br><span class="line">        tail-&gt;prev = head;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Node* n)</span> </span>&#123;  <span class="comment">// 从链表中删除一个结点</span></span><br><span class="line">        n-&gt;prev-&gt;next = n-&gt;next;</span><br><span class="line">        n-&gt;next-&gt;prev = n-&gt;prev;</span><br><span class="line">        n-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        n-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addInLast</span><span class="params">(Node* n)</span> </span>&#123;  <span class="comment">// 把一个结点插在尾部</span></span><br><span class="line">        tail-&gt;prev-&gt;next = n;</span><br><span class="line">        n-&gt;prev = tail-&gt;prev;</span><br><span class="line">        tail-&gt;prev = n;</span><br><span class="line">        n-&gt;next = tail;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node* <span class="title">first</span><span class="params">()</span> </span>&#123;  <span class="comment">// 返回第一个结点</span></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> size == <span class="number">0</span>; &#125; <span class="comment">// 判断是否为空</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 建立key-&gt;Node的映射，因为Node中包含了value和freq等信息，这样可以直接通过key获取到</span></span><br><span class="line">    <span class="comment">// Node也是DoubleLinkedList的结点，这样建立映射就可以使得两个map之间关联起来了</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, Node*&gt; keyTonode;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, DoubleLinkedList&gt; freqTokeys;</span><br><span class="line">    <span class="type">int</span> _cap;</span><br><span class="line">    <span class="type">int</span> minFreq; <span class="comment">// 记录最小的freq</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;  <span class="comment">// 将key对应的Node从相应freq对应的双向链表中移除</span></span><br><span class="line">        Node* n = keyTonode[key];</span><br><span class="line">        freqTokeys[n-&gt;freq].<span class="built_in">remove</span>(n);</span><br><span class="line">        <span class="comment">// 判断更新minFreq</span></span><br><span class="line">        <span class="keyword">if</span> (n-&gt;freq == minFreq &amp;&amp; freqTokeys[n-&gt;freq].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            minFreq++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increaseFreq</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;  <span class="comment">// 增加key对应的freq，并且将其插入到对应的双向链表中</span></span><br><span class="line">        Node* n = keyTonode[key];</span><br><span class="line">        n-&gt;freq++;</span><br><span class="line">        <span class="type">int</span> freq = n-&gt;freq;</span><br><span class="line">        <span class="keyword">if</span> (freqTokeys.<span class="built_in">count</span>(freq) == <span class="number">0</span>) &#123;</span><br><span class="line">            DoubleLinkedList dl;</span><br><span class="line">            freqTokeys[freq] = dl;</span><br><span class="line">        &#125;</span><br><span class="line">        freqTokeys[freq].<span class="built_in">addInLast</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LFUCache</span>(<span class="type">int</span> capacity) &#123; _cap = capacity; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyTonode.<span class="built_in">count</span>(key) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">remove</span>(key);</span><br><span class="line">        <span class="built_in">increaseFreq</span>(key);</span><br><span class="line">        <span class="keyword">return</span> keyTonode[key]-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 存在key</span></span><br><span class="line">        <span class="keyword">if</span> (keyTonode.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            keyTonode[key]-&gt;val = value;</span><br><span class="line">            <span class="built_in">remove</span>(key);</span><br><span class="line">            <span class="built_in">increaseFreq</span>(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_cap == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 不存在key</span></span><br><span class="line">        <span class="keyword">if</span> (keyTonode.<span class="built_in">size</span>() == _cap) &#123;  <span class="comment">// 容量不足</span></span><br><span class="line">            Node* node = freqTokeys[minFreq].<span class="built_in">first</span>();</span><br><span class="line">            keyTonode.<span class="built_in">erase</span>(node-&gt;key);</span><br><span class="line">            freqTokeys[minFreq].<span class="built_in">remove</span>(node);</span><br><span class="line">            <span class="keyword">delete</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* n = <span class="keyword">new</span> <span class="built_in">Node</span>(key, value, <span class="number">0</span>);</span><br><span class="line">        keyTonode[key] = n;</span><br><span class="line">        <span class="built_in">increaseFreq</span>(key);</span><br><span class="line">        minFreq = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="常数时间查找删除数组元素">3 常数时间查找/删除数组元素</h2><blockquote><p>常数时间插入、删除和获取随机元素 380</p><p>黑名单中的随机数 710</p></blockquote><p>【要求】</p><p>实现<code>RandomizedSet</code> 类：</p><ul><li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code>对象</li><li><code>bool insert(int val)</code> 当元素 <code>val</code>不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回<code>false</code> 。</li><li><code>bool remove(int val)</code> 当元素 <code>val</code>存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回<code>false</code> 。</li><li><code>int getRandom()</code>随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有<strong>相同的概率</strong> 被返回。</li></ul><p>你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong>时间复杂度为 <code>O(1)</code> 。</p><p>分析：</p><p>1、需要判断<code>val</code>是否存在，肯定要用到哈希表</p><p>2、<code>getRandom</code>函数：生成一个随机数，返回该随机数为下标的数组元素</p><p>3、<code>remove</code>函数的实现需要一些技巧：将需要<code>remove</code>的元素和最后一个元素换位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; valToidx;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (valToidx.<span class="built_in">count</span>(val) == <span class="number">0</span>) &#123;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(val);</span><br><span class="line">            valToidx[val] = arr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    存在的问题是：直接从数组中间earse掉的话，会影响后面元素的下标，即map中对应的下标就失效了</span></span><br><span class="line"><span class="comment">        bool remove1(int val) &#123;</span></span><br><span class="line"><span class="comment">            if (valToidx.count(val) == 1) &#123;</span></span><br><span class="line"><span class="comment">                int idx = valToidx[val];</span></span><br><span class="line"><span class="comment">                arr.erase(arr.begin() + idx);</span></span><br><span class="line"><span class="comment">                valToidx.erase(val);</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            return false;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 将需要pop的元素和数组末尾的元素换个位置就可以很好解决了</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (valToidx.<span class="built_in">count</span>(val) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> idx = valToidx[val];</span><br><span class="line">            <span class="type">int</span> lastIdx = arr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> lastVal = arr[lastIdx];</span><br><span class="line">            <span class="comment">// swap</span></span><br><span class="line">            arr[idx] = lastVal;</span><br><span class="line">            arr[lastIdx] = val;</span><br><span class="line">            <span class="comment">// update map</span></span><br><span class="line">            valToidx[val] = lastIdx;</span><br><span class="line">            valToidx[lastVal] = idx;</span><br><span class="line"></span><br><span class="line">            arr.<span class="built_in">pop_back</span>();</span><br><span class="line">            valToidx.<span class="built_in">erase</span>(val);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">rand</span>() % arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> arr[idx];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>【要求】</p><p>给定一个整数 <code>n</code> 和一个 <strong>无重复</strong>黑名单整数数组 <code>blacklist</code> 。设计一种算法，从<code>[0, n - 1]</code> 范围内的任意整数中选取一个<strong>未加入</strong> 黑名单 <code>blacklist</code>的整数。任何在上述范围内且不在黑名单 <code>blacklist</code>中的整数都应该有 <strong>同等的可能性</strong> 被返回。</p><p>优化你的算法，使它最小化调用语言 <strong>内置</strong>随机函数的次数。</p><p>实现 <code>Solution</code> 类:</p><ul><li><code>Solution(int n, int[] blacklist)</code> 初始化整数<code>n</code> 和被加入黑名单 <code>blacklist</code> 的整数</li><li><code>int pick()</code> 返回一个范围为 <code>[0, n - 1]</code>且不在黑名单 <code>blacklist</code> 中的随机整数</li></ul><p>【分析】</p><p>1、如果使用一般的思路，将<code>[0,n-1]</code>中的元素除去<code>blacklist</code>中的放到数组里，然后再生成随机数返回。这样会出现超时（时间复杂度为<code>O(n)</code>，而<code>n</code>比较大）</p><p>2、可以把<code>[0,n-1]</code>想象成一个下标和值对应的数组（实际不存在），我们将所有<code>blacklist</code>中的元素全部移到数组末尾，然后再根据实际的长度生成随机数返回即可。</p><p>3、<strong>难点在于</strong>：如何正确地将所有<code>blacklist</code>元素移到数组末尾（注意数组并不真实存在）</p><p>​ 3.1、已经在数组末尾的元素不用移动</p><p>​3.2、<code>blacklist</code>中的一个元素映射到另一个元素时怎么处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mapping; <span class="comment">// 处理&quot;移动&quot;: tong&#x27;g将blacklist中的元素映射到相应位置</span></span><br><span class="line">    <span class="type">int</span> sz;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Solution</span>(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt;&amp; blacklist) &#123;</span><br><span class="line">        sz = n - blacklist.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> last = n - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 先将所有blacklist中的值加入到哈希表中，方便后续的判断</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : blacklist) &#123;</span><br><span class="line">            mapping[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; blacklist.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (blacklist[i] &gt;= sz) <span class="keyword">continue</span>; <span class="comment">// 元素本身就在数组末尾</span></span><br><span class="line">            <span class="keyword">while</span> (mapping.<span class="built_in">count</span>(last)) &#123; <span class="comment">// blacklist中的元素映射到了另一个元素，last就要变小</span></span><br><span class="line">                last--;</span><br><span class="line">            &#125;</span><br><span class="line">            mapping[blacklist[i]] = last;</span><br><span class="line">            last--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">rand</span>() % sz;</span><br><span class="line">        <span class="keyword">if</span> (mapping.<span class="built_in">count</span>(idx)) &#123;</span><br><span class="line">            <span class="keyword">return</span> mapping[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="求中位数">4 求中位数</h2><blockquote><p>数据流的中位数 295</p></blockquote><p>【要求】</p><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p><p>例如，</p><p>[2,3,4] 的中位数是 3</p><p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p><p>设计一个支持以下两种操作的数据结构：</p><ul><li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li><li>double findMedian() - 返回目前所有元素的中位数。</li></ul><p>使用两个优先队列：一个大顶堆、一个小顶堆</p><p>相当于将一个数组在中间分成两部分，这样通过两个堆的堆顶元素就可以求出中位数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; small;                <span class="comment">// 大顶堆</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; large;  <span class="comment">// 小顶堆</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MedianFinder</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        满足两个条件</span></span><br><span class="line"><span class="comment">        1、small和large的大小最多相差一</span></span><br><span class="line"><span class="comment">        2、small.top() &lt;= large.top()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (small.<span class="built_in">size</span>() &gt;= large.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="comment">// 插入large</span></span><br><span class="line">            small.<span class="built_in">push</span>(num);</span><br><span class="line">            large.<span class="built_in">push</span>(small.<span class="built_in">top</span>());</span><br><span class="line">            small.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 插入samll</span></span><br><span class="line">            large.<span class="built_in">push</span>(num);</span><br><span class="line">            small.<span class="built_in">push</span>(large.<span class="built_in">top</span>());</span><br><span class="line">            large.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (small.<span class="built_in">size</span>() == large.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> (small.<span class="built_in">top</span>() + large.<span class="built_in">top</span>()) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (small.<span class="built_in">size</span>() &gt; large.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> small.<span class="built_in">top</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> large.<span class="built_in">top</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
