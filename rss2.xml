<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ICDE</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 07 Nov 2022 10:53:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>pointer networks</title>
      <link>http://example.com/2022/11/07/pointer-networks/</link>
      <guid>http://example.com/2022/11/07/pointer-networks/</guid>
      <pubDate>Mon, 07 Nov 2022 10:32:19 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;由于output中目标类别的数量是取决于input的长度的，使得seq2seq和Neural</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>由于output中目标类别的数量是取决于input的长度的，使得seq2seq和Neural Turing Machines方法不能轻易解决这个问题（学习output序列的条件概率，其元素是与input序列中的位置相对应的离散tokens），引入 Pointer Networks。</p><p>它与之前的注意力尝试不同之处在于，它不是在每个解码器步骤中使用注意力将编码器的隐藏单元混合到上下文向量中，而是使用注意力作为指针来选择输入序列的成员作为输出</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/NLP/">NLP</category>
      
      
      <category domain="http://example.com/tags/NLP/">NLP</category>
      
      
      <comments>http://example.com/2022/11/07/pointer-networks/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Lab2 System Call</title>
      <link>http://example.com/2022/11/06/lab2/</link>
      <guid>http://example.com/2022/11/06/lab2/</guid>
      <pubDate>Sun, 06 Nov 2022 01:50:17 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1-Preview&quot;&gt;&lt;a href=&quot;#1-Preview&quot; class=&quot;headerlink&quot; title=&quot;1. Preview&quot;&gt;&lt;/a&gt;1. Preview&lt;/h2&gt;&lt;h3 id=&quot;1-1-xv6-book-Chap2&quot;&gt;&lt;a href=&quot;#1-1-x</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-Preview"><a href="#1-Preview" class="headerlink" title="1. Preview"></a>1. Preview</h2><h3 id="1-1-xv6-book-Chap2"><a href="#1-1-xv6-book-Chap2" class="headerlink" title="1.1 xv6-book Chap2"></a>1.1 xv6-book Chap2</h3><p>xv6-book的第二章和lecture3的内容类似，主要介绍了操作系统的组织结构，从物理资源的抽象、用户态&#x2F;内核态、系统调用、微内核&#x2F;宏内核以及代码层面展开</p><p>xv6-book的4.3、4.4节讲的是如何进行系统调用</p><h3 id="1-2-code"><a href="#1-2-code" class="headerlink" title="1.2 code"></a>1.2 code</h3><p>了解xv6启动过程</p><p><code>_entry.S</code>中将<code>stack0+4096</code>赋给栈指针寄存器<code>sp</code>，使得其指向栈顶，然后<code>call start</code></p><p><code>start</code> &#x3D;&gt; <code>main</code> &#x3D;&gt; <code>userinit</code> &#x3D;&gt; <code>initcode.S</code> &#x3D;&gt; <code>init.c</code></p><h2 id="2-System-call-tracing"><a href="#2-System-call-tracing" class="headerlink" title="2 System call tracing"></a>2 System call tracing</h2><p><code>trace</code>是一个工具，能够记录指定的系统调用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">trace 32 grep hello README</span></span><br><span class="line">3: syscall read -&gt; 1023</span><br><span class="line">3: syscall read -&gt; 966</span><br><span class="line">3: syscall read -&gt; 70</span><br><span class="line">3: syscall read -&gt; 0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令的格式</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">trace [MASK] [OPTIONS...] <span class="comment"># 其中[MASK]是一个数字n; 如果 (n &gt;&gt; i) &amp; 1 == 1 表示i号系统调用需要trace</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出的形式</span></span><br><span class="line">[pid]: syscall &lt;name&gt; -&gt; &lt;return_value&gt;</span><br></pre></td></tr></table></figure><p>首先需要明确的是<code>trace</code>也是一个系统调用，所以就需要大概明白从用户态调用<code>trace</code>工具到内核调用对应的系统调用的过程。</p><p>根据手册的指示大概能够推测出来</p><p>1、在命令行中输入：<code>trace 32 grep hello README</code> 后，实际上是执行 &#x2F;user&#x2F;trace.c 文件。过程就是 先执行 <code>trace</code> 函数，然后再执行后面的命令。</p><p>2、这个 trace 函数是需要在  &#x2F;user&#x2F;user.h 文件中定义原型的，之后好像就找不到对应的实现了。其实之后的实现是在内核态了，需要先陷入内核，手册中说要在 &#x2F;user&#x2F;usys.pl 中定义一个 stub: <code>entry(&quot;trace&quot;)</code>，这个stub会在 user&#x2F;usys.S 生成一段汇编代码：进行系统调用。</p><p>3、其中的<code>ecall</code>指令就会调用 &#x2F;kernel&#x2F;syscall.c 中的 <code>syscall</code> 函数，执行对应的系统调用函数 sys_<name></p><p>然后就可以开始根据手册的提示写代码了…</p><ol><li>在 kernel&#x2F;sysproc.c 中增加 sys_trace() 函数</li><li>要在 proc 结构体中增加一个新的变量存储 trace 的参数</li><li>修改 syscall() 函数来打印 trace 输出</li><li>修改 fork() 函数使得 trace 的参数从父进程拷贝到子进程</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 kernel/sysproc.c 中增加 sys_trace 函数</span></span><br><span class="line">uint64</span><br><span class="line"><span class="title function_">sys_trace</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="keyword">if</span>( argint(<span class="number">0</span>, &amp;n) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// parse the `n` to get which sys_call need to be traced</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span>* <span class="title">p</span> =</span> myproc();</span><br><span class="line">  p-&gt;trace_mask = n;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改 kernel/syscall.c 中的 syscall 函数</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">syscall</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line"></span><br><span class="line">  num = p-&gt;trapframe-&gt;a7; <span class="comment">// a7: sys_call number</span></span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = syscalls[num]();</span><br><span class="line">    <span class="comment">// add the trace check</span></span><br><span class="line">    <span class="keyword">if</span>( (( p-&gt;trace_mask &gt;&gt; num ) &amp; <span class="number">1</span>) == <span class="number">1</span> )&#123; <span class="comment">// need to trace</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d: syscall %s -&gt; %d\n&quot;</span>, p-&gt;pid, sys_call_names[num], p-&gt;trapframe-&gt;a0);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s: unknown sys call %d\n&quot;</span>,</span><br><span class="line">            p-&gt;pid, p-&gt;name, num);</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><blockquote><p>注意第四个测试有可能会超时，需要修改 gradelib.py 文件的第 428 行 扩大时间限制</p></blockquote><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212319005.png" alt="image-20221029212319005"></p><h2 id="3-Sysinfo"><a href="#3-Sysinfo" class="headerlink" title="3 Sysinfo"></a>3 Sysinfo</h2><p>还是实现一个系统调用，在内核填上 <code>struct sysinfo</code> 的两个字段，并拷贝回用户空间，主要过程：</p><ol><li>像<code>trace</code>那样，在对应位置增加系统调用所需的相关信息。</li><li>在 <code>kernel/proc.c</code> 中增加一个统计 <code>not UNUSED process</code> 的函数</li><li>在 <code>kernel/kalloc.c</code> 中增加一个统计 <code>free memory</code> 的函数</li><li>理解 <code>copyout</code> 函数，在系统调用中将 <code>struct sysinfo</code> 从内核空间 拷贝入 用户空间</li></ol><p>核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// need to copy the sysinfo struct from kernel space to user space</span></span><br><span class="line">uint64</span><br><span class="line"><span class="title function_">sys_sysinfo</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  uint64 addr;</span><br><span class="line">  <span class="keyword">if</span>( argaddr(<span class="number">0</span>, &amp;addr) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span> <span class="title">si</span>;</span></span><br><span class="line">  si.nproc = notunusedproc();</span><br><span class="line">  si.freemem = freemem();</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span>* <span class="title">p</span> =</span> myproc();</span><br><span class="line">  <span class="keyword">if</span>( copyout(p-&gt;pagetable, addr, (<span class="type">char</span> *)(&amp;(si)), <span class="keyword">sizeof</span>(si)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计 不是 UNUSED 的 进程数量，只需要遍历 proc 数组即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uint64</span><br><span class="line"><span class="title function_">notunusedproc</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; NPROC; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(proc[i].state != UNUSED)&#123;</span><br><span class="line">      num++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计 free memory，需要读一下 <code>kalloc.c</code> 的代码，会发现 在 <code>kalloc</code> 函数中，如果 <code>kmem.freelist</code> 不为空的话就会分配一个 <code>PGSIZE</code> 的内存空间，所以只需要统计 <code>kmem.freelist</code> 链表长度即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uint64</span><br><span class="line"><span class="title function_">freemem</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">run</span>* <span class="title">r</span> =</span> kmem.freelist;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(r)&#123;</span><br><span class="line">    r = r-&gt;next;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num * PGSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212340499.png" alt="image-20221029212340499"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/6-S081-OS-Labs/">6.S081 OS Labs</category>
      
      
      <category domain="http://example.com/tags/6-S081/">6.S081</category>
      
      
      <comments>http://example.com/2022/11/06/lab2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Lab1 Utilities</title>
      <link>http://example.com/2022/11/06/lab1/</link>
      <guid>http://example.com/2022/11/06/lab1/</guid>
      <pubDate>Sun, 06 Nov 2022 01:50:17 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;1、搭建lab环境&quot;&gt;&lt;a href=&quot;#1、搭建lab环境&quot; class=&quot;headerlink&quot; title=&quot;1、搭建lab环境&quot;&gt;&lt;/a&gt;1、搭建lab环境&lt;/h3&gt;&lt;h4 id=&quot;1、安装工具包&quot;&gt;&lt;a href=&quot;#1、安装工具包&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="1、搭建lab环境"><a href="#1、搭建lab环境" class="headerlink" title="1、搭建lab环境"></a>1、搭建lab环境</h3><h4 id="1、安装工具包"><a href="#1、安装工具包" class="headerlink" title="1、安装工具包"></a>1、安装工具包</h4><p>使用的是之前跑在 VirtualBox 上的 Ubuntu 虚拟机 版本 20.04.5 TLS</p><p>然后按照<a href="https://pdos.csail.mit.edu/6.828/2021/tools.html">官网</a>上的指令下载对应的 工具包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu</span></span><br></pre></td></tr></table></figure><p>完成之后可以测试一下</p><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212121280.png" alt="image-20221029212121280"></p><p>然后到<a href="https://pdos.csail.mit.edu/6.828/2021/labs/util.html">lab页</a> clone相应的代码</p><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212134633.png" alt="image-20221029212134633"></p><p>最后执行 <code>make qemu</code>，出现</p><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212150813.png" alt="image-20221029212150813"></p><p>即为搭建成功</p><h4 id="2、gdb调试过程"><a href="#2、gdb调试过程" class="headerlink" title="2、gdb调试过程"></a>2、gdb调试过程</h4><p>1、打开两个cmd窗口</p><p>2、其中一个输入：make qemu-gdb</p><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212206029.png" alt="image-20221029212206029"></p><p>3、另一个输入：gdb-multiarch kernel&#x2F;kernel</p><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212223488.png" alt="image-20221029212223488"></p><p>4、可以使用gdb命令进行调试了</p><h3 id="2、book-riscv-Chapter-One"><a href="#2、book-riscv-Chapter-One" class="headerlink" title="2、book-riscv Chapter One"></a>2、book-riscv Chapter One</h3><h3 id="3、sleep（easy）"><a href="#3、sleep（easy）" class="headerlink" title="3、sleep（easy）"></a>3、sleep（easy）</h3><p>这个函数比较简单，使用系统调用 sleep</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;too few arguments...&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、pingpong（easy）"><a href="#3、pingpong（easy）" class="headerlink" title="3、pingpong（easy）"></a>3、pingpong（easy）</h3><p>这个函数的实现需要重点理解<code>pipe</code>函数（xv6-book的Chapter One）</p><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212234931.png" alt="image-20221029212234931"></p><p>感性的理解，<code>pipe</code>就是创建了一个管道，使得两个进程之间可以通信（互相读取到对方写的数据）</p><p>实际上，<code>pipe</code>在传入的数组<code>p</code>里存放一个<code>read file descriptor</code>(<code>p[0]</code>)和<code>write file descriptor</code>(<code>p[1]</code>)</p><p>就像管道的一头一尾，从”头部”写入数据，可以从”尾部”读取数据</p><p>而由于<code>fork</code>创建的子进程也会带着这个数组<code>p</code>，从而可以实现父子进程的通信</p><p>（具体细节参见<a href="https://pdos.csail.mit.edu/6.828/2021/xv6/book-riscv-rev2.pdf">xv6-book</a>的相应部分）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> </span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> p[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> * parent_msg = <span class="string">&quot;p&quot;</span>;</span><br><span class="line">    <span class="type">char</span> * child_msg  = <span class="string">&quot;c&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    pipe(p);</span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d: received ping\n&quot;</span>, getpid());</span><br><span class="line">        close(p[<span class="number">0</span>]);</span><br><span class="line">        write(p[<span class="number">1</span>], child_msg, <span class="number">1</span>);</span><br><span class="line">        close(p[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        write(p[<span class="number">1</span>], parent_msg, <span class="number">1</span>);</span><br><span class="line">        close(p[<span class="number">1</span>]);</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">        read(p[<span class="number">0</span>], buffer, <span class="number">1</span>);</span><br><span class="line">        close(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d: received pong\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、primes（moderate-x2F-hard）"><a href="#4、primes（moderate-x2F-hard）" class="headerlink" title="4、primes（moderate&#x2F;hard）"></a>4、primes（moderate&#x2F;hard）</h3><p><code>primes</code>函数是借助<code>pipeline</code>实现了一个素数筛。</p><p>需要好好理解下面<a href="https://swtch.com/~rsc/thread/">这幅图</a>和上面的<code>pipe</code></p><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221029212246450.png" alt="image-20221029212246450"></p><p>思想：在每个进程中，选取一个素数<code>N</code>（就是通过管道读到的第一个数），然后把所有读到的数中不能被整除<code>N</code>的数继续通过管道写进下一个进程中，而把可以整除的数<code>drop</code>掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> * p)</span>&#123;</span><br><span class="line">    <span class="type">int</span> p1[<span class="number">2</span>];</span><br><span class="line">    p1[<span class="number">0</span>] = p[<span class="number">0</span>]; p1[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    pipe(p); <span class="comment">// create the new pipeline connect the it and the it&#x27;s child</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> num[<span class="number">1</span>];</span><br><span class="line">    close(p1[<span class="number">1</span>]); <span class="comment">// close the old write</span></span><br><span class="line">    <span class="keyword">if</span>( read(p1[<span class="number">0</span>], num, <span class="number">1</span>) == <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="type">int</span> prime = num[<span class="number">0</span>]; <span class="comment">// the first number is the prime</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;prime %d\n&quot;</span>, prime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">            func(p); <span class="comment">// recursion</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            close(p[<span class="number">0</span>]); <span class="comment">// close the read</span></span><br><span class="line">            <span class="keyword">while</span> ( read(p1[<span class="number">0</span>], num, <span class="number">1</span>) == <span class="number">1</span> )&#123;</span><br><span class="line">                <span class="type">int</span> n = num[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span>(n % prime != <span class="number">0</span>)&#123;</span><br><span class="line">                    write(p[<span class="number">1</span>], num, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            close(p1[<span class="number">0</span>]);</span><br><span class="line">            close(p[<span class="number">1</span>]);</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// no data avaliable</span></span><br><span class="line">        close(p[<span class="number">0</span>]);</span><br><span class="line">        close(p[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> </span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[<span class="number">2</span>];</span><br><span class="line">    pipe(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">      func(p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        close(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">char</span> num[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">35</span>; i++)&#123;</span><br><span class="line">            num[<span class="number">0</span>] = i;</span><br><span class="line">            write(p[<span class="number">1</span>], num, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        close(p[<span class="number">1</span>]);</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、find（moderate）"><a href="#5、find（moderate）" class="headerlink" title="5、find（moderate）"></a>5、find（moderate）</h3><p><code>find</code>函数的实现需要先去学习一下<code>ls</code>函数的实现，主要是学习如何读取目录的，读懂了之后难度不是很大，需要注意一些细节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Look at user/ls.c to see how to read directories.</span></span><br><span class="line">    <span class="comment">// Use recursion to allow find to descend into sub-directories.</span></span><br><span class="line">    <span class="comment">// Don&#x27;t recurse into &quot;.&quot; and &quot;..&quot;.</span></span><br><span class="line">    <span class="comment">// Changes to the file system persist across runs of qemu; to get a clean file system run make clean and then make qemu.</span></span><br><span class="line">    <span class="comment">// You&#x27;ll need to use C strings. Have a look at K&amp;R (the C book), for example Section 5.5.</span></span><br><span class="line">    <span class="comment">// Note that == does not compare strings like in Python. Use strcmp() instead.</span></span><br><span class="line">    <span class="comment">// Add the program to UPROGS in Makefile. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">find</span><span class="params">(<span class="type">char</span> *dir, <span class="type">char</span> *file)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> <span class="title">de</span>;</span></span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">512</span>], *p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// put the dir_name into the buf</span></span><br><span class="line">    <span class="comment">// buf : dir_name/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf, dir);</span><br><span class="line">    p = buf + <span class="built_in">strlen</span>(buf);</span><br><span class="line">    *p++ = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( (fd = open(dir, <span class="number">0</span>)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot open %s\n&quot;</span>, dir);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( fstat(fd, &amp;st) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot stat %s\n&quot;</span>, dir);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(st.type != T_DIR)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: %s is not a dir\n&quot;</span>, dir);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// read the every file or dir in the `dir` sequentially</span></span><br><span class="line">    <span class="keyword">while</span>( read(fd, &amp;de, <span class="keyword">sizeof</span>(de)) == <span class="keyword">sizeof</span>(de))&#123;</span><br><span class="line">        <span class="keyword">if</span>(de.inum == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> *name = de.name;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(name, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(name, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>) <span class="keyword">continue</span>; <span class="comment">// not consider the . and ..</span></span><br><span class="line"></span><br><span class="line">        memmove(p, name, DIRSIZ);</span><br><span class="line">        p[DIRSIZ] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stat(buf, &amp;st) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;find: cannot stat %s\n&quot;</span>, name);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(st.type == T_DIR)&#123;</span><br><span class="line">            find(buf, file);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(name, file) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find &lt;dir_name&gt; &lt;file_name&gt;</span></span><br><span class="line"><span class="comment">// find all the &lt;file_name&gt; in the &lt;dir_name&gt;</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">1</span>, <span class="string">&quot;the arguments is too few...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、xargs（moderate）"><a href="#6、xargs（moderate）" class="headerlink" title="6、xargs（moderate）"></a>6、xargs（moderate）</h3><p>首先需要知道这个命令是干什么的。</p><blockquote><p>Run COMMAND with arguments INITIAL-ARGS and more arguments read from input.</p></blockquote><p>总的来说就是<strong>用来跑其他命令的，而参数从输入中读取</strong>。</p><p>从实验手册上的要求和例子来看，实现的是一个只带<code>-n</code>参数且参数值只为1的<code>xargs</code>命令</p><p>这里的<code>-n</code>的意思是执行命令最大能够从输入读取的参数个数，如果<code>-n 1</code>就意味着只能从输入读取一个参数执行命令，所以就意味着会执行多次命令（需要把读取的参数用完）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> hello too | xargs <span class="built_in">echo</span> <span class="built_in">bye</span></span></span><br><span class="line">bye hello too</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;1\n2&quot;</span> | xargs -n 1 <span class="built_in">echo</span> line</span></span><br><span class="line">line 1</span><br><span class="line">line 2</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><p>理解了<code>xargs</code>的作用和实现的细节，就可以开始写代码了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">author: zhhc</span></span><br><span class="line"><span class="comment">date:   2022-10-09</span></span><br><span class="line"><span class="comment">time-spent: about 3 hours</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> seq_num = MAXARG;  <span class="comment">// the max_args per cmd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exec1</span><span class="params">(<span class="type">char</span> **argv)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">        exec(argv[<span class="number">0</span>], argv);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;too few arguments...&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">512</span>]; <span class="comment">// store the input from the previous cmd</span></span><br><span class="line">    <span class="type">int</span> read_n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> read_total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// attention: if exits &#x27;\n&#x27;, just a read can not read all</span></span><br><span class="line">    <span class="keyword">while</span>( (read_n = read(<span class="number">0</span>, buf + read_total, <span class="number">512</span>)) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        read_total += read_n; <span class="comment">// stat the number of input</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = read_total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch all the &#x27;\n&#x27; to &#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i] == <span class="string">&#x27;\n&#x27;</span>) buf[i] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cmd_ptr = <span class="number">1</span>; <span class="comment">// the ptr to cmd</span></span><br><span class="line">    <span class="type">bool</span> is_set_n = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set the max args</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;-n&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        is_set_n = <span class="literal">true</span>;</span><br><span class="line">        cmd_ptr = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* cmd_argv[MAXARG]; <span class="comment">// the cmd argv</span></span><br><span class="line">    <span class="comment">// put the arg into the cmd_argv</span></span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cmd_ptr; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">char</span> *arg = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(argv[i])+<span class="number">1</span>); <span class="comment">// attention: must use malloc, put the data in heap</span></span><br><span class="line">        <span class="comment">// if use char arg[MAXARG] will cause the error</span></span><br><span class="line">        <span class="built_in">strcpy</span>(arg, argv[i]);</span><br><span class="line">        cmd_argv[idx] = arg;</span><br><span class="line">        idx ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_set_n)&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> arg[MAXARG];</span><br><span class="line">        <span class="built_in">memset</span>(arg, <span class="number">0</span>, MAXARG); <span class="comment">// clear the space</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[i] == <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">// can spilt out a arg</span></span><br><span class="line"></span><br><span class="line">                arg[index++] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                cmd_argv[idx++] = arg;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// run</span></span><br><span class="line">                exec1(cmd_argv);</span><br><span class="line"></span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">memset</span>(arg, <span class="number">0</span>, MAXARG); <span class="comment">// clear the space</span></span><br><span class="line"></span><br><span class="line">                idx --;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arg[index ++] = buf[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// should spilt the args with &#x27; &#x27;</span></span><br><span class="line">        <span class="comment">// and put them into cmd_argv sequentially</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="type">char</span>* add_arg = (<span class="type">char</span> *)<span class="built_in">malloc</span>(i - prev);</span><br><span class="line">                <span class="built_in">memcpy</span>(add_arg, buf+prev, i - prev);</span><br><span class="line">                prev = i+<span class="number">1</span>; <span class="comment">// attention</span></span><br><span class="line">                cmd_argv[idx++] = add_arg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exec1(cmd_argv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>记录一个小问题</p><p>发生在将argv里的参数拷贝到cmd_argv的过程中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="type">char</span> agr[<span class="number">32</span>]; <span class="comment">// 每次分配到的地址都是一样的！！！</span></span><br><span class="line">    cmd_argv[idx ++] = <span class="built_in">strcpy</span>(arg, argv[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组空间是分配在栈中的，而且一次迭代之后空间失效，再次分配时就会分配相同的地址空间，导致cmd_argv中的指针值都是一样的，然后strcpy就是在不断地改变那块地址中的内容。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/6-S081-OS-Labs/">6.S081 OS Labs</category>
      
      
      <category domain="http://example.com/tags/6-S081/">6.S081</category>
      
      
      <comments>http://example.com/2022/11/06/lab1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动态规划应用</title>
      <link>http://example.com/2022/11/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BA%94%E7%94%A8%E9%A2%98/</link>
      <guid>http://example.com/2022/11/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BA%94%E7%94%A8%E9%A2%98/</guid>
      <pubDate>Sun, 06 Nov 2022 01:45:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;动态规划应用&quot;&gt;&lt;a href=&quot;#动态规划应用&quot; class=&quot;headerlink&quot; title=&quot;动态规划应用&quot;&gt;&lt;/a&gt;动态规划应用&lt;/h1&gt;&lt;h2 id=&quot;一、股票问题&quot;&gt;&lt;a href=&quot;#一、股票问题&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="动态规划应用"><a href="#动态规划应用" class="headerlink" title="动态规划应用"></a>动态规划应用</h1><h2 id="一、股票问题"><a href="#一、股票问题" class="headerlink" title="一、股票问题(*)"></a>一、股票问题(*)</h2><blockquote><p> <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/">188. 买卖股票的最佳时机 IV</a></p><p>给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p></blockquote><p>labuladong算法秘籍中使用了【三个<strong>状态</strong>】（三维dp数组）</p><ol><li>第几天</li><li>手中是否持有股票</li><li>最大交易限制（最大交易限制只在买入股票时减一）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i][j][k] 意味着在第i天，手中持有(j=1)或不持有(j=0)股票，最大交易限制为k情况下的最大利润</span></span><br></pre></td></tr></table></figure><p><strong>状态转移方程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>][k] = Math.max(</span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">0</span>][k],  <span class="comment">// 第i天 不买入不卖出: 第i-1天也没有股票，交易限制还是k</span></span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">1</span>][k]+prices[i-<span class="number">1</span>] <span class="comment">// 第i天 卖出: 第i-1天有股票，交易限制还是k</span></span><br><span class="line">);</span><br><span class="line">dp[i][<span class="number">1</span>][k] = Math.max(</span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">1</span>][k], <span class="comment">// 第i天 不买入不卖出: 第i-1天有股票，交易限制为k</span></span><br><span class="line">    dp[i-<span class="number">1</span>][<span class="number">0</span>][k-<span class="number">1</span>]-prices[i-<span class="number">1</span>] <span class="comment">// 第i天 买入: 第i-1天没有股票，最大交易次数不能超过k-1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>base case</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = <span class="number">0</span>; dp[<span class="number">0</span>][<span class="number">1</span>][...] = Integer.MIN_VALUE;</span><br><span class="line">dp[...][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; dp[...][<span class="number">1</span>][<span class="number">0</span>] = Integer.MIN_VALUE;</span><br></pre></td></tr></table></figure><h2 id="二、打劫家舍问题"><a href="#二、打劫家舍问题" class="headerlink" title="二、打劫家舍问题"></a>二、打劫家舍问题</h2><blockquote><p>[198.打劫家舍](<a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍 - 力扣（LeetCode）</a>)</p><p> <a href="https://leetcode.cn/problems/house-robber-ii/">213. 打家劫舍 II</a></p><p><a href="https://leetcode.cn/problems/house-robber-iii/">337. 打家劫舍 III</a></p></blockquote><h3 id="1、打劫家舍"><a href="#1、打劫家舍" class="headerlink" title="1、打劫家舍"></a>1、打劫家舍</h3><p>【状态】是 <u>抢劫第i家时能获得的最大金额</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态转移方程</span></span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">2</span>], dp[i-<span class="number">3</span>]) + nums[i];</span><br></pre></td></tr></table></figure><h3 id="2、打劫家舍Ⅱ"><a href="#2、打劫家舍Ⅱ" class="headerlink" title="2、打劫家舍Ⅱ"></a>2、打劫家舍Ⅱ</h3><blockquote><p>特别之处在于 nums 换成了环形数组</p></blockquote><p>应对策略也十分巧妙</p><p>$f([x_{1}, x_{2}, … , x_{n}]) &#x3D; max( f([x_{1}, x_{2}, …, x_{n-1}]), f([x_{2}, …, x_{n}]) )$</p><p><u><strong>既然首尾相连了，那么肯定最多只能抢劫一家，把另外一家除去</strong></u>，就把环形数组又变成了普通数组了。</p><h3 id="3、打劫家舍Ⅲ"><a href="#3、打劫家舍Ⅲ" class="headerlink" title="3、打劫家舍Ⅲ"></a>3、打劫家舍Ⅲ</h3><blockquote><p>把家舍的形状变成了二叉树</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] res = dp(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(res[<span class="number">0</span>], res[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return &#123;x, y&#125; </span></span><br><span class="line">    <span class="comment">// x: 包括root节点的最高金额 </span></span><br><span class="line">    <span class="comment">// y: 不包含root节点的最高金额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] dp(TreeNode root)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] left = dp(root.left);</span><br><span class="line">        <span class="type">int</span>[] right = dp(root.right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> left[<span class="number">1</span>] + right[<span class="number">1</span>] + root.val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Math.max(left[<span class="number">1</span>], left[<span class="number">0</span>]) + Math.max(right[<span class="number">1</span>], right[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、博弈问题"><a href="#三、博弈问题" class="headerlink" title="三、博弈问题"></a>三、博弈问题</h2><blockquote><p><a href="https://leetcode.cn/problems/predict-the-winner/">486. 预测赢家</a></p></blockquote><p>最核心最关键的还是在【找状态】，理解！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种比较容易理解的，三维数组</span></span><br><span class="line"><span class="comment">// dp[i][j][0] 表示在[xi...xj]区间时，先手的最大得分</span></span><br><span class="line">dp[i][j][<span class="number">0</span>] = Math.max(nums[i]+dp[i+<span class="number">1</span>][j][<span class="number">1</span>], nums[j]+dp[i][j-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// [i...j] 先手可以选择i也可以选择j</span></span><br><span class="line"><span class="comment">// 选择i后，在[i+1...j]区间就变成了后手，就是dp[i+1][j][1]</span></span><br><span class="line"><span class="comment">// 选择j后，在[i...j+1]区间就变成了后手，就是dp[i][j-1][1]</span></span><br><span class="line"><span class="keyword">if</span> 先手选择了i: dp[i][j][<span class="number">1</span>] = dp[i+<span class="number">1</span>][j][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> 先手选择了j: dp[i][j][<span class="number">1</span>] = dp[i][j-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种稍微改进一点，二维数组</span></span><br><span class="line"><span class="comment">// dp[i][j][1] 表示在[xi...xj]区间时，先手的最大得分-后手的最大得分</span></span><br><span class="line">dp[i][j] = Math.max(nums[i] - dp[i+<span class="number">1</span>][j], nums[j] - dp[i][j-<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 在[i...j]先手做出选择后，就变成了后手，所以是&lt;减&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、扔鸡蛋（-）"><a href="#四、扔鸡蛋（-）" class="headerlink" title="四、扔鸡蛋（***）"></a>四、扔鸡蛋（***）</h2><blockquote><p><a href="https://leetcode.cn/problems/super-egg-drop/">887.鸡蛋掉落</a></p><p>这道题理解上难度很高…</p></blockquote><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/my-blog-imgs/image-20221104212852347.png" alt="image-20221104212852347"></p><p>这里讲一个逆向思维。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] 表示有j个鸡蛋，可以操作i次，可以在最高dp[i][j]的建筑里保证找到f</span><br></pre></td></tr></table></figure><p>比如<code>dp[2][1]=2</code>，表示有1个鸡蛋，可以操作2次，可以在最高2楼的建筑里保证找到<code>f</code>。意思就是如果楼<code>&gt;=</code>3，就不能保证在1个鸡蛋2次操作的情况下找到f。这里的保证是指不管在什么情况下都可以成功找到f，而不是说有一定概率可以找到。很好理解，不管多高的楼层，即使给1个鸡蛋1次操作，也有一定概率可以找到f（第1层就碎了，所以<code>f=0</code>）</p><p>理解完状态之后，就需要找到状态转移方程。先给出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = <span class="number">1</span> + dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + dp[i][j-<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>这里应该是这道题最难理解的地方。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/">leetcode刷题笔记</category>
      
      
      
      <comments>http://example.com/2022/11/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BA%94%E7%94%A8%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Lab3 Page Table</title>
      <link>http://example.com/2022/11/06/lab3/</link>
      <guid>http://example.com/2022/11/06/lab3/</guid>
      <pubDate>Sat, 05 Nov 2022 16:40:57 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;lecture 4&lt;/code&gt;和&lt;code&gt;chapter 3 page tables&lt;/code&gt;的学习笔记&lt;/p&gt;
&lt;p&gt;1、page table&lt;/p&gt;
&lt;p&gt;2、xv6中的page table&lt;/p&gt;
&lt;p&gt;探究&lt;code&gt;walk&lt;/code&gt;函数存</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>lecture 4</code>和<code>chapter 3 page tables</code>的学习笔记</p><p>1、page table</p><p>2、xv6中的page table</p><p>探究<code>walk</code>函数存在的意义？</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/6-S081-OS-Labs/">6.S081 OS Labs</category>
      
      
      <category domain="http://example.com/tags/6-S081/">6.S081</category>
      
      
      <comments>http://example.com/2022/11/06/lab3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ECMAScript</title>
      <link>http://example.com/2022/11/05/ECMAScript/</link>
      <guid>http://example.com/2022/11/05/ECMAScript/</guid>
      <pubDate>Sat, 05 Nov 2022 08:13:01 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;ECMAScript&quot;&gt;&lt;a href=&quot;#ECMAScript&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript&quot;&gt;&lt;/a&gt;ECMAScript&lt;/h1&gt;&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>ECMA是一个组织，制定了一些标准，然后JS去实现这些标准。</p><p>ES2015兼容性：IE10+、Chrome、FireFox、移动端、NodeJS</p><p>由于兼容性问题，对于一些版本较低的设备，就需要使用一些方法使得ES6的代码可以运行起来</p><p>1、浏览器打开页面时，对ES6代码进行转换。</p><p>2、先将ES6代码编译为可以被低版本设备接收的代码，再拿去执行。</p><h2 id="2-let-x2F-const和块级作用域"><a href="#2-let-x2F-const和块级作用域" class="headerlink" title="2 let&#x2F;const和块级作用域"></a>2 let&#x2F;const和块级作用域</h2><p>之前的JS中只有<code>var</code>可以声明变量，但是<code>var</code>存在一些问题：</p><ol><li>可以重复声明 &#x3D;》混乱</li><li>无法限制修改 &#x3D;》 想要声明常量全凭自觉</li><li>没有块级作用域（只有函数作用域）</li></ol><p>对于第3个问题，下面举一个例子说明</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i*i;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resluts = <span class="title function_">func</span>()</span><br><span class="line"><span class="keyword">var</span> f1 = results[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> f2 = resluts[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> f3 = resluts[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>(); <span class="comment">// 16</span></span><br><span class="line"><span class="title function_">f2</span>(); <span class="comment">// 16</span></span><br><span class="line"><span class="title function_">f3</span>(); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><p>这个现象就是由于<code>var</code>没有块级作用域引起的。由于函数内部都引用了变量<code>i</code>，但是函数并不是立刻执行的，等到<code>results[0]</code>需要返回的时候，<code>i</code>已经变成3了，所以都输出了<code>9</code>。</p><p>一种解决方法是使用闭包来解决，创建一个匿名函数并立刻执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>( </span><br><span class="line">            (<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> n * n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)(i)</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resluts = <span class="title function_">func</span>()</span><br><span class="line"><span class="keyword">var</span> f1 = results[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> f2 = resluts[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> f3 = resluts[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">f2</span>(); <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">f3</span>(); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></blockquote><p>ES6引入<code>let</code>和<code>const</code>关键字，可以有效解决上面三个问题。</p><ol><li>使用<code>let</code>和<code>const</code>声明变量，不能重复声明</li><li><code>const</code>声明常量，不能修改</li><li><code>let</code>和<code>const</code>都是块级作用域，要解决上面的问题，只要将<code>for(var i...)</code>改成<code>for(let i...)</code>即可。</li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/">大前端学习</category>
      
      
      <category domain="http://example.com/tags/ES6/">ES6</category>
      
      
      <comments>http://example.com/2022/11/05/ECMAScript/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2022/09/22/hello-world/</link>
      <guid>http://example.com/2022/09/22/hello-world/</guid>
      <pubDate>Thu, 22 Sep 2022 07:39:36 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="A-Picture"><a href="#A-Picture" class="headerlink" title="A Picture"></a>A Picture</h3><p><img src="https://my-picture-repo.obs.cn-east-3.myhuaweicloud.com/imgs/QQ%E5%9B%BE%E7%89%8720200731164308.jpg" alt="image-20221018133542000"></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/09/22/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
